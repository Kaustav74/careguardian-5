{"file_contents":{"README.md":{"content":"# CareGuardian Healthcare Platform 🏥\n\n**CareGuardian** is a comprehensive healthcare platform that serves as a personal healthcare companion, providing users with tools to manage their health journey including medical records, doctor appointments, emergency services, medication tracking, and AI-powered health assistance.\n\n## ✨ Features\n\n### Core Healthcare Features\n- **🏥 Hospital Management** - Find and connect with hospitals\n- **👨‍⚕️ Doctor Directory** - Browse doctors by specialty and availability  \n- **📅 Appointment Scheduling** - Book virtual and in-person consultations\n- **📋 Medical Records** - Secure storage and management of health records\n- **💊 Medication Tracker** - Track medications, dosages, and refill dates\n- **🩺 Health Data Monitoring** - Record vital signs and health metrics\n\n### Advanced Features\n- **🚑 Hospital-on-Wheels** - Mobile healthcare services\n- **🆘 First Aid Assistance** - Emergency guidance and AI-powered support\n- **🥗 Diet Routine Management** - Personalized nutrition tracking\n- **🎤 Voice Interaction** - Speech recognition for accessibility\n- **🤖 AI Health Assistant** - OpenAI-powered symptom checker and health guidance\n- **💳 Subscription Management** - Tiered payment plans with Stripe integration\n\n### Technical Features\n- **🔐 Secure Authentication** - Session-based user management\n- **📱 Responsive Design** - Works on mobile, tablet, and desktop\n- **🌙 Dark Mode Support** - System and manual theme switching\n- **🔄 Real-time Updates** - Live data synchronization\n- **☁️ Cloud Database** - PostgreSQL with Neon serverless\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript for type safety\n- **Wouter** for lightweight client-side routing\n- **Radix UI** + **shadcn/ui** for accessible components\n- **Tailwind CSS** for styling with custom theming\n- **TanStack Query** for server state management\n- **React Hook Form** + **Zod** for form validation\n- **Vite** for fast development and builds\n\n### Backend\n- **Express.js** with TypeScript REST API\n- **Passport.js** for authentication with local strategy\n- **Node.js crypto** for secure password hashing\n- **Express Session** with PostgreSQL session store\n\n### Database & ORM\n- **PostgreSQL** (Neon serverless database)\n- **Drizzle ORM** for type-safe database operations\n- **Drizzle Kit** for schema migrations\n\n### External Services\n- **OpenAI API** for AI-powered health assistance\n- **Stripe** for payment processing\n- **React Speech Recognition** for voice features\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database (or use the built-in Neon database)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd careguardian\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   \n   Required environment variables:\n   ```bash\n   DATABASE_URL=your_postgresql_connection_string\n   OPENAI_API_KEY=your_openai_api_key\n   STRIPE_SECRET_KEY=your_stripe_secret_key\n   VITE_STRIPE_PUBLIC_KEY=your_stripe_publishable_key\n   ```\n\n4. **Set up the database**\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n   The application will be available at `http://localhost:5000`\n\n### Default Credentials\n- **Username**: `admin`\n- **Password**: `admin`\n\n## 📊 Database Schema\n\n### Core Tables\n- **users** - User profiles and authentication\n- **health_data** - Vital signs and health metrics\n- **medical_records** - Medical history and documents\n- **doctors** - Healthcare provider directory\n- **hospitals** - Hospital information and locations\n- **appointments** - Appointment scheduling\n- **medications** - Medication tracking and management\n- **medication_logs** - Medication adherence logs\n- **chat_messages** - AI chatbot conversation history\n\n## 🔌 API Endpoints\n\n### Authentication\n- `POST /api/login` - User login\n- `POST /api/register` - User registration\n- `POST /api/logout` - User logout\n- `GET /api/user` - Get current user info\n\n### Health Data\n- `GET /api/health-data` - Get user health metrics\n- `POST /api/health-data` - Record new health data\n\n### Medical Records\n- `GET /api/medical-records` - Get user medical records\n- `POST /api/medical-records` - Create medical record\n\n### Appointments\n- `GET /api/appointments` - Get user appointments\n- `POST /api/appointments` - Schedule appointment\n\n### Medications\n- `GET /api/medications` - Get user medications\n- `POST /api/medications` - Add new medication\n- `POST /api/medication-logs` - Log medication taken\n\n### AI Features\n- `POST /api/chat` - Send message to AI health assistant\n\n## 🔧 Development\n\n### Available Scripts\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - Type checking\n- `npm run db:push` - Push database schema changes\n\n### Project Structure\n```\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── pages/         # Application pages\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── lib/           # Utilities and configurations\n├── server/                # Express.js backend\n│   ├── auth.ts           # Authentication logic\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # Database interface\n│   └── openai.ts         # AI integration\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Database schema definitions\n└── README.md\n```\n\n### Database Development\n- Schema changes should be made in `shared/schema.ts`\n- Use `npm run db:push` to apply changes to development database\n- The application uses Drizzle ORM for type-safe database operations\n\n### Authentication Flow\n- Session-based authentication with HTTP-only cookies\n- Passwords are hashed using Node.js scrypt with random salt\n- Protected routes automatically redirect unauthenticated users\n\n## 🚀 Deployment\n\n### Building for Production\n```bash\nnpm run build\nnpm run start\n```\n\n### Environment Setup\nEnsure all required environment variables are configured in your production environment.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🆘 Support\n\nFor support and questions:\n- Check the documentation above\n- Review the code comments and type definitions\n- Create an issue for bug reports or feature requests\n\n---\n\n**CareGuardian** - Your Personal Healthcare Companion 💙","size_bytes":6935},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CareGuardian Healthcare Platform\n\n## Overview\n\nCareGuardian is a comprehensive healthcare platform that serves as a personal healthcare companion. The application provides users with tools to manage their health journey including medical records, doctor appointments, emergency services, medication tracking, diet routines, and AI-powered health assistance. The platform features a full-stack architecture with user authentication, real-time health monitoring, and integrated payment systems for subscription-based services.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing with protected routes for authenticated users\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom theme configuration supporting light/dark modes\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Authentication**: Passport.js with local strategy using session-based authentication\n- **Password Security**: Node.js crypto module with scrypt for secure password hashing\n- **Session Management**: Express-session with PostgreSQL session store for persistent sessions\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n\n### Data Storage Solutions\n- **Database**: PostgreSQL as the primary database\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Management**: Centralized schema definitions in TypeScript with Zod validation\n- **Connection**: Connection pooling with @neondatabase/serverless for optimal performance\n\n### Database Schema Design\nThe application uses a relational database structure with the following key entities:\n- **Users**: Core user profiles with authentication credentials, personal information, and role assignments (patient, ambulance)\n- **Health Data**: Time-series health metrics (heart rate, blood pressure, glucose, temperature)\n- **Medical Records**: Document storage for medical history and reports\n- **Appointments**: Scheduling system for doctor consultations (virtual and in-person) with status tracking\n- **Medications**: Prescription tracking and medication management\n- **Doctors/Hospitals**: Provider directory with specialties and contact information\n- **Ambulances**: Emergency vehicle fleet with location tracking and driver assignment via userId\n- **Ambulance Bookings**: Patient ambulance requests with status tracking and location details\n- **Chat Messages**: AI chatbot conversation history\n\n### Authentication and Authorization\n- **Session-based Authentication**: Secure session management with HTTP-only cookies\n- **Password Security**: Salted and hashed passwords using industry-standard scrypt algorithm\n- **Protected Routes**: Frontend route protection with automatic redirection for unauthenticated users\n- **Role-based Access Control**: Different user interfaces and API endpoints based on user role (patient vs ambulance driver)\n- **CSRF Protection**: Same-site cookie configuration for cross-site request forgery protection\n\n### AI Integration\n- **OpenAI Integration**: GPT-4 powered features for symptom analysis and health guidance\n- **Symptom Checker**: AI-driven analysis of user symptoms with risk assessment\n- **Chatbot**: Conversational AI for health queries and first aid guidance\n- **Health Analytics**: Predictive health insights based on user data patterns\n\n### Payment System Architecture\n- **Stripe Integration**: Secure payment processing for subscription plans\n- **Subscription Management**: Tiered pricing model (Basic, Premium, Enterprise)\n- **Payment Security**: PCI-DSS compliant payment handling through Stripe\n\n### Emergency Services System\n- **Ambulance Fleet Management**: Real-time tracking and status management of ambulance vehicles\n- **Driver Portal**: Dedicated dashboard for ambulance drivers to manage bookings and update locations\n- **Geolocation Integration**: Browser-based geolocation API for real-time position tracking\n- **Booking System**: Patient ambulance requests with pickup/dropoff addresses and medical condition details\n- **Status Workflow**: Pending → Accepted → Completed booking lifecycle with driver controls\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connectivity\n- **drizzle-orm**: Type-safe ORM for database operations\n- **express**: Web application framework for the backend API\n- **react**: Frontend user interface library\n- **@tanstack/react-query**: Server state management and caching\n\n### Authentication and Security\n- **passport**: Authentication middleware with local strategy\n- **express-session**: Session management middleware\n- **connect-pg-simple**: PostgreSQL session store\n- **crypto**: Node.js built-in module for password hashing\n\n### UI and Design System\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library for consistent iconography\n\n### Development and Build Tools\n- **vite**: Modern build tool and development server\n- **typescript**: Static type checking and enhanced developer experience\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Form Handling and Validation\n- **react-hook-form**: Performance-focused form library\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema definition\n\n### AI and Voice Features\n- **openai**: Official OpenAI API client for GPT integration\n- **react-speech-recognition**: Browser speech recognition API wrapper\n\n### Payment Processing\n- **@stripe/stripe-js**: Stripe JavaScript SDK\n- **@stripe/react-stripe-js**: React components for Stripe integration\n\n### Additional Utilities\n- **wouter**: Lightweight routing library\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **nanoid**: Unique ID generation","size_bytes":6581},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"careguidian-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24, // 24 hours\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: 'lax',\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      // Extend the schema to validate password requirements\n      const registerSchema = insertUserSchema.extend({\n        password: z.string().min(8, \"Password must be at least 8 characters long\"),\n        email: z.string().email(\"Invalid email format\"),\n      });\n      \n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if username or email already exists\n      const existingUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      const existingEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n      });\n\n      // If registering as hospital, create hospital record\n      if (validatedData.role === \"hospital\" && req.body.address && req.body.city && req.body.state) {\n        try {\n          await storage.createHospital({\n            name: validatedData.fullName,\n            address: req.body.address,\n            city: req.body.city,\n            state: req.body.state,\n            phoneNumber: validatedData.phoneNumber || \"\",\n            email: validatedData.email,\n          });\n        } catch (error) {\n          console.error(\"Failed to create hospital record:\", error);\n          // Continue with user registration even if hospital creation fails\n        }\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid registration data\", errors: error.errors });\n      }\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: Error | null, user: Express.User | false, info: { message: string } | undefined) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n      \n      req.login(user, (loginErr) => {\n        if (loginErr) return next(loginErr);\n        return res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":4991},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n/**\n * Analyzes symptoms provided by the user and returns potential diagnoses\n * \n * @param symptoms - The symptoms described by the user\n * @param age - The user's age\n * @param gender - The user's gender\n * @param medicalHistory - The user's relevant medical history\n * @returns Analysis results including potential conditions, recommendations, and urgency level\n */\nexport async function analyzeSymptoms(\n  symptoms: string,\n  age: number,\n  gender: string,\n  medicalHistory?: string | null\n): Promise<{\n  possibleConditions: Array<{ condition: string; probability: string }>;\n  recommendations: string[];\n  urgencyLevel: \"low\" | \"medium\" | \"high\" | \"emergency\";\n  disclaimer: string;\n}> {\n  try {\n    const prompt = `\n      As a medical assistant AI, analyze the following symptoms and provide potential diagnoses and recommendations.\n      \n      Patient Information:\n      - Age: ${age}\n      - Gender: ${gender}\n      - Symptoms: ${symptoms}\n      ${medicalHistory ? `- Medical History: ${medicalHistory}` : ''}\n      \n      Based on this information, provide:\n      1. 2-5 possible conditions that match these symptoms (with probability level: low, medium, or high)\n      2. General recommendations for the patient\n      3. Urgency level (low, medium, high, or emergency)\n      \n      Respond with JSON in this format:\n      {\n        \"possibleConditions\": [\n          {\"condition\": \"Name of condition\", \"probability\": \"low/medium/high\"}\n        ],\n        \"recommendations\": [\"recommendation 1\", \"recommendation 2\", ...],\n        \"urgencyLevel\": \"low/medium/high/emergency\",\n        \"disclaimer\": \"Standard medical disclaimer\"\n      }\n      \n      IMPORTANT: Include a clear medical disclaimer stating this is not a replacement for professional medical advice.\n    `;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0].message.content || '{}';\n    const result = JSON.parse(content);\n    \n    return {\n      possibleConditions: result.possibleConditions || [],\n      recommendations: result.recommendations || [],\n      urgencyLevel: result.urgencyLevel || \"low\",\n      disclaimer: result.disclaimer || \"This analysis is not a substitute for professional medical advice, diagnosis, or treatment. Always seek the advice of your physician or other qualified health provider with any questions you may have regarding a medical condition.\"\n    };\n  } catch (error) {\n    console.error(\"Error analyzing symptoms:\", error);\n    throw new Error(\"Failed to analyze symptoms. Please try again later.\");\n  }\n}\n\n/**\n * Gets first aid guidance for a specific medical situation\n * \n * @param situation - The medical situation requiring first aid\n * @returns First aid guidance including steps and warnings\n */\nexport async function getFirstAidGuidance(\n  situation: string\n): Promise<{\n  situation: string;\n  steps: string[];\n  warnings: string[];\n  disclaimer: string;\n}> {\n  try {\n    const prompt = `\n      As a medical assistant AI, provide first aid guidance for the following situation:\n      \n      Situation: ${situation}\n      \n      Based on this information, provide:\n      1. Step-by-step first aid instructions\n      2. Important warnings or precautions\n      \n      Respond with JSON in this format:\n      {\n        \"situation\": \"Brief description of the situation\",\n        \"steps\": [\"step 1\", \"step 2\", ...],\n        \"warnings\": [\"warning 1\", \"warning 2\", ...],\n        \"disclaimer\": \"Standard medical disclaimer\"\n      }\n      \n      IMPORTANT: Include a clear medical disclaimer stating this is not a replacement for professional medical advice or emergency services.\n    `;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0].message.content || '{}';\n    const result = JSON.parse(content);\n    \n    return {\n      situation: result.situation || situation,\n      steps: result.steps || [],\n      warnings: result.warnings || [],\n      disclaimer: result.disclaimer || \"This guidance is not a substitute for professional medical advice, diagnosis, or treatment. In case of emergency, call emergency services immediately.\"\n    };\n  } catch (error) {\n    console.error(\"Error getting first aid guidance:\", error);\n    throw new Error(\"Failed to get first aid guidance. Please try again later.\");\n  }\n}","size_bytes":4807},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { z } from \"zod\";\nimport { \n  insertHealthDataSchema, \n  insertMedicalRecordSchema, \n  insertAppointmentSchema, \n  insertChatMessageSchema,\n  insertMedicationSchema,\n  insertMedicationLogSchema,\n  insertDietDaySchema,\n  insertDietMealSchema,\n  insertDietMealItemSchema,\n  insertHomeVisitRequestSchema,\n  insertEmergencyIncidentSchema,\n  insertAmbulanceBookingSchema,\n  insertHospitalSchema\n} from \"@shared/schema\";\nimport { analyzeSymptoms, getFirstAidGuidance } from \"./openai\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  setupAuth(app);\n\n  // Health Data Routes\n  app.get(\"/api/health-data\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const userData = await storage.getUserHealthData(req.user.id);\n      res.json(userData);\n    } catch (error) {\n      console.error(\"Failed to get health data:\", error);\n      res.status(500).json({ message: \"Failed to get health data\" });\n    }\n  });\n  \n  app.get(\"/api/health-data/latest\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const latestData = await storage.getLatestHealthData(req.user.id);\n      if (!latestData) {\n        return res.status(404).json({ message: \"No health data found\" });\n      }\n      res.json(latestData);\n    } catch (error) {\n      console.error(\"Failed to get latest health data:\", error);\n      res.status(500).json({ message: \"Failed to get latest health data\" });\n    }\n  });\n  \n  app.post(\"/api/health-data\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertHealthDataSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newHealthData = await storage.createHealthData(validatedData);\n      res.status(201).json(newHealthData);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid health data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create health data:\", error);\n      res.status(500).json({ message: \"Failed to create health data\" });\n    }\n  });\n  \n  // Medical Records Routes\n  app.get(\"/api/medical-records\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const records = await storage.getUserMedicalRecords(req.user.id);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Failed to get medical records:\", error);\n      res.status(500).json({ message: \"Failed to get medical records\" });\n    }\n  });\n  \n  app.get(\"/api/medical-records/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const recordId = parseInt(req.params.id);\n      if (isNaN(recordId)) {\n        return res.status(400).json({ message: \"Invalid record ID\" });\n      }\n      \n      const record = await storage.getMedicalRecord(recordId);\n      if (!record) {\n        return res.status(404).json({ message: \"Medical record not found\" });\n      }\n      \n      if (record.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medical record\" });\n      }\n      \n      res.json(record);\n    } catch (error) {\n      console.error(\"Failed to get medical record:\", error);\n      res.status(500).json({ message: \"Failed to get medical record\" });\n    }\n  });\n  \n  app.post(\"/api/medical-records\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertMedicalRecordSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newRecord = await storage.createMedicalRecord(validatedData);\n      res.status(201).json(newRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid medical record data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create medical record:\", error);\n      res.status(500).json({ message: \"Failed to create medical record\" });\n    }\n  });\n  \n  // Doctors Routes\n  app.get(\"/api/doctors\", async (req, res) => {\n    try {\n      const doctors = await storage.getAllDoctors();\n      res.json(doctors);\n    } catch (error) {\n      console.error(\"Failed to get doctors:\", error);\n      res.status(500).json({ message: \"Failed to get doctors\" });\n    }\n  });\n  \n  app.get(\"/api/doctors/:id\", async (req, res) => {\n    try {\n      const doctorId = parseInt(req.params.id);\n      if (isNaN(doctorId)) {\n        return res.status(400).json({ message: \"Invalid doctor ID\" });\n      }\n      \n      const doctor = await storage.getDoctor(doctorId);\n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Failed to get doctor:\", error);\n      res.status(500).json({ message: \"Failed to get doctor\" });\n    }\n  });\n  \n  // Hospitals Routes\n  app.get(\"/api/hospitals\", async (req, res) => {\n    try {\n      const hospitals = await storage.getAllHospitals();\n      res.json(hospitals);\n    } catch (error) {\n      console.error(\"Failed to get hospitals:\", error);\n      res.status(500).json({ message: \"Failed to get hospitals\" });\n    }\n  });\n  \n  app.get(\"/api/hospitals/:id\", async (req, res) => {\n    try {\n      const hospitalId = parseInt(req.params.id);\n      if (isNaN(hospitalId)) {\n        return res.status(400).json({ message: \"Invalid hospital ID\" });\n      }\n      \n      const hospital = await storage.getHospital(hospitalId);\n      if (!hospital) {\n        return res.status(404).json({ message: \"Hospital not found\" });\n      }\n      \n      res.json(hospital);\n    } catch (error) {\n      console.error(\"Failed to get hospital:\", error);\n      res.status(500).json({ message: \"Failed to get hospital\" });\n    }\n  });\n\n  app.post(\"/api/hospitals\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertHospitalSchema.parse(req.body);\n      const newHospital = await storage.createHospital(validatedData);\n      res.status(201).json(newHospital);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid hospital data\", errors: error.errors });\n      }\n      console.error(\"Failed to create hospital:\", error);\n      res.status(500).json({ message: \"Failed to create hospital\" });\n    }\n  });\n\n  app.patch(\"/api/hospitals/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const hospitalId = parseInt(req.params.id);\n      if (isNaN(hospitalId)) {\n        return res.status(400).json({ message: \"Invalid hospital ID\" });\n      }\n      \n      const updatedHospital = await storage.updateHospital(hospitalId, req.body);\n      if (!updatedHospital) {\n        return res.status(404).json({ message: \"Hospital not found\" });\n      }\n      \n      res.json(updatedHospital);\n    } catch (error) {\n      console.error(\"Failed to update hospital:\", error);\n      res.status(500).json({ message: \"Failed to update hospital\" });\n    }\n  });\n\n  app.post(\"/api/hospitals/search\", async (req, res) => {\n    try {\n      const { city, latitude, longitude, maxDistance = 50 } = req.body;\n      \n      // If city is provided, search by city\n      if (city) {\n        const hospitals = await storage.searchHospitalsByCity(city);\n        return res.json({ hospitals });\n      }\n      \n      // If location is provided, search by distance\n      if (latitude !== undefined && longitude !== undefined) {\n        const hospitals = await storage.searchHospitalsByLocation(\n          parseFloat(latitude),\n          parseFloat(longitude),\n          maxDistance\n        );\n        return res.json({ hospitals });\n      }\n      \n      // If neither, return all hospitals\n      const hospitals = await storage.getAllHospitals();\n      res.json({ hospitals });\n    } catch (error) {\n      console.error(\"Failed to search hospitals:\", error);\n      res.status(500).json({ message: \"Failed to search hospitals\" });\n    }\n  });\n\n  app.patch(\"/api/user/location\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const { city, state, latitude, longitude } = req.body;\n      \n      if (!city || !state || !latitude || !longitude) {\n        return res.status(400).json({ message: \"City, state, latitude, and longitude are required\" });\n      }\n      \n      const updatedUser = await storage.updateUserLocation(\n        req.user.id,\n        city,\n        state,\n        latitude,\n        longitude\n      );\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Failed to update user location:\", error);\n      res.status(500).json({ message: \"Failed to update user location\" });\n    }\n  });\n  \n  // Appointments Routes\n  app.get(\"/api/appointments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const appointments = await storage.getUserAppointmentsWithDetails(req.user.id);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Failed to get appointments:\", error);\n      res.status(500).json({ message: \"Failed to get appointments\" });\n    }\n  });\n  \n  app.post(\"/api/appointments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertAppointmentSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newAppointment = await storage.createAppointment(validatedData);\n      res.status(201).json(newAppointment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid appointment data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create appointment:\", error);\n      res.status(500).json({ message: \"Failed to create appointment\" });\n    }\n  });\n  \n  app.patch(\"/api/appointments/:id/status\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const appointmentId = parseInt(req.params.id);\n      if (isNaN(appointmentId)) {\n        return res.status(400).json({ message: \"Invalid appointment ID\" });\n      }\n      \n      const { status } = req.body;\n      if (!status || typeof status !== 'string') {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n      \n      const appointment = await storage.getAppointment(appointmentId);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      if (appointment.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to appointment\" });\n      }\n      \n      const updatedAppointment = await storage.updateAppointmentStatus(appointmentId, status);\n      res.json(updatedAppointment);\n    } catch (error) {\n      console.error(\"Failed to update appointment status:\", error);\n      res.status(500).json({ message: \"Failed to update appointment status\" });\n    }\n  });\n  \n  app.post(\"/api/appointments/:id/cancel\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const appointmentId = parseInt(req.params.id);\n      if (isNaN(appointmentId)) {\n        return res.status(400).json({ message: \"Invalid appointment ID\" });\n      }\n      \n      const success = await storage.cancelAppointment(appointmentId, req.user.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Appointment not found or unauthorized\" });\n      }\n      \n      res.json({ message: \"Appointment cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Failed to cancel appointment:\", error);\n      res.status(500).json({ message: \"Failed to cancel appointment\" });\n    }\n  });\n  \n  app.post(\"/api/appointments/:id/reschedule\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const appointmentId = parseInt(req.params.id);\n      if (isNaN(appointmentId)) {\n        return res.status(400).json({ message: \"Invalid appointment ID\" });\n      }\n      \n      const { date, time } = req.body;\n      if (!date || !time) {\n        return res.status(400).json({ message: \"Date and time are required\" });\n      }\n      \n      const newDate = new Date(date);\n      const updatedAppointment = await storage.rescheduleAppointment(appointmentId, req.user.id, newDate, time);\n      \n      if (!updatedAppointment) {\n        return res.status(404).json({ message: \"Appointment not found or unauthorized\" });\n      }\n      \n      res.json(updatedAppointment);\n    } catch (error) {\n      console.error(\"Failed to reschedule appointment:\", error);\n      res.status(500).json({ message: \"Failed to reschedule appointment\" });\n    }\n  });\n  \n  // Department Routes\n  app.get(\"/api/departments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const departments = await storage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Failed to get departments:\", error);\n      res.status(500).json({ message: \"Failed to get departments\" });\n    }\n  });\n  \n  app.get(\"/api/hospitals/:hospitalId/departments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const hospitalId = parseInt(req.params.hospitalId);\n      if (isNaN(hospitalId)) {\n        return res.status(400).json({ message: \"Invalid hospital ID\" });\n      }\n      \n      const departments = await storage.getDepartmentsByHospital(hospitalId);\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Failed to get departments:\", error);\n      res.status(500).json({ message: \"Failed to get departments\" });\n    }\n  });\n  \n  app.get(\"/api/departments/:departmentId/doctors\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const departmentId = parseInt(req.params.departmentId);\n      if (isNaN(departmentId)) {\n        return res.status(400).json({ message: \"Invalid department ID\" });\n      }\n      \n      const doctors = await storage.getDoctorsByDepartment(departmentId);\n      res.json(doctors);\n    } catch (error) {\n      console.error(\"Failed to get doctors:\", error);\n      res.status(500).json({ message: \"Failed to get doctors\" });\n    }\n  });\n  \n  // Home Visit Request Routes\n  app.post(\"/api/home-visits\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertHomeVisitRequestSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newRequest = await storage.createHomeVisitRequest(validatedData);\n      res.status(201).json(newRequest);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid home visit request data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create home visit request:\", error);\n      res.status(500).json({ message: \"Failed to create home visit request\" });\n    }\n  });\n  \n  app.get(\"/api/home-visits\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const requests = await storage.getUserHomeVisitRequests(req.user.id);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Failed to get home visit requests:\", error);\n      res.status(500).json({ message: \"Failed to get home visit requests\" });\n    }\n  });\n  \n  // Emergency Incident Routes\n  app.post(\"/api/emergency\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertEmergencyIncidentSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const incident = await storage.createEmergencyIncident(validatedData);\n      \n      if (incident.latitude && incident.longitude) {\n        const nearestAmbulance = await storage.getNearestAvailableAmbulance(\n          incident.latitude,\n          incident.longitude\n        );\n        \n        if (nearestAmbulance) {\n          await storage.updateAmbulanceStatus(nearestAmbulance.id, 'dispatched');\n          await storage.updateEmergencyIncidentStatus(\n            incident.id,\n            'dispatched',\n            nearestAmbulance.id\n          );\n          \n          const updatedIncident = await storage.getEmergencyIncident(incident.id);\n          return res.status(201).json({ \n            incident: updatedIncident, \n            ambulance: nearestAmbulance \n          });\n        }\n      }\n      \n      res.status(201).json({ incident, ambulance: null });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid emergency data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create emergency incident:\", error);\n      res.status(500).json({ message: \"Failed to create emergency incident\" });\n    }\n  });\n  \n  app.get(\"/api/emergency\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const incidents = await storage.getUserEmergencyIncidents(req.user.id);\n      res.json(incidents);\n    } catch (error) {\n      console.error(\"Failed to get emergency incidents:\", error);\n      res.status(500).json({ message: \"Failed to get emergency incidents\" });\n    }\n  });\n  \n  app.get(\"/api/emergency/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const incidentId = parseInt(req.params.id);\n      if (isNaN(incidentId)) {\n        return res.status(400).json({ message: \"Invalid incident ID\" });\n      }\n      \n      const incident = await storage.getEmergencyIncident(incidentId);\n      if (!incident) {\n        return res.status(404).json({ message: \"Emergency incident not found\" });\n      }\n      \n      if (incident.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to emergency incident\" });\n      }\n      \n      res.json(incident);\n    } catch (error) {\n      console.error(\"Failed to get emergency incident:\", error);\n      res.status(500).json({ message: \"Failed to get emergency incident\" });\n    }\n  });\n  \n  // Ambulance Routes\n  app.get(\"/api/ambulances/available\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const ambulances = await storage.getAvailableAmbulances();\n      res.json(ambulances);\n    } catch (error) {\n      console.error(\"Failed to get available ambulances:\", error);\n      res.status(500).json({ message: \"Failed to get available ambulances\" });\n    }\n  });\n  \n  app.post(\"/api/ambulances/search\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const { latitude, longitude, mode } = req.body;\n      \n      if (!latitude || !longitude) {\n        return res.status(400).json({ message: \"Latitude and longitude are required\" });\n      }\n      \n      const lat = parseFloat(latitude);\n      const lon = parseFloat(longitude);\n      \n      if (isNaN(lat) || isNaN(lon)) {\n        return res.status(400).json({ message: \"Invalid latitude or longitude\" });\n      }\n      \n      let maxDistance = mode === \"emergency\" ? 25 : 10;\n      \n      const ambulances = await storage.searchAmbulances(lat, lon, maxDistance);\n      \n      if (mode === \"emergency\" && ambulances.length === 0) {\n        return res.json({ fallback: \"call112\", ambulances: [] });\n      }\n      \n      res.json({ ambulances });\n    } catch (error) {\n      console.error(\"Failed to search ambulances:\", error);\n      res.status(500).json({ message: \"Failed to search ambulances\" });\n    }\n  });\n  \n  // Ambulance Booking Routes\n  app.post(\"/api/ambulance-bookings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertAmbulanceBookingSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const booking = await storage.createAmbulanceBooking(validatedData);\n      console.log(`${new Date().toISOString()} [express] Ambulance booking created:`, booking);\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create ambulance booking:\", error);\n      res.status(500).json({ message: \"Failed to create ambulance booking\" });\n    }\n  });\n  \n  app.get(\"/api/ambulance-bookings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const bookings = await storage.getUserAmbulanceBookings(req.user.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Failed to get ambulance bookings:\", error);\n      res.status(500).json({ message: \"Failed to get ambulance bookings\" });\n    }\n  });\n  \n  // Ambulance Driver Routes\n  app.get(\"/api/ambulance/my-ambulance\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const ambulance = await storage.getAmbulanceByUserId(req.user.id);\n      res.json(ambulance || null);\n    } catch (error) {\n      console.error(\"Failed to get ambulance:\", error);\n      res.status(500).json({ message: \"Failed to get ambulance\" });\n    }\n  });\n  \n  app.get(\"/api/ambulance/bookings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const ambulance = await storage.getAmbulanceByUserId(req.user.id);\n      if (!ambulance) {\n        return res.json([]);\n      }\n      \n      const bookings = await storage.getAmbulanceBookingsByAmbulanceId(ambulance.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Failed to get ambulance bookings:\", error);\n      res.status(500).json({ message: \"Failed to get ambulance bookings\" });\n    }\n  });\n  \n  app.patch(\"/api/ambulance/status\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const { status } = req.body;\n      const ambulance = await storage.getAmbulanceByUserId(req.user.id);\n      \n      if (!ambulance) {\n        return res.status(404).json({ message: \"Ambulance not found\" });\n      }\n      \n      const updated = await storage.updateAmbulanceStatus(ambulance.id, status);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Failed to update ambulance status:\", error);\n      res.status(500).json({ message: \"Failed to update ambulance status\" });\n    }\n  });\n  \n  app.patch(\"/api/ambulance/location\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const { latitude, longitude } = req.body;\n      const ambulance = await storage.getAmbulanceByUserId(req.user.id);\n      \n      if (!ambulance) {\n        return res.status(404).json({ message: \"Ambulance not found\" });\n      }\n      \n      const updated = await storage.updateAmbulanceLocation(ambulance.id, latitude, longitude);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Failed to update ambulance location:\", error);\n      res.status(500).json({ message: \"Failed to update ambulance location\" });\n    }\n  });\n  \n  app.patch(\"/api/ambulance/bookings/:id/accept\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const bookingId = parseInt(req.params.id);\n      const updated = await storage.updateAmbulanceBookingStatus(bookingId, \"accepted\");\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Failed to accept booking:\", error);\n      res.status(500).json({ message: \"Failed to accept booking\" });\n    }\n  });\n  \n  app.patch(\"/api/ambulance/bookings/:id/complete\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    if (req.user.role !== \"ambulance\") {\n      return res.status(403).json({ message: \"Access denied. Ambulance drivers only.\" });\n    }\n    \n    try {\n      const bookingId = parseInt(req.params.id);\n      const updated = await storage.updateAmbulanceBookingStatus(bookingId, \"completed\");\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Failed to complete booking:\", error);\n      res.status(500).json({ message: \"Failed to complete booking\" });\n    }\n  });\n  \n  // Symptom Checker Routes\n  app.post(\"/api/symptom-checker\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const { symptoms, age, gender, medicalHistory } = req.body;\n      \n      if (!symptoms || typeof symptoms !== 'string') {\n        return res.status(400).json({ message: \"Symptoms description is required\" });\n      }\n      \n      if (!age || typeof age !== 'number') {\n        return res.status(400).json({ message: \"Age is required and must be a number\" });\n      }\n      \n      if (!gender || typeof gender !== 'string') {\n        return res.status(400).json({ message: \"Gender is required\" });\n      }\n      \n      const result = await analyzeSymptoms(symptoms, age, gender, medicalHistory);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Failed to analyze symptoms:\", error);\n      res.status(500).json({ \n        message: \"Failed to analyze symptoms\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n  \n  app.post(\"/api/first-aid-guidance\", async (req, res) => {\n    try {\n      const { situation } = req.body;\n      \n      if (!situation || typeof situation !== 'string') {\n        return res.status(400).json({ message: \"Situation description is required\" });\n      }\n      \n      const result = await getFirstAidGuidance(situation);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Failed to get first aid guidance:\", error);\n      res.status(500).json({ \n        message: \"Failed to get first aid guidance\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Medications Routes\n  app.get(\"/api/medications\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medications = await storage.getUserMedications(req.user.id);\n      res.json(medications);\n    } catch (error) {\n      console.error(\"Failed to get medications:\", error);\n      res.status(500).json({ message: \"Failed to get medications\" });\n    }\n  });\n  \n  app.get(\"/api/medications/active\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const activeMedications = await storage.getUserActiveMedications(req.user.id);\n      res.json(activeMedications);\n    } catch (error) {\n      console.error(\"Failed to get active medications:\", error);\n      res.status(500).json({ message: \"Failed to get active medications\" });\n    }\n  });\n  \n  app.get(\"/api/medications/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medicationId = parseInt(req.params.id);\n      if (isNaN(medicationId)) {\n        return res.status(400).json({ message: \"Invalid medication ID\" });\n      }\n      \n      const medication = await storage.getMedication(medicationId);\n      if (!medication) {\n        return res.status(404).json({ message: \"Medication not found\" });\n      }\n      \n      if (medication.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medication\" });\n      }\n      \n      res.json(medication);\n    } catch (error) {\n      console.error(\"Failed to get medication:\", error);\n      res.status(500).json({ message: \"Failed to get medication\" });\n    }\n  });\n  \n  app.post(\"/api/medications\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertMedicationSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newMedication = await storage.createMedication(validatedData);\n      res.status(201).json(newMedication);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid medication data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create medication:\", error);\n      res.status(500).json({ message: \"Failed to create medication\" });\n    }\n  });\n  \n  app.patch(\"/api/medications/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medicationId = parseInt(req.params.id);\n      if (isNaN(medicationId)) {\n        return res.status(400).json({ message: \"Invalid medication ID\" });\n      }\n      \n      const medication = await storage.getMedication(medicationId);\n      if (!medication) {\n        return res.status(404).json({ message: \"Medication not found\" });\n      }\n      \n      if (medication.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medication\" });\n      }\n      \n      // Remove id and userId from the update data for security\n      const { id, userId, ...updateData } = req.body;\n      \n      const updatedMedication = await storage.updateMedication(medicationId, updateData);\n      res.json(updatedMedication);\n    } catch (error) {\n      console.error(\"Failed to update medication:\", error);\n      res.status(500).json({ message: \"Failed to update medication\" });\n    }\n  });\n  \n  app.patch(\"/api/medications/:id/toggle\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medicationId = parseInt(req.params.id);\n      if (isNaN(medicationId)) {\n        return res.status(400).json({ message: \"Invalid medication ID\" });\n      }\n      \n      const { active } = req.body;\n      if (typeof active !== 'boolean') {\n        return res.status(400).json({ message: \"Active status must be a boolean\" });\n      }\n      \n      const medication = await storage.getMedication(medicationId);\n      if (!medication) {\n        return res.status(404).json({ message: \"Medication not found\" });\n      }\n      \n      if (medication.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medication\" });\n      }\n      \n      const updatedMedication = await storage.toggleMedicationStatus(medicationId, active);\n      res.json(updatedMedication);\n    } catch (error) {\n      console.error(\"Failed to toggle medication status:\", error);\n      res.status(500).json({ message: \"Failed to toggle medication status\" });\n    }\n  });\n  \n  app.get(\"/api/medications/:id/logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medicationId = parseInt(req.params.id);\n      if (isNaN(medicationId)) {\n        return res.status(400).json({ message: \"Invalid medication ID\" });\n      }\n      \n      const medication = await storage.getMedication(medicationId);\n      if (!medication) {\n        return res.status(404).json({ message: \"Medication not found\" });\n      }\n      \n      if (medication.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medication logs\" });\n      }\n      \n      const logs = await storage.getMedicationLogs(medicationId);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Failed to get medication logs:\", error);\n      res.status(500).json({ message: \"Failed to get medication logs\" });\n    }\n  });\n  \n  app.post(\"/api/medications/:id/logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const medicationId = parseInt(req.params.id);\n      if (isNaN(medicationId)) {\n        return res.status(400).json({ message: \"Invalid medication ID\" });\n      }\n      \n      const medication = await storage.getMedication(medicationId);\n      if (!medication) {\n        return res.status(404).json({ message: \"Medication not found\" });\n      }\n      \n      if (medication.userId !== req.user.id) {\n        return res.status(403).json({ message: \"Unauthorized access to medication\" });\n      }\n      \n      const validatedData = insertMedicationLogSchema.parse({\n        ...req.body,\n        medicationId,\n        userId: req.user.id\n      });\n      \n      const newLog = await storage.createMedicationLog(validatedData);\n      res.status(201).json(newLog);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid medication log data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create medication log:\", error);\n      res.status(500).json({ message: \"Failed to create medication log\" });\n    }\n  });\n\n  // Chat Routes\n  app.get(\"/api/chat/history\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const chatHistory = await storage.getUserChatHistory(req.user.id);\n      res.json(chatHistory);\n    } catch (error) {\n      console.error(\"Failed to get chat history:\", error);\n      res.status(500).json({ message: \"Failed to get chat history\" });\n    }\n  });\n  \n  app.post(\"/api/chat/message\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertChatMessageSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newMessage = await storage.createChatMessage(validatedData);\n      \n      // Use AI for first aid assistant\n      if (validatedData.isUserMessage) {\n        try {\n          // Try to get an AI-powered response for first aid guidance\n          const userMessage = validatedData.message;\n          \n          // Try to use OpenAI for more advanced responses\n          const firstAidGuidance = await getFirstAidGuidance(userMessage);\n          \n          // Create a formatted response from the AI guidance\n          let aiResponse = `${firstAidGuidance.situation}\\n\\n`;\n          \n          if (firstAidGuidance.steps && firstAidGuidance.steps.length > 0) {\n            aiResponse += \"**Steps:**\\n\";\n            firstAidGuidance.steps.forEach((step, index) => {\n              aiResponse += `${index + 1}. ${step}\\n`;\n            });\n            aiResponse += \"\\n\";\n          }\n          \n          if (firstAidGuidance.warnings && firstAidGuidance.warnings.length > 0) {\n            aiResponse += \"**Important Warnings:**\\n\";\n            firstAidGuidance.warnings.forEach((warning) => {\n              aiResponse += `• ${warning}\\n`;\n            });\n            aiResponse += \"\\n\";\n          }\n          \n          aiResponse += `_${firstAidGuidance.disclaimer}_`;\n          \n          const botResponseData = {\n            userId: req.user.id,\n            message: aiResponse,\n            isUserMessage: false\n          };\n          \n          const botResponse = await storage.createChatMessage(botResponseData);\n          res.status(201).json({ userMessage: newMessage, botResponse });\n        } catch (aiError) {\n          // Fallback to the original response simulator if AI fails\n          console.error(\"AI response failed, using fallback:\", aiError);\n          const botResponse = await simulateChatbotResponse(validatedData.message, req.user.id);\n          res.status(201).json({ userMessage: newMessage, botResponse });\n        }\n      } else {\n        res.status(201).json(newMessage);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create chat message:\", error);\n      res.status(500).json({ message: \"Failed to create chat message\" });\n    }\n  });\n\n  // Diet Routes\n  app.get(\"/api/diet/:date\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const date = req.params.date;\n      const dietDay = await storage.getUserDietDay(req.user.id, date);\n      \n      if (!dietDay) {\n        return res.json(null);\n      }\n      \n      const meals = await storage.getDietMeals(dietDay.id);\n      const mealsWithItems = await Promise.all(\n        meals.map(async (meal) => {\n          const items = await storage.getDietMealItems(meal.id);\n          return { ...meal, items };\n        })\n      );\n      \n      res.json({ ...dietDay, meals: mealsWithItems });\n    } catch (error) {\n      console.error(\"Failed to get diet:\", error);\n      res.status(500).json({ message: \"Failed to get diet\" });\n    }\n  });\n  \n  app.post(\"/api/diet\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertDietDaySchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const newDietDay = await storage.createDietDay(validatedData);\n      res.status(201).json(newDietDay);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid diet data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create diet:\", error);\n      res.status(500).json({ message: \"Failed to create diet\" });\n    }\n  });\n  \n  app.put(\"/api/diet/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const dietDayId = parseInt(req.params.id);\n      if (isNaN(dietDayId)) {\n        return res.status(400).json({ message: \"Invalid diet day ID\" });\n      }\n      \n      const updatedDietDay = await storage.updateDietDay(dietDayId, req.body);\n      if (!updatedDietDay) {\n        return res.status(404).json({ message: \"Diet day not found\" });\n      }\n      \n      res.json(updatedDietDay);\n    } catch (error) {\n      console.error(\"Failed to update diet day:\", error);\n      res.status(500).json({ message: \"Failed to update diet day\" });\n    }\n  });\n  \n  app.post(\"/api/diet/meals\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertDietMealSchema.parse(req.body);\n      const newMeal = await storage.createDietMeal(validatedData);\n      res.status(201).json(newMeal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid meal data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create meal:\", error);\n      res.status(500).json({ message: \"Failed to create meal\" });\n    }\n  });\n  \n  app.put(\"/api/diet/meals/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const mealId = parseInt(req.params.id);\n      if (isNaN(mealId)) {\n        return res.status(400).json({ message: \"Invalid meal ID\" });\n      }\n      \n      const updatedMeal = await storage.updateDietMeal(mealId, req.body);\n      if (!updatedMeal) {\n        return res.status(404).json({ message: \"Meal not found\" });\n      }\n      \n      res.json(updatedMeal);\n    } catch (error) {\n      console.error(\"Failed to update meal:\", error);\n      res.status(500).json({ message: \"Failed to update meal\" });\n    }\n  });\n  \n  app.delete(\"/api/diet/meals/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const mealId = parseInt(req.params.id);\n      if (isNaN(mealId)) {\n        return res.status(400).json({ message: \"Invalid meal ID\" });\n      }\n      \n      await storage.deleteDietMeal(mealId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Failed to delete meal:\", error);\n      res.status(500).json({ message: \"Failed to delete meal\" });\n    }\n  });\n  \n  app.post(\"/api/diet/meals/items\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const validatedData = insertDietMealItemSchema.parse(req.body);\n      const newItem = await storage.createDietMealItem(validatedData);\n      res.status(201).json(newItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid meal item data\", errors: error.errors });\n      }\n      \n      console.error(\"Failed to create meal item:\", error);\n      res.status(500).json({ message: \"Failed to create meal item\" });\n    }\n  });\n  \n  app.delete(\"/api/diet/meals/items/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.status(401).json({ message: \"Not authenticated\" });\n    \n    try {\n      const itemId = parseInt(req.params.id);\n      if (isNaN(itemId)) {\n        return res.status(400).json({ message: \"Invalid meal item ID\" });\n      }\n      \n      await storage.deleteDietMealItem(itemId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Failed to delete meal item:\", error);\n      res.status(500).json({ message: \"Failed to delete meal item\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Simple chatbot response simulator\nasync function simulateChatbotResponse(userMessage: string, userId: number): Promise<any> {\n  // Convert message to lowercase for easier matching\n  const message = userMessage.toLowerCase();\n  \n  // Define some basic responses for common first aid queries\n  let response = \"I'm sorry, I don't understand that query. Could you please rephrase it or ask about a specific first aid situation?\";\n  \n  if (message.includes(\"burn\")) {\n    response = \"For a minor burn:\\n1. Cool the burn with cool (not cold) running water for 10-15 minutes\\n2. Remove rings or other tight items\\n3. Apply lotion with aloe vera\\n4. Bandage the burn loosely with a sterile gauze\\n5. Take an over-the-counter pain reliever if needed\\n\\nIf the burn is severe or larger than 3 inches, seek medical attention immediately.\";\n  } else if (message.includes(\"cut\") || message.includes(\"bleeding\")) {\n    response = \"To control bleeding:\\n1. Apply direct pressure with a clean cloth or bandage\\n2. Keep the injured area elevated above the heart if possible\\n3. Clean the wound with soap and water once bleeding slows\\n4. Apply antibiotic ointment and cover with a sterile bandage\\n\\nSeek medical attention if bleeding doesn't stop after 15 minutes of pressure or the wound is deep/large.\";\n  } else if (message.includes(\"cpr\") || message.includes(\"cardiac\")) {\n    response = \"For CPR (adult):\\n1. Call emergency services (911)\\n2. Place the person on their back on a firm surface\\n3. Place your hands, one on top of the other, on the center of the chest\\n4. Push hard and fast, about 100-120 compressions per minute\\n5. Let the chest rise completely between compressions\\n\\nConsider rescue breaths if trained, but compression-only CPR can be effective too.\";\n  } else if (message.includes(\"chok\")) {\n    response = \"For a choking adult:\\n1. Ask 'Are you choking?' If they nod yes and cannot speak, act immediately\\n2. Stand behind the person and wrap your arms around their waist\\n3. Make a fist with one hand and place it slightly above their navel\\n4. Grasp your fist with your other hand and press inward and upward with quick thrusts\\n5. Repeat until the object is expelled\\n\\nIf the person becomes unconscious, begin CPR.\";\n  } else if (message.includes(\"heart attack\") || message.includes(\"chest pain\")) {\n    response = \"Possible heart attack symptoms include chest pain/pressure, pain in arms/back/neck/jaw, shortness of breath, cold sweat, nausea.\\n\\nActions to take:\\n1. Call emergency services (911) immediately\\n2. Have the person sit down and rest\\n3. Loosen tight clothing\\n4. If the person takes heart medication like nitroglycerin, help them take it\\n5. If advised by emergency services and the person is not allergic, they might chew an aspirin\\n\\nIf the person becomes unconscious, begin CPR if trained.\";\n  } else if (message.includes(\"stroke\")) {\n    response = \"Remember the acronym FAST for stroke symptoms:\\nF - Face drooping\\nA - Arm weakness\\nS - Speech difficulty\\nT - Time to call emergency services\\n\\nAlso watch for sudden numbness, confusion, trouble seeing, dizziness, or severe headache.\\n\\nCall 911 immediately if you suspect a stroke. Note the time symptoms started.\";\n  } else if (message.includes(\"hello\") || message.includes(\"hi\") || message.includes(\"hey\")) {\n    response = \"Hello! I'm your virtual first aid assistant. How can I help you today?\";\n  } else if (message.includes(\"thank\")) {\n    response = \"You're welcome! If you have any other first aid questions, feel free to ask.\";\n  }\n  \n  // Create and store the chatbot response\n  const botResponseData = {\n    userId: userId,\n    message: response,\n    isUserMessage: false\n  };\n  \n  return storage.createChatMessage(botResponseData);\n}\n","size_bytes":47788},"server/storage.ts":{"content":"import { \n  users, doctors, hospitals, healthData, medicalRecords, appointments, chatMessages,\n  medications, medicationLogs, dietDays, dietMeals, dietMealItems,\n  departments, doctorAvailability, doctorLeaves, homeVisitRequests, emergencyIncidents, ambulances, ambulanceBookings,\n  type User, type InsertUser, type HealthData, type MedicalRecord, \n  type Appointment, type ChatMessage, type Doctor, type Hospital, \n  type Medication, type MedicationLog, type DietDay, type DietMeal, type DietMealItem,\n  type Department, type DoctorAvailability, type DoctorLeave, type HomeVisitRequest,\n  type EmergencyIncident, type Ambulance, type AmbulanceBooking,\n  type InsertHealthData, type InsertMedicalRecord, type InsertAppointment, \n  type InsertChatMessage, type InsertMedication, type InsertMedicationLog,\n  type InsertDietDay, type InsertDietMeal, type InsertDietMealItem,\n  type InsertHomeVisitRequest, type InsertEmergencyIncident, type InsertAmbulanceBooking\n} from \"@shared/schema\";\nimport session from \"express-session\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport connectPg from \"connect-pg-simple\";\nimport pg from \"pg\";\n\nconst { Pool } = pg;\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Health Data\n  getUserHealthData(userId: number): Promise<HealthData[]>;\n  createHealthData(data: InsertHealthData): Promise<HealthData>;\n  getLatestHealthData(userId: number): Promise<HealthData | undefined>;\n  \n  // Medical Records\n  getUserMedicalRecords(userId: number): Promise<MedicalRecord[]>;\n  createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord>;\n  getMedicalRecord(id: number): Promise<MedicalRecord | undefined>;\n  \n  // Doctors\n  getAllDoctors(): Promise<Doctor[]>;\n  getDoctor(id: number): Promise<Doctor | undefined>;\n  \n  // Hospitals\n  getAllHospitals(): Promise<Hospital[]>;\n  getHospital(id: number): Promise<Hospital | undefined>;\n  createHospital(hospital: InsertHospital): Promise<Hospital>;\n  updateHospital(id: number, hospital: Partial<InsertHospital>): Promise<Hospital | undefined>;\n  searchHospitalsByCity(city: string): Promise<Hospital[]>;\n  searchHospitalsByLocation(latitude: number, longitude: number, maxDistance: number): Promise<any[]>;\n  updateUserLocation(userId: number, city: string, state: string, latitude: string, longitude: string): Promise<User | undefined>;\n  \n  // Appointments\n  getUserAppointments(userId: number): Promise<Appointment[]>;\n  getUserAppointmentsWithDetails(userId: number): Promise<any[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  getAppointment(id: number): Promise<Appointment | undefined>;\n  updateAppointmentStatus(id: number, status: string): Promise<Appointment | undefined>;\n  cancelAppointment(id: number, userId: number): Promise<boolean>;\n  rescheduleAppointment(id: number, userId: number, newDate: Date, newTime: string): Promise<Appointment | undefined>;\n  \n  // Departments\n  getAllDepartments(): Promise<Department[]>;\n  getDepartmentsByHospital(hospitalId: number): Promise<Department[]>;\n  getDoctorsByDepartment(departmentId: number): Promise<Doctor[]>;\n  \n  // Doctor Availability & Leaves\n  getDoctorAvailability(doctorId: number): Promise<DoctorAvailability[]>;\n  getDoctorLeaves(doctorId: number): Promise<DoctorLeave[]>;\n  isDoctorAvailable(doctorId: number, date: Date): Promise<boolean>;\n  \n  // Home Visit Requests\n  createHomeVisitRequest(request: InsertHomeVisitRequest): Promise<HomeVisitRequest>;\n  getUserHomeVisitRequests(userId: number): Promise<HomeVisitRequest[]>;\n  updateHomeVisitRequestStatus(id: number, status: string, assignedHospitalId?: number, assignedDoctorId?: number): Promise<HomeVisitRequest | undefined>;\n  \n  // Emergency Incidents\n  createEmergencyIncident(incident: InsertEmergencyIncident): Promise<EmergencyIncident>;\n  getEmergencyIncident(id: number): Promise<EmergencyIncident | undefined>;\n  updateEmergencyIncidentStatus(id: number, status: string, ambulanceId?: number, hospitalId?: number): Promise<EmergencyIncident | undefined>;\n  getUserEmergencyIncidents(userId: number): Promise<EmergencyIncident[]>;\n  \n  // Ambulances\n  getAvailableAmbulances(): Promise<Ambulance[]>;\n  getNearestAvailableAmbulance(latitude: string, longitude: string): Promise<Ambulance | undefined>;\n  updateAmbulanceStatus(id: number, status: string, latitude?: string, longitude?: string): Promise<Ambulance | undefined>;\n  searchAmbulances(latitude: number, longitude: number, maxDistance: number): Promise<any[]>;\n  \n  // Ambulance Bookings\n  createAmbulanceBooking(booking: InsertAmbulanceBooking): Promise<AmbulanceBooking>;\n  getUserAmbulanceBookings(userId: number): Promise<AmbulanceBooking[]>;\n  updateAmbulanceBookingStatus(id: number, status: string): Promise<AmbulanceBooking | undefined>;\n  \n  // Ambulance Driver Operations\n  getAmbulanceByUserId(userId: number): Promise<Ambulance | undefined>;\n  getAmbulanceBookingsByAmbulanceId(ambulanceId: number): Promise<AmbulanceBooking[]>;\n  updateAmbulanceLocation(id: number, latitude: string, longitude: string): Promise<Ambulance | undefined>;\n  \n  // Chat\n  getUserChatHistory(userId: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // Medications\n  getUserMedications(userId: number): Promise<Medication[]>;\n  getUserActiveMedications(userId: number): Promise<Medication[]>;\n  getMedication(id: number): Promise<Medication | undefined>;\n  createMedication(medication: InsertMedication): Promise<Medication>;\n  updateMedication(id: number, medication: Partial<InsertMedication>): Promise<Medication | undefined>;\n  toggleMedicationStatus(id: number, active: boolean): Promise<Medication | undefined>;\n  getMedicationLogs(medicationId: number): Promise<MedicationLog[]>;\n  createMedicationLog(log: InsertMedicationLog): Promise<MedicationLog>;\n  \n  // Diet\n  getUserDietDay(userId: number, date: string): Promise<DietDay | undefined>;\n  createDietDay(dietDay: InsertDietDay): Promise<DietDay>;\n  updateDietDay(id: number, dietDay: Partial<InsertDietDay>): Promise<DietDay | undefined>;\n  getDietMeals(dietDayId: number): Promise<DietMeal[]>;\n  createDietMeal(meal: InsertDietMeal): Promise<DietMeal>;\n  updateDietMeal(id: number, meal: Partial<InsertDietMeal>): Promise<DietMeal | undefined>;\n  deleteDietMeal(id: number): Promise<void>;\n  getDietMealItems(mealId: number): Promise<DietMealItem[]>;\n  createDietMealItem(item: InsertDietMealItem): Promise<DietMealItem>;\n  deleteDietMealItem(id: number): Promise<void>;\n  \n  sessionStore: any; // Using any for session store type\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any; // Using any for SessionStore to avoid type issues\n  \n  constructor() {\n    // Create a new connection pool for the session store\n    const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      tableName: 'session',\n      createTableIfMissing: true\n    });\n    \n    // Seed initial data\n    this.seedInitialData();\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n  \n  async getUserHealthData(userId: number): Promise<HealthData[]> {\n    return await db.select().from(healthData).where(eq(healthData.userId, userId));\n  }\n  \n  async createHealthData(data: InsertHealthData): Promise<HealthData> {\n    const [newHealthData] = await db.insert(healthData).values(data).returning();\n    return newHealthData;\n  }\n  \n  async getLatestHealthData(userId: number): Promise<HealthData | undefined> {\n    const [latestData] = await db\n      .select()\n      .from(healthData)\n      .where(eq(healthData.userId, userId))\n      .orderBy(desc(healthData.recordedAt))\n      .limit(1);\n      \n    return latestData;\n  }\n  \n  async getUserMedicalRecords(userId: number): Promise<MedicalRecord[]> {\n    return await db.select().from(medicalRecords).where(eq(medicalRecords.userId, userId));\n  }\n  \n  async createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord> {\n    const [newRecord] = await db.insert(medicalRecords).values(record).returning();\n    return newRecord;\n  }\n  \n  async getMedicalRecord(id: number): Promise<MedicalRecord | undefined> {\n    const [record] = await db.select().from(medicalRecords).where(eq(medicalRecords.id, id));\n    return record;\n  }\n  \n  async getAllDoctors(): Promise<Doctor[]> {\n    return await db.select().from(doctors);\n  }\n  \n  async getDoctor(id: number): Promise<Doctor | undefined> {\n    const [doctor] = await db.select().from(doctors).where(eq(doctors.id, id));\n    return doctor;\n  }\n  \n  async getAllHospitals(): Promise<Hospital[]> {\n    return await db.select().from(hospitals);\n  }\n  \n  async getHospital(id: number): Promise<Hospital | undefined> {\n    const [hospital] = await db.select().from(hospitals).where(eq(hospitals.id, id));\n    return hospital;\n  }\n\n  async createHospital(hospital: InsertHospital): Promise<Hospital> {\n    const [newHospital] = await db.insert(hospitals).values(hospital).returning();\n    return newHospital;\n  }\n\n  async updateHospital(id: number, hospital: Partial<InsertHospital>): Promise<Hospital | undefined> {\n    const [updatedHospital] = await db\n      .update(hospitals)\n      .set(hospital)\n      .where(eq(hospitals.id, id))\n      .returning();\n    return updatedHospital;\n  }\n\n  async searchHospitalsByCity(city: string): Promise<Hospital[]> {\n    return await db.select().from(hospitals).where(eq(hospitals.city, city));\n  }\n\n  async searchHospitalsByLocation(latitude: number, longitude: number, maxDistance: number): Promise<any[]> {\n    // Import sql from drizzle-orm at the top if not already imported\n    const { calculateDistance } = await import('./utils/distance.js');\n    \n    const allHospitals = await db.select().from(hospitals);\n    \n    const hospitalsWithDistance = allHospitals\n      .filter(hospital => hospital.latitude && hospital.longitude)\n      .map(hospital => {\n        const distance = calculateDistance(\n          latitude,\n          longitude,\n          parseFloat(hospital.latitude!),\n          parseFloat(hospital.longitude!)\n        );\n        return { ...hospital, distance };\n      })\n      .filter(hospital => hospital.distance <= maxDistance)\n      .sort((a, b) => a.distance - b.distance);\n    \n    return hospitalsWithDistance;\n  }\n\n  async updateUserLocation(userId: number, city: string, state: string, latitude: string, longitude: string): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ city, state, latitude, longitude })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser;\n  }\n  \n  async getUserAppointments(userId: number): Promise<Appointment[]> {\n    return await db.select().from(appointments).where(eq(appointments.userId, userId));\n  }\n  \n  async getUserAppointmentsWithDetails(userId: number): Promise<any[]> {\n    const userAppointments = await db\n      .select({\n        id: appointments.id,\n        userId: appointments.userId,\n        doctorId: appointments.doctorId,\n        hospitalId: appointments.hospitalId,\n        date: appointments.date,\n        time: appointments.time,\n        isVirtual: appointments.isVirtual,\n        status: appointments.status,\n        notes: appointments.notes,\n        doctorName: doctors.name,\n        doctorSpecialty: doctors.specialty,\n        doctorPhoneNumber: doctors.phoneNumber,\n        doctorEmail: doctors.email,\n        doctorProfileImage: doctors.profileImage,\n        hospitalName: hospitals.name,\n        hospitalAddress: hospitals.address,\n        hospitalPhoneNumber: hospitals.phoneNumber,\n      })\n      .from(appointments)\n      .leftJoin(doctors, eq(appointments.doctorId, doctors.id))\n      .leftJoin(hospitals, eq(appointments.hospitalId, hospitals.id))\n      .where(eq(appointments.userId, userId))\n      .orderBy(desc(appointments.date));\n      \n    return userAppointments;\n  }\n  \n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const [newAppointment] = await db.insert(appointments).values(appointment).returning();\n    return newAppointment;\n  }\n  \n  async getAppointment(id: number): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment;\n  }\n  \n  async updateAppointmentStatus(id: number, status: string): Promise<Appointment | undefined> {\n    const [updatedAppointment] = await db\n      .update(appointments)\n      .set({ status })\n      .where(eq(appointments.id, id))\n      .returning();\n      \n    return updatedAppointment;\n  }\n  \n  async getUserChatHistory(userId: number): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages).where(eq(chatMessages.userId, userId));\n  }\n  \n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n  \n  // Medication management\n  async getUserMedications(userId: number): Promise<Medication[]> {\n    return await db.select().from(medications).where(eq(medications.userId, userId));\n  }\n  \n  async getUserActiveMedications(userId: number): Promise<Medication[]> {\n    return await db\n      .select()\n      .from(medications)\n      .where(and(\n        eq(medications.userId, userId),\n        eq(medications.active, true)\n      ));\n  }\n  \n  async getMedication(id: number): Promise<Medication | undefined> {\n    const [medication] = await db.select().from(medications).where(eq(medications.id, id));\n    return medication;\n  }\n  \n  async createMedication(medication: InsertMedication): Promise<Medication> {\n    const [newMedication] = await db.insert(medications).values(medication).returning();\n    return newMedication;\n  }\n  \n  async updateMedication(id: number, medication: Partial<InsertMedication>): Promise<Medication | undefined> {\n    const [updatedMedication] = await db\n      .update(medications)\n      .set(medication)\n      .where(eq(medications.id, id))\n      .returning();\n      \n    return updatedMedication;\n  }\n  \n  async toggleMedicationStatus(id: number, active: boolean): Promise<Medication | undefined> {\n    const [updatedMedication] = await db\n      .update(medications)\n      .set({ active })\n      .where(eq(medications.id, id))\n      .returning();\n      \n    return updatedMedication;\n  }\n  \n  async getMedicationLogs(medicationId: number): Promise<MedicationLog[]> {\n    return await db\n      .select()\n      .from(medicationLogs)\n      .where(eq(medicationLogs.medicationId, medicationId))\n      .orderBy(desc(medicationLogs.takenAt));\n  }\n  \n  async createMedicationLog(log: InsertMedicationLog): Promise<MedicationLog> {\n    const [newLog] = await db.insert(medicationLogs).values(log).returning();\n    return newLog;\n  }\n  \n  async getUserDietDay(userId: number, date: string): Promise<DietDay | undefined> {\n    const [dietDay] = await db\n      .select()\n      .from(dietDays)\n      .where(and(\n        eq(dietDays.userId, userId),\n        eq(dietDays.date, date)\n      ));\n    return dietDay;\n  }\n  \n  async createDietDay(dietDay: InsertDietDay): Promise<DietDay> {\n    const [newDietDay] = await db.insert(dietDays).values(dietDay).returning();\n    return newDietDay;\n  }\n  \n  async updateDietDay(id: number, dietDay: Partial<InsertDietDay>): Promise<DietDay | undefined> {\n    const [updatedDietDay] = await db\n      .update(dietDays)\n      .set(dietDay)\n      .where(eq(dietDays.id, id))\n      .returning();\n    return updatedDietDay;\n  }\n  \n  async getDietMeals(dietDayId: number): Promise<DietMeal[]> {\n    return await db\n      .select()\n      .from(dietMeals)\n      .where(eq(dietMeals.dietDayId, dietDayId));\n  }\n  \n  async createDietMeal(meal: InsertDietMeal): Promise<DietMeal> {\n    const [newMeal] = await db.insert(dietMeals).values(meal).returning();\n    return newMeal;\n  }\n  \n  async updateDietMeal(id: number, meal: Partial<InsertDietMeal>): Promise<DietMeal | undefined> {\n    const [updatedMeal] = await db\n      .update(dietMeals)\n      .set(meal)\n      .where(eq(dietMeals.id, id))\n      .returning();\n    return updatedMeal;\n  }\n  \n  async deleteDietMeal(id: number): Promise<void> {\n    await db.delete(dietMeals).where(eq(dietMeals.id, id));\n  }\n  \n  async getDietMealItems(mealId: number): Promise<DietMealItem[]> {\n    return await db\n      .select()\n      .from(dietMealItems)\n      .where(eq(dietMealItems.dietMealId, mealId));\n  }\n  \n  async createDietMealItem(item: InsertDietMealItem): Promise<DietMealItem> {\n    const [newItem] = await db.insert(dietMealItems).values(item).returning();\n    return newItem;\n  }\n  \n  async deleteDietMealItem(id: number): Promise<void> {\n    await db.delete(dietMealItems).where(eq(dietMealItems.id, id));\n  }\n  \n  // Appointment management\n  async cancelAppointment(id: number, userId: number): Promise<boolean> {\n    const result = await db\n      .update(appointments)\n      .set({ status: 'cancelled', updatedAt: new Date() })\n      .where(and(eq(appointments.id, id), eq(appointments.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n  \n  async rescheduleAppointment(id: number, userId: number, newDate: Date, newTime: string): Promise<Appointment | undefined> {\n    const [updatedAppointment] = await db\n      .update(appointments)\n      .set({ date: newDate, time: newTime, updatedAt: new Date() })\n      .where(and(eq(appointments.id, id), eq(appointments.userId, userId)))\n      .returning();\n    return updatedAppointment;\n  }\n  \n  // Departments\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n  \n  async getDepartmentsByHospital(hospitalId: number): Promise<Department[]> {\n    return await db.select().from(departments).where(eq(departments.hospitalId, hospitalId));\n  }\n  \n  async getDoctorsByDepartment(departmentId: number): Promise<Doctor[]> {\n    return await db.select().from(doctors).where(eq(doctors.specialty, departmentId.toString()));\n  }\n  \n  // Doctor Availability & Leaves\n  async getDoctorAvailability(doctorId: number): Promise<DoctorAvailability[]> {\n    return await db.select().from(doctorAvailability).where(eq(doctorAvailability.doctorId, doctorId));\n  }\n  \n  async getDoctorLeaves(doctorId: number): Promise<DoctorLeave[]> {\n    return await db.select().from(doctorLeaves).where(eq(doctorLeaves.doctorId, doctorId));\n  }\n  \n  async isDoctorAvailable(doctorId: number, date: Date): Promise<boolean> {\n    const leaves = await db\n      .select()\n      .from(doctorLeaves)\n      .where(and(\n        eq(doctorLeaves.doctorId, doctorId),\n        eq(doctorLeaves.startDate, date)\n      ));\n    return leaves.length === 0;\n  }\n  \n  // Home Visit Requests\n  async createHomeVisitRequest(request: InsertHomeVisitRequest): Promise<HomeVisitRequest> {\n    const [newRequest] = await db.insert(homeVisitRequests).values(request).returning();\n    return newRequest;\n  }\n  \n  async getUserHomeVisitRequests(userId: number): Promise<HomeVisitRequest[]> {\n    return await db.select().from(homeVisitRequests).where(eq(homeVisitRequests.userId, userId));\n  }\n  \n  async updateHomeVisitRequestStatus(\n    id: number, \n    status: string, \n    assignedHospitalId?: number, \n    assignedDoctorId?: number\n  ): Promise<HomeVisitRequest | undefined> {\n    const updateData: any = { status };\n    if (assignedHospitalId) updateData.assignedHospitalId = assignedHospitalId;\n    if (assignedDoctorId) updateData.assignedDoctorId = assignedDoctorId;\n    \n    const [updated] = await db\n      .update(homeVisitRequests)\n      .set(updateData)\n      .where(eq(homeVisitRequests.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Emergency Incidents\n  async createEmergencyIncident(incident: InsertEmergencyIncident): Promise<EmergencyIncident> {\n    const [newIncident] = await db.insert(emergencyIncidents).values(incident).returning();\n    return newIncident;\n  }\n  \n  async getEmergencyIncident(id: number): Promise<EmergencyIncident | undefined> {\n    const [incident] = await db.select().from(emergencyIncidents).where(eq(emergencyIncidents.id, id));\n    return incident;\n  }\n  \n  async updateEmergencyIncidentStatus(\n    id: number, \n    status: string, \n    ambulanceId?: number, \n    hospitalId?: number\n  ): Promise<EmergencyIncident | undefined> {\n    const updateData: any = { status };\n    if (ambulanceId !== undefined) updateData.assignedAmbulanceId = ambulanceId;\n    if (hospitalId !== undefined) updateData.assignedHospitalId = hospitalId;\n    if (status === 'dispatched') updateData.dispatchedAt = new Date();\n    if (status === 'arrived') updateData.arrivedAt = new Date();\n    if (status === 'completed') updateData.completedAt = new Date();\n    \n    const [updated] = await db\n      .update(emergencyIncidents)\n      .set(updateData)\n      .where(eq(emergencyIncidents.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async getUserEmergencyIncidents(userId: number): Promise<EmergencyIncident[]> {\n    return await db.select().from(emergencyIncidents).where(eq(emergencyIncidents.userId, userId)).orderBy(desc(emergencyIncidents.createdAt));\n  }\n  \n  // Ambulances\n  async getAvailableAmbulances(): Promise<Ambulance[]> {\n    return await db.select().from(ambulances).where(eq(ambulances.status, 'available'));\n  }\n  \n  async getNearestAvailableAmbulance(latitude: string, longitude: string): Promise<Ambulance | undefined> {\n    const availableAmbulances = await this.getAvailableAmbulances();\n    if (availableAmbulances.length === 0) return undefined;\n    \n    const userLat = parseFloat(latitude);\n    const userLon = parseFloat(longitude);\n    \n    let nearestAmbulance = availableAmbulances[0];\n    let minDistance = Infinity;\n    \n    for (const ambulance of availableAmbulances) {\n      if (ambulance.currentLatitude && ambulance.currentLongitude) {\n        const ambLat = parseFloat(ambulance.currentLatitude);\n        const ambLon = parseFloat(ambulance.currentLongitude);\n        const distance = Math.sqrt(\n          Math.pow(userLat - ambLat, 2) + Math.pow(userLon - ambLon, 2)\n        );\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestAmbulance = ambulance;\n        }\n      }\n    }\n    \n    return nearestAmbulance;\n  }\n  \n  async updateAmbulanceStatus(\n    id: number, \n    status: string, \n    latitude?: string, \n    longitude?: string\n  ): Promise<Ambulance | undefined> {\n    const updateData: any = { status };\n    if (latitude) updateData.currentLatitude = latitude;\n    if (longitude) updateData.currentLongitude = longitude;\n    \n    const [updated] = await db\n      .update(ambulances)\n      .set(updateData)\n      .where(eq(ambulances.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async createAmbulanceBooking(booking: InsertAmbulanceBooking): Promise<AmbulanceBooking> {\n    const [newBooking] = await db.insert(ambulanceBookings).values(booking).returning();\n    return newBooking;\n  }\n  \n  async getUserAmbulanceBookings(userId: number): Promise<AmbulanceBooking[]> {\n    return await db.select().from(ambulanceBookings).where(eq(ambulanceBookings.userId, userId)).orderBy(desc(ambulanceBookings.createdAt));\n  }\n  \n  async updateAmbulanceBookingStatus(id: number, status: string): Promise<AmbulanceBooking | undefined> {\n    const [updated] = await db\n      .update(ambulanceBookings)\n      .set({ status })\n      .where(eq(ambulanceBookings.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async getAmbulanceByUserId(userId: number): Promise<Ambulance | undefined> {\n    const [ambulance] = await db.select().from(ambulances).where(eq(ambulances.userId, userId));\n    return ambulance;\n  }\n  \n  async getAmbulanceBookingsByAmbulanceId(ambulanceId: number): Promise<AmbulanceBooking[]> {\n    return await db.select().from(ambulanceBookings)\n      .where(eq(ambulanceBookings.ambulanceId, ambulanceId))\n      .orderBy(desc(ambulanceBookings.createdAt));\n  }\n  \n  async updateAmbulanceLocation(id: number, latitude: string, longitude: string): Promise<Ambulance | undefined> {\n    const [updated] = await db\n      .update(ambulances)\n      .set({ currentLatitude: latitude, currentLongitude: longitude })\n      .where(eq(ambulances.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async searchAmbulances(latitude: number, longitude: number, maxDistance: number): Promise<any[]> {\n    const { calculateDistance } = await import(\"./utils/distance\");\n    \n    const availableAmbulances = await db\n      .select({\n        id: ambulances.id,\n        vehicleNumber: ambulances.vehicleNumber,\n        status: ambulances.status,\n        currentLatitude: ambulances.currentLatitude,\n        currentLongitude: ambulances.currentLongitude,\n        userId: ambulances.userId,\n        driverName: users.fullName,\n        driverPhone: users.phoneNumber,\n      })\n      .from(ambulances)\n      .leftJoin(users, eq(ambulances.userId, users.id))\n      .where(eq(ambulances.status, 'available'));\n    \n    const ambulancesWithDistance = availableAmbulances\n      .filter(amb => amb.currentLatitude && amb.currentLongitude)\n      .map(amb => {\n        const distance = calculateDistance(\n          latitude,\n          longitude,\n          parseFloat(amb.currentLatitude!),\n          parseFloat(amb.currentLongitude!)\n        );\n        return {\n          ...amb,\n          distance,\n        };\n      })\n      .filter(amb => amb.distance <= maxDistance)\n      .sort((a, b) => a.distance - b.distance);\n    \n    return ambulancesWithDistance;\n  }\n  \n  private async seedInitialData() {\n    try {\n      // Check if admin user exists, if not create it\n      const adminExists = await this.getUserByUsername(\"admin\");\n      if (!adminExists) {\n        console.log(\"Admin user not found. Creating admin user...\");\n        \n        // Import the hash function from auth.ts to hash the password\n        const { hashPassword } = await import(\"./auth\"); \n        \n        // Create the admin user with a properly hashed password\n        await this.createUser({\n          username: \"admin\",\n          password: await hashPassword(\"admin\"),\n          email: \"admin@careguardian.com\",\n          fullName: \"Admin User\",\n          phoneNumber: \"123-456-7890\",\n          role: \"user\"\n        });\n        \n        console.log(\"Admin user created successfully.\");\n      }\n      \n      // Seed departments if none exist\n      const existingDepartments = await this.getAllDepartments();\n      if (existingDepartments.length === 0) {\n        console.log(\"Seeding departments...\");\n        const departmentData = [\n          { hospitalId: 1, name: \"Cardiology\", description: \"Heart and cardiovascular care\" },\n          { hospitalId: 1, name: \"Neurology\", description: \"Brain and nervous system care\" },\n          { hospitalId: 1, name: \"Orthopedics\", description: \"Bone and joint care\" },\n          { hospitalId: 1, name: \"Pediatrics\", description: \"Children's healthcare\" },\n          { hospitalId: 1, name: \"General Medicine\", description: \"General health and wellness\" }\n        ];\n        \n        for (const dept of departmentData) {\n          await db.insert(departments).values(dept);\n        }\n        console.log(\"Departments seeded successfully.\");\n      }\n      \n    } catch (error) {\n      console.error(\"Error seeding initial data:\", error);\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28235},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phoneNumber: text(\"phone_number\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  gender: text(\"gender\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  profileImage: text(\"profile_image\"),\n  role: text(\"role\").notNull().default(\"user\"), // user, hospital, ambulance\n});\n\nexport const healthData = pgTable(\"health_data\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  heartRate: integer(\"heart_rate\"),\n  bloodPressureSystolic: integer(\"blood_pressure_systolic\"),\n  bloodPressureDiastolic: integer(\"blood_pressure_diastolic\"),\n  bloodGlucose: integer(\"blood_glucose\"),\n  temperature: integer(\"temperature\"),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n});\n\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  fileUrl: text(\"file_url\"),\n  doctorName: text(\"doctor_name\"),\n  hospital: text(\"hospital\"),\n  date: timestamp(\"date\").notNull(),\n});\n\nexport const doctors = pgTable(\"doctors\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  specialty: text(\"specialty\").notNull(),\n  hospital: text(\"hospital\"),\n  phoneNumber: text(\"phone_number\"),\n  email: text(\"email\"),\n  profileImage: text(\"profile_image\"),\n  availableDays: text(\"available_days\").array(),\n  rating: integer(\"rating\"),\n});\n\nexport const hospitals = pgTable(\"hospitals\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  phoneNumber: text(\"phone_number\").notNull(),\n  email: text(\"email\"),\n  logo: text(\"logo\"),\n  rating: integer(\"rating\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  departments: text(\"departments\").array(),\n  services: text(\"services\").array(),\n  emergencyServices: boolean(\"emergency_services\").default(true),\n  established: text(\"established\"),\n  beds: integer(\"beds\"),\n  website: text(\"website\"),\n});\n\nexport const departments = pgTable(\"departments\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  hospitalId: integer(\"hospital_id\").references(() => hospitals.id),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  doctorId: integer(\"doctor_id\").references(() => doctors.id),\n  hospitalId: integer(\"hospital_id\").references(() => hospitals.id),\n  departmentId: integer(\"department_id\").references(() => departments.id),\n  date: timestamp(\"date\").notNull(),\n  time: text(\"time\").notNull(),\n  isVirtual: boolean(\"is_virtual\").default(false),\n  status: text(\"status\").default(\"scheduled\"),\n  notes: text(\"notes\"),\n  requestType: text(\"request_type\").default(\"direct\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const doctorAvailability = pgTable(\"doctor_availability\", {\n  id: serial(\"id\").primaryKey(),\n  doctorId: integer(\"doctor_id\").notNull().references(() => doctors.id),\n  dayOfWeek: integer(\"day_of_week\").notNull(),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  isAvailable: boolean(\"is_available\").default(true),\n});\n\nexport const doctorLeaves = pgTable(\"doctor_leaves\", {\n  id: serial(\"id\").primaryKey(),\n  doctorId: integer(\"doctor_id\").notNull().references(() => doctors.id),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n});\n\nexport const homeVisitRequests = pgTable(\"home_visit_requests\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  address: text(\"address\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  symptoms: text(\"symptoms\"),\n  preferredDate: timestamp(\"preferred_date\"),\n  preferredTimeSlot: text(\"preferred_time_slot\"),\n  assignedHospitalId: integer(\"assigned_hospital_id\").references(() => hospitals.id),\n  assignedDoctorId: integer(\"assigned_doctor_id\").references(() => doctors.id),\n  status: text(\"status\").default(\"pending\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const emergencyIncidents = pgTable(\"emergency_incidents\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  latitude: text(\"latitude\").notNull(),\n  longitude: text(\"longitude\").notNull(),\n  address: text(\"address\"),\n  emergencyType: text(\"emergency_type\"),\n  description: text(\"description\"),\n  assignedAmbulanceId: integer(\"assigned_ambulance_id\"),\n  assignedHospitalId: integer(\"assigned_hospital_id\").references(() => hospitals.id),\n  status: text(\"status\").default(\"pending\"),\n  dispatchedAt: timestamp(\"dispatched_at\"),\n  arrivedAt: timestamp(\"arrived_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const ambulances = pgTable(\"ambulances\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  vehicleNumber: text(\"vehicle_number\").notNull(),\n  hospitalId: integer(\"hospital_id\").references(() => hospitals.id),\n  currentLatitude: text(\"current_latitude\"),\n  currentLongitude: text(\"current_longitude\"),\n  status: text(\"status\").default(\"available\"),\n  driverName: text(\"driver_name\"),\n  driverPhone: text(\"driver_phone\"),\n});\n\nexport const ambulanceBookings = pgTable(\"ambulance_bookings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  ambulanceId: integer(\"ambulance_id\").notNull().references(() => ambulances.id),\n  pickupAddress: text(\"pickup_address\").notNull(),\n  pickupLatitude: text(\"pickup_latitude\"),\n  pickupLongitude: text(\"pickup_longitude\"),\n  dropoffAddress: text(\"dropoff_address\"),\n  patientName: text(\"patient_name\").notNull(),\n  patientPhone: text(\"patient_phone\").notNull(),\n  medicalCondition: text(\"medical_condition\"),\n  status: text(\"status\").default(\"pending\"),\n  scheduledTime: timestamp(\"scheduled_time\"),\n  dispatchedAt: timestamp(\"dispatched_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  message: text(\"message\").notNull(),\n  isUserMessage: boolean(\"is_user_message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Schema for user insertion\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  fullName: true,\n  email: true,\n  phoneNumber: true,\n  role: true\n}).extend({\n  role: z.enum([\"user\", \"hospital\", \"ambulance\"]).default(\"user\")\n});\n\n// Schema for health data insertion\nexport const insertHealthDataSchema = createInsertSchema(healthData).omit({\n  id: true,\n  recordedAt: true\n});\n\n// Schema for medical record insertion\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({\n  id: true\n});\n\n// Schema for appointment insertion\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true\n}).extend({\n  date: z.union([z.string(), z.date()]).transform((val) => {\n    if (typeof val === 'string') {\n      return new Date(val);\n    }\n    return val;\n  })\n});\n\n// Schema for chat message insertion\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true\n});\n\n// Types for the schemas\nexport const medications = pgTable(\"medications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  dosage: text(\"dosage\").notNull(),\n  frequency: text(\"frequency\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  instructions: text(\"instructions\"),\n  timeOfDay: text(\"time_of_day\").notNull(), // Morning, Afternoon, Evening, Night, or specific times\n  withFood: boolean(\"with_food\").default(false),\n  active: boolean(\"active\").default(true),\n  refillDate: timestamp(\"refill_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const medicationLogs = pgTable(\"medication_logs\", {\n  id: serial(\"id\").primaryKey(),\n  medicationId: integer(\"medication_id\").notNull().references(() => medications.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  takenAt: timestamp(\"taken_at\").defaultNow().notNull(),\n  skipped: boolean(\"skipped\").default(false),\n  notes: text(\"notes\"),\n});\n\nexport const insertMedicationSchema = createInsertSchema(medications, {\n  id: undefined,\n  createdAt: undefined,\n});\n\nexport const insertMedicationLogSchema = createInsertSchema(medicationLogs, {\n  id: undefined,\n});\n\n// Insert schema for hospitals\nexport const insertHospitalSchema = createInsertSchema(hospitals).omit({\n  id: true,\n});\n\n// Insert schemas for new tables\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n});\n\nexport const insertDoctorAvailabilitySchema = createInsertSchema(doctorAvailability).omit({\n  id: true,\n});\n\nexport const insertDoctorLeaveSchema = createInsertSchema(doctorLeaves).omit({\n  id: true,\n}).extend({\n  startDate: z.union([z.string(), z.date()]).transform((val) => typeof val === 'string' ? new Date(val) : val),\n  endDate: z.union([z.string(), z.date()]).transform((val) => typeof val === 'string' ? new Date(val) : val),\n});\n\nexport const insertHomeVisitRequestSchema = createInsertSchema(homeVisitRequests).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  preferredDate: z.union([z.string(), z.date(), z.null()]).transform((val) => {\n    if (!val) return null;\n    return typeof val === 'string' ? new Date(val) : val;\n  }).optional(),\n});\n\nexport const insertEmergencyIncidentSchema = createInsertSchema(emergencyIncidents).omit({\n  id: true,\n  createdAt: true,\n  dispatchedAt: true,\n  arrivedAt: true,\n  completedAt: true,\n});\n\nexport const insertAmbulanceSchema = createInsertSchema(ambulances).omit({\n  id: true,\n});\n\nexport const insertAmbulanceBookingSchema = createInsertSchema(ambulanceBookings).omit({\n  id: true,\n  createdAt: true,\n  dispatchedAt: true,\n  completedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertHealthData = z.infer<typeof insertHealthDataSchema>;\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type InsertMedication = z.infer<typeof insertMedicationSchema>;\nexport type InsertMedicationLog = z.infer<typeof insertMedicationLogSchema>;\nexport type InsertHospital = z.infer<typeof insertHospitalSchema>;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type InsertDoctorAvailability = z.infer<typeof insertDoctorAvailabilitySchema>;\nexport type InsertDoctorLeave = z.infer<typeof insertDoctorLeaveSchema>;\nexport type InsertHomeVisitRequest = z.infer<typeof insertHomeVisitRequestSchema>;\nexport type InsertEmergencyIncident = z.infer<typeof insertEmergencyIncidentSchema>;\nexport type InsertAmbulance = z.infer<typeof insertAmbulanceSchema>;\nexport type InsertAmbulanceBooking = z.infer<typeof insertAmbulanceBookingSchema>;\n\nexport const dietDays = pgTable(\"diet_days\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  date: text(\"date\").notNull(),\n  totalCalories: integer(\"total_calories\").default(0),\n  totalProtein: integer(\"total_protein\").default(0),\n  totalCarbs: integer(\"total_carbs\").default(0),\n  totalFat: integer(\"total_fat\").default(0),\n  waterIntake: integer(\"water_intake\").default(0),\n  notes: text(\"notes\"),\n});\n\nexport const dietMeals = pgTable(\"diet_meals\", {\n  id: serial(\"id\").primaryKey(),\n  dietDayId: integer(\"diet_day_id\").notNull().references(() => dietDays.id, { onDelete: 'cascade' }),\n  type: text(\"type\").notNull(),\n  time: text(\"time\").notNull(),\n  notes: text(\"notes\"),\n});\n\nexport const dietMealItems = pgTable(\"diet_meal_items\", {\n  id: serial(\"id\").primaryKey(),\n  dietMealId: integer(\"diet_meal_id\").notNull().references(() => dietMeals.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  quantity: text(\"quantity\").notNull(),\n  calories: integer(\"calories\").notNull(),\n  protein: integer(\"protein\").notNull(),\n  carbs: integer(\"carbs\").notNull(),\n  fat: integer(\"fat\").notNull(),\n});\n\nexport const insertDietDaySchema = createInsertSchema(dietDays).omit({\n  id: true,\n});\n\nexport const insertDietMealSchema = createInsertSchema(dietMeals).omit({\n  id: true,\n});\n\nexport const insertDietMealItemSchema = createInsertSchema(dietMealItems).omit({\n  id: true,\n});\n\nexport type InsertDietDay = z.infer<typeof insertDietDaySchema>;\nexport type InsertDietMeal = z.infer<typeof insertDietMealSchema>;\nexport type InsertDietMealItem = z.infer<typeof insertDietMealItemSchema>;\n\nexport type DietDay = typeof dietDays.$inferSelect;\nexport type DietMeal = typeof dietMeals.$inferSelect;\nexport type DietMealItem = typeof dietMealItems.$inferSelect;\n\nexport type User = typeof users.$inferSelect;\nexport type HealthData = typeof healthData.$inferSelect;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type Hospital = typeof hospitals.$inferSelect;\nexport type Department = typeof departments.$inferSelect;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type DoctorAvailability = typeof doctorAvailability.$inferSelect;\nexport type DoctorLeave = typeof doctorLeaves.$inferSelect;\nexport type HomeVisitRequest = typeof homeVisitRequests.$inferSelect;\nexport type EmergencyIncident = typeof emergencyIncidents.$inferSelect;\nexport type Ambulance = typeof ambulances.$inferSelect;\nexport type AmbulanceBooking = typeof ambulanceBookings.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type Medication = typeof medications.$inferSelect;\nexport type MedicationLog = typeof medicationLogs.$inferSelect;\n","size_bytes":14830},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Appointments from \"@/pages/appointments\";\nimport Hospitals from \"@/pages/hospitals\";\nimport Doctors from \"@/pages/doctors\";\nimport MedicalRecords from \"@/pages/medical-records\";\nimport FirstAid from \"@/pages/first-aid\";\nimport Settings from \"@/pages/settings\";\nimport BringDoctor from \"@/pages/bring-doctor\";\nimport Subscription from \"@/pages/subscription\";\nimport DietRoutine from \"@/pages/diet-routine\";\nimport MedicationTracker from \"@/pages/medication-tracker\";\nimport HomeVisits from \"@/pages/home-visits\";\nimport AmbulanceLocator from \"@/pages/ambulance-locator\";\nimport AmbulanceDashboard from \"@/pages/ambulance-dashboard\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport { AuthProvider } from \"./hooks/use-auth\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/appointments\" component={Appointments} />\n      <ProtectedRoute path=\"/hospitals\" component={Hospitals} />\n      <ProtectedRoute path=\"/doctors\" component={Doctors} />\n      <ProtectedRoute path=\"/medical-records\" component={MedicalRecords} />\n      <ProtectedRoute path=\"/first-aid\" component={FirstAid} />\n      <ProtectedRoute path=\"/bring-doctor\" component={BringDoctor} />\n      <ProtectedRoute path=\"/home-visits\" component={HomeVisits} />\n      <ProtectedRoute path=\"/ambulance-locator\" component={AmbulanceLocator} />\n      <ProtectedRoute path=\"/ambulance-dashboard\" component={AmbulanceDashboard} />\n      <ProtectedRoute path=\"/subscription\" component={Subscription} />\n      <ProtectedRoute path=\"/diet-routine\" component={DietRoutine} />\n      <ProtectedRoute path=\"/medication-tracker\" component={MedicationTracker} />\n      <ProtectedRoute path=\"/settings\" component={Settings} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Router />\n        <Toaster />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2419},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Handle unhandled promise rejections from browser extensions (like MetaMask)\nwindow.addEventListener('unhandledrejection', (event) => {\n  // Check if the error is from a browser extension (like MetaMask)\n  if (event.reason?.message?.includes('MetaMask') || \n      event.reason?.stack?.includes('chrome-extension://') ||\n      event.reason?.message?.includes('Failed to connect') ||\n      (typeof event.reason === 'string' && event.reason.includes('MetaMask'))) {\n    // Prevent the error from being logged to console and showing overlay\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    // Silently suppress - no console output\n    return false;\n  }\n});\n\n// Also handle regular errors from extensions\nwindow.addEventListener('error', (event) => {\n  if (event.error?.message?.includes('MetaMask') || \n      event.error?.stack?.includes('chrome-extension://') ||\n      event.filename?.includes('chrome-extension://')) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    return false;\n  }\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":1190},"client/src/components/VoiceAssistant.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport { \n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\n// Define commands that the voice assistant can understand\nconst commands = [\n  {\n    command: ['Go to home', 'Dashboard', 'Show dashboard'],\n    callback: (navigate: Function) => navigate('/'),\n    description: 'Navigate to the dashboard'\n  },\n  {\n    command: ['Go to appointments', 'Show appointments', 'Appointments', 'My appointments'],\n    callback: (navigate: Function) => navigate('/appointments'),\n    description: 'Navigate to appointments page'\n  },\n  {\n    command: ['Show doctors', 'Find doctors', 'Search doctors', 'Doctors'],\n    callback: (navigate: Function) => navigate('/doctors'),\n    description: 'Navigate to doctors page'\n  },\n  {\n    command: ['Show hospitals', 'Find hospitals', 'Search hospitals', 'Hospitals'],\n    callback: (navigate: Function) => navigate('/hospitals'),\n    description: 'Navigate to hospitals page'\n  },\n  {\n    command: ['Show medical records', 'My records', 'Medical records'],\n    callback: (navigate: Function) => navigate('/medical-records'),\n    description: 'Navigate to medical records page'\n  },\n  {\n    command: ['Call doctor', 'Doctor visit', 'Home doctor', 'Book doctor visit'],\n    callback: (navigate: Function) => navigate('/bring-doctor'),\n    description: 'Navigate to home doctor visit page'\n  },\n  {\n    command: ['First aid', 'Show first aid', 'First aid guide'],\n    callback: (navigate: Function) => navigate('/first-aid'),\n    description: 'Navigate to first aid guide'\n  },\n  {\n    command: ['Diet', 'Diet routine', 'Food plan', 'Show diet'],\n    callback: (navigate: Function) => navigate('/diet-routine'),\n    description: 'Navigate to diet routine page'\n  },\n  {\n    command: ['Medications', 'Show medications', 'My medications', 'Medicine tracker'],\n    callback: (navigate: Function) => navigate('/medication-tracker'),\n    description: 'Navigate to medication tracker page'\n  },\n  {\n    command: ['Settings', 'Open settings', 'Show settings', 'My settings'],\n    callback: (navigate: Function) => navigate('/settings'),\n    description: 'Navigate to settings page'\n  },\n  {\n    command: ['Help', 'What can I say', 'Show commands', 'Available commands'],\n    callback: (_: any, setShowHelp: Function) => setShowHelp(true),\n    description: 'Show available voice commands'\n  },\n  {\n    command: ['Close help', 'Hide commands', 'Hide help'],\n    callback: (_: any, setShowHelp: Function) => setShowHelp(false),\n    description: 'Hide voice commands help'\n  }\n];\n\nconst VoiceAssistant: React.FC = () => {\n  const [isListening, setIsListening] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  \n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition({ \n    commands: commands.map(command => ({\n      ...command,\n      callback: () => command.callback(navigate, setShowHelp)\n    }))\n  });\n\n  useEffect(() => {\n    setIsListening(listening);\n  }, [listening]);\n\n  if (!browserSupportsSpeechRecognition) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => {\n          toast({\n            title: \"Voice Assistant Unavailable\",\n            description: \"Your browser doesn't support speech recognition.\",\n            variant: \"destructive\"\n          });\n        }}\n        className=\"group relative\"\n      >\n        <span className=\"sr-only\">Voice Assistant</span>\n        <i className=\"ri-mic-off-line text-lg\"></i>\n      </Button>\n    );\n  }\n\n  const toggleListening = () => {\n    if (isListening) {\n      SpeechRecognition.stopListening();\n      resetTranscript();\n    } else {\n      SpeechRecognition.startListening({ continuous: true });\n      toast({\n        title: \"Voice Assistant Activated\",\n        description: \"Try saying 'What can I say' for help\",\n        duration: 3000\n      });\n    }\n  };\n\n  return (\n    <Popover open={showHelp} onOpenChange={setShowHelp}>\n      <PopoverTrigger asChild>\n        <Button\n          variant={isListening ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleListening}\n          className={`group relative ${isListening ? 'animate-pulse bg-primary hover:bg-primary' : ''}`}\n        >\n          <span className=\"sr-only\">Voice Assistant</span>\n          <i className={`${isListening ? 'ri-mic-fill text-white' : 'ri-mic-line'} text-lg`}></i>\n          {listening && (\n            <span className=\"absolute -top-1 -right-1 flex h-3 w-3\">\n              <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n              <span className=\"relative inline-flex rounded-full h-3 w-3 bg-red-500\"></span>\n            </span>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Voice Commands</h3>\n            {isListening && (\n              <span className=\"inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800\">\n                Listening\n              </span>\n            )}\n          </div>\n          \n          {transcript && (\n            <div className=\"p-2 bg-gray-100 rounded-md text-sm\">\n              <p className=\"font-semibold\">I heard:</p>\n              <p className=\"italic\">{transcript}</p>\n            </div>\n          )}\n          \n          <ul className=\"space-y-2 list-disc pl-4 text-sm\">\n            {commands.map((command, index) => (\n              <li key={index}>\n                <span className=\"font-medium\">{Array.isArray(command.command) ? command.command[0] : command.command}</span>\n                <span className=\"text-gray-500 text-xs ml-1\">- {command.description}</span>\n              </li>\n            ))}\n          </ul>\n          \n          <div className=\"text-xs text-gray-500 pt-2 border-t border-gray-200\">\n            Tip: You can say \"What can I say\" anytime to see this help.\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default VoiceAssistant;","size_bytes":6518},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.fullName || user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to CareGuardian, ${user.fullName || user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3180},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":711},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/appointments.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, Clock, X } from \"lucide-react\";\n\n// Form schema for booking an appointment\nconst appointmentSchema = z.object({\n  doctorId: z.string().min(1, \"Please select a doctor\"),\n  hospitalId: z.string().optional(),\n  date: z.string().min(1, \"Date is required\"),\n  time: z.string().min(1, \"Time is required\"),\n  isVirtual: z.string().default(\"false\"),\n  notes: z.string().optional()\n});\n\n// Form schema for rescheduling\nconst rescheduleSchema = z.object({\n  date: z.string().min(1, \"Date is required\"),\n  time: z.string().min(1, \"Time is required\"),\n});\n\ntype AppointmentFormValues = z.infer<typeof appointmentSchema>;\ntype RescheduleFormValues = z.infer<typeof rescheduleSchema>;\n\nexport default function Appointments() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [rescheduleDialogOpen, setRescheduleDialogOpen] = useState(false);\n  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\n\n  // Get appointments\n  const { data: appointments, isLoading: isLoadingAppointments } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  // Get doctors for the form\n  const { data: doctors, isLoading: isLoadingDoctors } = useQuery({\n    queryKey: [\"/api/doctors\"],\n  });\n  \n  // Booking mutation\n  const bookAppointmentMutation = useMutation({\n    mutationFn: async (appointment: AppointmentFormValues) => {\n      // Transform form data to match backend schema\n      const transformedData = {\n        doctorId: parseInt(appointment.doctorId),\n        hospitalId: appointment.hospitalId ? parseInt(appointment.hospitalId) : undefined,\n        date: appointment.date,\n        time: appointment.time,\n        isVirtual: appointment.isVirtual === \"true\",\n        notes: appointment.notes || undefined\n      };\n      const res = await apiRequest(\"POST\", \"/api/appointments\", transformedData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment booked\",\n        description: \"Your appointment has been scheduled successfully.\",\n      });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to book appointment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Cancel mutation\n  const cancelAppointmentMutation = useMutation({\n    mutationFn: async (appointmentId: number) => {\n      const res = await apiRequest(\"POST\", `/api/appointments/${appointmentId}/cancel`, {});\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment cancelled\",\n        description: \"Your appointment has been cancelled successfully.\",\n      });\n      setCancelDialogOpen(false);\n      setSelectedAppointment(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to cancel appointment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Reschedule mutation\n  const rescheduleAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, data }: { appointmentId: number; data: RescheduleFormValues }) => {\n      const res = await apiRequest(\"POST\", `/api/appointments/${appointmentId}/reschedule`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment rescheduled\",\n        description: \"Your appointment has been rescheduled successfully.\",\n      });\n      setRescheduleDialogOpen(false);\n      setSelectedAppointment(null);\n      rescheduleForm.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to reschedule appointment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Set up the booking form\n  const form = useForm<AppointmentFormValues>({\n    resolver: zodResolver(appointmentSchema),\n    defaultValues: {\n      doctorId: \"\",\n      hospitalId: \"\",\n      date: \"\",\n      time: \"\",\n      isVirtual: \"false\",\n      notes: \"\"\n    }\n  });\n\n  // Set up the reschedule form\n  const rescheduleForm = useForm<RescheduleFormValues>({\n    resolver: zodResolver(rescheduleSchema),\n    defaultValues: {\n      date: \"\",\n      time: \"\",\n    }\n  });\n\n  const onSubmit = (data: AppointmentFormValues) => {\n    bookAppointmentMutation.mutate(data);\n  };\n\n  const onRescheduleSubmit = (data: RescheduleFormValues) => {\n    if (selectedAppointment) {\n      rescheduleAppointmentMutation.mutate({ \n        appointmentId: selectedAppointment.id, \n        data \n      });\n    }\n  };\n\n  const handleRescheduleClick = (appointment: any) => {\n    setSelectedAppointment(appointment);\n    rescheduleForm.setValue('date', new Date(appointment.date).toISOString().split('T')[0]);\n    rescheduleForm.setValue('time', appointment.time);\n    setRescheduleDialogOpen(true);\n  };\n\n  const handleCancelClick = (appointment: any) => {\n    setSelectedAppointment(appointment);\n    setCancelDialogOpen(true);\n  };\n\n  // Group appointments by upcoming or past\n  const [upcomingAppointments, setUpcomingAppointments] = useState<any[]>([]);\n  const [pastAppointments, setPastAppointments] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (appointments) {\n      const now = new Date();\n      const upcoming: any[] = [];\n      const past: any[] = [];\n\n      (appointments as any[]).forEach((appointment: any) => {\n        // Skip cancelled appointments from upcoming\n        if (appointment.status === 'cancelled') {\n          return;\n        }\n        \n        const appointmentDate = new Date(appointment.date);\n        if (appointmentDate > now) {\n          upcoming.push(appointment);\n        } else {\n          past.push(appointment);\n        }\n      });\n\n      // Sort appointments by date\n      upcoming.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n      past.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n      setUpcomingAppointments(upcoming);\n      setPastAppointments(past);\n    }\n  }, [appointments]);\n\n  return (\n    <Layout title=\"Appointments\">\n      <div className=\"flex justify-end mb-6\">\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>Book New Appointment</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Book an Appointment</DialogTitle>\n              <DialogDescription>\n                Fill out the form below to schedule your appointment.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"doctorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Doctor</FormLabel>\n                      <Select \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a doctor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {isLoadingDoctors ? (\n                            <div className=\"p-2\">Loading doctors...</div>\n                          ) : (\n                            (doctors as any[])?.map((doctor: any) => (\n                              <SelectItem key={doctor.id} value={doctor.id.toString()}>\n                                {doctor.name} ({doctor.specialty})\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"time\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Time</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"isVirtual\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Appointment Type</FormLabel>\n                      <Select \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select appointment type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"false\">In-person</SelectItem>\n                          <SelectItem value=\"true\">Virtual</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={bookAppointmentMutation.isPending}\n                >\n                  {bookAppointmentMutation.isPending ? \"Booking...\" : \"Book Appointment\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>My Appointments</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"upcoming\" className=\"w-full\">\n            <TabsList className=\"mb-4\">\n              <TabsTrigger value=\"upcoming\">Upcoming</TabsTrigger>\n              <TabsTrigger value=\"past\">Past</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"upcoming\">\n              {isLoadingAppointments ? (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                </div>\n              ) : upcomingAppointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {upcomingAppointments.map((appointment: any) => (\n                    <div key={appointment.id} className=\"border rounded-lg p-4\" data-testid={`appointment-card-${appointment.id}`}>\n                      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                        <div>\n                          <p className=\"font-medium\" data-testid={`text-doctor-${appointment.id}`}>Dr. {appointment.doctorName || \"Doctor\"}</p>\n                          <p className=\"text-sm text-gray-500\">{appointment.doctorSpecialty || \"Specialist\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"font-medium flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            {new Date(appointment.date).toLocaleDateString()}\n                          </p>\n                          <p className=\"text-sm text-gray-500 flex items-center gap-2 mt-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            {appointment.time}\n                          </p>\n                        </div>\n                        <div className=\"flex flex-col gap-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              appointment.status === \"scheduled\" ? \"bg-blue-100 text-blue-800\" :\n                              appointment.status === \"cancelled\" ? \"bg-red-100 text-red-800\" :\n                              appointment.status === \"completed\" ? \"bg-green-100 text-green-800\" :\n                              \"bg-gray-100 text-gray-800\"\n                            }`}>\n                              {appointment.status || \"Scheduled\"}\n                            </span>\n                            {appointment.isVirtual && (\n                              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                                Virtual\n                              </span>\n                            )}\n                          </div>\n                          {appointment.status !== 'cancelled' && (\n                            <div className=\"flex gap-2\">\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => handleRescheduleClick(appointment)}\n                                data-testid={`button-reschedule-${appointment.id}`}\n                              >\n                                <Calendar className=\"h-4 w-4 mr-1\" />\n                                Reschedule\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"destructive\"\n                                onClick={() => handleCancelClick(appointment)}\n                                data-testid={`button-cancel-${appointment.id}`}\n                              >\n                                <X className=\"h-4 w-4 mr-1\" />\n                                Cancel\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      {appointment.notes && (\n                        <div className=\"mt-3 pt-3 border-t\">\n                          <p className=\"text-sm text-gray-600\">{appointment.notes}</p>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">You have no upcoming appointments.</p>\n                  <Button onClick={() => setDialogOpen(true)} className=\"mt-4\">Book an Appointment</Button>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"past\">\n              {isLoadingAppointments ? (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                </div>\n              ) : pastAppointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {pastAppointments.map((appointment: any) => (\n                    <div key={appointment.id} className=\"border rounded-lg p-4 bg-gray-50\">\n                      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                        <div>\n                          <p className=\"font-medium\">Dr. {appointment.doctorName || \"Doctor\"}</p>\n                          <p className=\"text-sm text-gray-500\">{appointment.specialty || \"Specialist\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{new Date(appointment.date).toLocaleDateString()}</p>\n                          <p className=\"text-sm text-gray-500\">{appointment.time}</p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n                            Completed\n                          </span>\n                          <Button size=\"sm\" variant=\"ghost\" className=\"ml-auto\">\n                            View Details\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">You have no past appointments.</p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Reschedule Dialog */}\n      <Dialog open={rescheduleDialogOpen} onOpenChange={setRescheduleDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Reschedule Appointment</DialogTitle>\n            <DialogDescription>\n              Change the date and time for your appointment with Dr. {selectedAppointment?.doctorName}.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...rescheduleForm}>\n            <form onSubmit={rescheduleForm.handleSubmit(onRescheduleSubmit)} className=\"space-y-4 mt-4\">\n              <FormField\n                control={rescheduleForm.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-reschedule-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={rescheduleForm.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"time\" {...field} data-testid=\"input-reschedule-time\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  onClick={() => setRescheduleDialogOpen(false)}\n                  data-testid=\"button-cancel-reschedule\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  disabled={rescheduleAppointmentMutation.isPending}\n                  data-testid=\"button-confirm-reschedule\"\n                >\n                  {rescheduleAppointmentMutation.isPending ? \"Rescheduling...\" : \"Confirm Reschedule\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Cancel Confirmation Dialog */}\n      <AlertDialog open={cancelDialogOpen} onOpenChange={setCancelDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Cancel Appointment</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to cancel your appointment with Dr. {selectedAppointment?.doctorName} on {selectedAppointment && new Date(selectedAppointment.date).toLocaleDateString()} at {selectedAppointment?.time}?\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-confirmation-no\">No, Keep It</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => selectedAppointment && cancelAppointmentMutation.mutate(selectedAppointment.id)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              disabled={cancelAppointmentMutation.isPending}\n              data-testid=\"button-cancel-confirmation-yes\"\n            >\n              {cancelAppointmentMutation.isPending ? \"Cancelling...\" : \"Yes, Cancel Appointment\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Layout>\n  );\n}\n","size_bytes":22402},"client/src/pages/auth-page.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Loader2, User, Building2, Ambulance } from \"lucide-react\";\n\n// Login form schema\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Registration form schema\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  fullName: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phoneNumber: z.string().optional(),\n  role: z.enum([\"user\", \"hospital\", \"ambulance\"]).default(\"user\"),\n  // Hospital-specific fields\n  address: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n  const [_, navigate] = useLocation();\n\n  // Redirect to dashboard if user is already logged in\n  useEffect(() => {\n    if (user) {\n      navigate(\"/\");\n    }\n  }, [user, navigate]);\n\n  // Login form\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onLoginSubmit = (data: LoginFormValues) => {\n    loginMutation.mutate(data);\n  };\n\n  // Registration form\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      fullName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      role: \"user\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n    },\n  });\n\n  // Watch role field to dynamically show fields\n  const selectedRole = registerForm.watch(\"role\");\n\n  const onRegisterSubmit = (data: RegisterFormValues) => {\n    registerMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Auth forms */}\n      <div className=\"w-full lg:w-1/2 p-8 flex items-center justify-center\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">CareGuardian</h1>\n            <p className=\"text-gray-600\">Your personal healthcare companion</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Login to your account</CardTitle>\n                  <CardDescription>\n                    Enter your username and password to access your dashboard\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Logging in...\n                          </>\n                        ) : (\n                          \"Login\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <CardTitle>Create an account</CardTitle>\n                  <CardDescription>\n                    Choose your role and enter your details to create a new account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Register as</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-role\">\n                                  <SelectValue placeholder=\"Select your role\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"user\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <User className=\"h-4 w-4\" />\n                                    User - Patient\n                                  </div>\n                                </SelectItem>\n                                <SelectItem value=\"hospital\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Building2 className=\"h-4 w-4\" />\n                                    Hospital - Healthcare Provider\n                                  </div>\n                                </SelectItem>\n                                <SelectItem value=\"ambulance\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Ambulance className=\"h-4 w-4\" />\n                                    Ambulance - Emergency Services\n                                  </div>\n                                </SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={registerForm.control}\n                        name=\"fullName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              {selectedRole === \"hospital\" ? \"Hospital Name\" : selectedRole === \"ambulance\" ? \"Driver Name\" : \"Full Name\"}\n                            </FormLabel>\n                            <FormControl>\n                              <Input placeholder={\n                                selectedRole === \"hospital\" ? \"Enter hospital name\" : \n                                selectedRole === \"ambulance\" ? \"Enter driver name\" : \n                                \"Enter your full name\"\n                              } {...field} data-testid=\"input-fullname\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {selectedRole === \"hospital\" && (\n                        <>\n                          <FormField\n                            control={registerForm.control}\n                            name=\"address\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Hospital Address</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Enter full address\" {...field} data-testid=\"input-address\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={registerForm.control}\n                              name=\"city\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>City</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"City\" {...field} data-testid=\"input-city\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={registerForm.control}\n                              name=\"state\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>State</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"State\" {...field} data-testid=\"input-state\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </>\n                      )}\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Choose a username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"phoneNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your phone number\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Creating account...\n                          </>\n                        ) : (\n                          \"Create Account\"\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n      \n      {/* Right side - Hero section */}\n      <div className=\"hidden lg:w-1/2 lg:flex bg-primary-500 text-white p-8\">\n        <div className=\"flex flex-col justify-center items-start max-w-lg mx-auto\">\n          <h2 className=\"text-4xl font-bold mb-6\">Your health, your way</h2>\n          <p className=\"text-lg mb-8\">\n            CareGuardian helps you take control of your healthcare journey with easy access to medical records, doctor appointments, and emergency services.\n          </p>\n          <div className=\"space-y-4 w-full\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-full\">\n                <svg className=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold\">Secure & Private</h3>\n                <p className=\"text-white/80\">Your health data is encrypted and HIPAA compliant</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-full\">\n                <svg className=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold\">Emergency Ready</h3>\n                <p className=\"text-white/80\">Quick access to emergency services when you need them most</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-full\">\n                <svg className=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold\">Always Available</h3>\n                <p className=\"text-white/80\">Access your health information anytime, anywhere</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17784},"client/src/pages/bring-doctor.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Form schema for the doctor request\nconst bringDoctorSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters long\"),\n  contactNumber: z.string().min(10, \"Please enter a valid contact number\"),\n  address: z.string().min(5, \"Address must be at least 5 characters long\"),\n  requestDetails: z.string().min(10, \"Please provide more details about your request\"),\n  paymentOption: z.enum([\"subscription\", \"oneTime\"]),\n});\n\ntype BringDoctorFormValues = z.infer<typeof bringDoctorSchema>;\n\nexport default function BringDoctor() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Set up the form\n  const form = useForm<BringDoctorFormValues>({\n    resolver: zodResolver(bringDoctorSchema),\n    defaultValues: {\n      name: \"\",\n      contactNumber: \"\",\n      address: \"\",\n      requestDetails: \"\",\n      paymentOption: \"oneTime\",\n    },\n  });\n\n  const onSubmit = (data: BringDoctorFormValues) => {\n    setIsSubmitting(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      console.log(\"Form data:\", data);\n      \n      toast({\n        title: \"Request Submitted\",\n        description: \"Your doctor request has been successfully submitted. We'll contact you shortly.\",\n      });\n      \n      form.reset();\n      setIsSubmitting(false);\n    }, 1500);\n  };\n\n  return (\n    <Layout title=\"Bring a Doctor\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Form Card */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle>Request a Doctor Visit</CardTitle>\n            <CardDescription>\n              Fill out the form below to request a doctor to visit your location\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Your full name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"contactNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Your phone number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Your full address where the doctor should visit\" \n                          {...field} \n                          rows={3}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"requestDetails\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Request Details</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe your medical concern or reason for requesting a doctor\" \n                          {...field} \n                          rows={4}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"paymentOption\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-3\">\n                      <FormLabel>Payment Option</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex flex-col space-y-1\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"subscription\" id=\"subscription\" />\n                            <Label htmlFor=\"subscription\" className=\"font-normal\">\n                              Included with my subscription\n                            </Label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"oneTime\" id=\"oneTime\" />\n                            <Label htmlFor=\"oneTime\" className=\"font-normal\">\n                              One-time payment (₹999)\n                            </Label>\n                          </div>\n                        </RadioGroup>\n                        <p className=\"text-sm text-muted-foreground mt-2\">\n                          <a href=\"/subscription\" className=\"text-primary hover:underline\">\n                            View our subscription plans\n                          </a> to get unlimited doctor visits and more benefits.\n                        </p>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? \"Submitting Request...\" : \"Submit Request\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n        \n        {/* Information Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>How It Works</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center shrink-0\">\n                <span className=\"text-primary font-medium\">1</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium mb-1\">Submit Your Request</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Fill out the form with your details and medical concern.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center shrink-0\">\n                <span className=\"text-primary font-medium\">2</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium mb-1\">Doctor Assignment</h3>\n                <p className=\"text-sm text-gray-600\">\n                  We'll assign a qualified doctor based on your medical needs.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center shrink-0\">\n                <span className=\"text-primary font-medium\">3</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium mb-1\">Confirmation</h3>\n                <p className=\"text-sm text-gray-600\">\n                  You'll receive a confirmation call with the expected arrival time.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center shrink-0\">\n                <span className=\"text-primary font-medium\">4</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium mb-1\">Doctor Visit</h3>\n                <p className=\"text-sm text-gray-600\">\n                  The doctor will visit your location at the scheduled time.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n              <h3 className=\"font-medium mb-2 flex items-center\">\n                <i className=\"ri-information-line mr-2 text-primary\"></i>\n                Important Information\n              </h3>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Doctor availability may vary based on your location in Bengaluru and time of request</li>\n                <li>• For emergencies, please call emergency services immediately</li>\n                <li>• Premium subscribers get priority scheduling and additional benefits</li>\n                <li>• One-time payment can be made via credit card or digital payment methods</li>\n                <li>• <a href=\"/subscription\" className=\"text-primary hover:underline\">Subscribe to our premium plans</a> for unlimited doctor visits</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":10498},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport Layout from \"@/components/layout/Layout\";\nimport DailyRoutineCard from \"@/components/dashboard/DailyRoutineCard\";\nimport AppointmentsCard from \"@/components/dashboard/AppointmentsCard\";\nimport MedicalRecordsCard from \"@/components/dashboard/MedicalRecordsCard\";\nimport ChatbotCard from \"@/components/dashboard/ChatbotCard\";\nimport HospitalsSection from \"@/components/dashboard/HospitalsSection\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showLocationDialog, setShowLocationDialog] = useState(false);\n  const [isCapturingLocation, setIsCapturingLocation] = useState(false);\n\n  // Capture location on first login if user doesn't have city set\n  useEffect(() => {\n    if (user && !user.city && user.role === \"user\") {\n      // Show location dialog for first-time users\n      setShowLocationDialog(true);\n    }\n  }, [user]);\n\n  const handleCaptureLocation = () => {\n    setIsCapturingLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          \n          try {\n            // Use reverse geocoding to get city and state (simplified - in production use a geocoding API)\n            // For now, we'll use a placeholder approach\n            const city = \"Your City\"; // In production, use a geocoding service\n            const state = \"Your State\";\n            \n            await apiRequest(\"PATCH\", \"/api/user/location\", {\n              city,\n              state,\n              latitude: latitude.toString(),\n              longitude: longitude.toString(),\n            });\n            \n            toast({\n              title: \"Location Saved\",\n              description: \"Your location has been saved. This helps us show you nearby hospitals and services.\",\n            });\n            \n            // Refresh user data\n            queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n            setShowLocationDialog(false);\n          } catch (error) {\n            console.error(\"Failed to save location:\", error);\n            toast({\n              title: \"Failed to Save Location\",\n              description: \"Could not save your location. You can update it later in settings.\",\n              variant: \"destructive\",\n            });\n          }\n          \n          setIsCapturingLocation(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Access Denied\",\n            description: \"You can enable location services later in settings to see nearby hospitals.\",\n          });\n          setIsCapturingLocation(false);\n          setShowLocationDialog(false);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setIsCapturingLocation(false);\n      setShowLocationDialog(false);\n    }\n  };\n\n  return (\n    <Layout title=\"Dashboard\">\n      <AlertDialog open={showLocationDialog} onOpenChange={setShowLocationDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Enable Location Services</AlertDialogTitle>\n            <AlertDialogDescription>\n              We'd like to capture your location to provide you with:\n              <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                <li>Nearby hospitals and healthcare facilities</li>\n                <li>Local healthcare services</li>\n                <li>Emergency assistance in your area</li>\n              </ul>\n              <p className=\"mt-3 text-sm\">Your location will only be used to improve your healthcare experience.</p>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={isCapturingLocation} data-testid=\"button-location-skip\">\n              Skip for Now\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleCaptureLocation}\n              disabled={isCapturingLocation}\n              data-testid=\"button-location-allow\"\n            >\n              {isCapturingLocation ? \"Getting Location...\" : \"Allow Location\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <div className=\"my-4\">\n        <h1 className=\"text-2xl font-bold\">Welcome to CareGuardian</h1>\n        <p className=\"text-muted-foreground\">Your personal healthcare assistant for complete well-being</p>\n      </div>\n\n      {/* Main dashboard sections */}\n      <div className=\"mt-6 grid grid-cols-1 gap-6 lg:grid-cols-3\">\n        <DailyRoutineCard />\n        <AppointmentsCard />\n        <MedicalRecordsCard />\n      </div>\n\n      {/* Chatbot Section */}\n      <div className=\"mt-6 mb-8\">\n        <ChatbotCard />\n      </div>\n\n      {/* Hospitals Section */}\n      <HospitalsSection />\n    </Layout>\n  );\n}\n","size_bytes":5517},"client/src/pages/diet-routine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertCircle, Plus, Trash2 } from \"lucide-react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ntype MealItem = {\n  id: number;\n  dietMealId: number;\n  name: string;\n  quantity: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n};\n\ntype Meal = {\n  id: number;\n  dietDayId: number;\n  type: string;\n  time: string;\n  notes?: string;\n  items: MealItem[];\n};\n\ntype DietDay = {\n  id: number;\n  userId: number;\n  date: string;\n  totalCalories: number;\n  totalProtein: number;\n  totalCarbs: number;\n  totalFat: number;\n  waterIntake: number;\n  notes?: string;\n  meals: Meal[];\n};\n\nconst mealItemSchema = z.object({\n  name: z.string().min(1, \"Food item name is required\"),\n  quantity: z.string().min(1, \"Quantity is required\"),\n  calories: z.number().min(0, \"Calories must be a positive number\"),\n  protein: z.number().min(0, \"Protein must be a positive number\"),\n  carbs: z.number().min(0, \"Carbs must be a positive number\"),\n  fat: z.number().min(0, \"Fat must be a positive number\"),\n});\n\nconst mealSchema = z.object({\n  type: z.enum([\"breakfast\", \"lunch\", \"dinner\", \"snack\"], {\n    required_error: \"Please select a meal type\",\n  }),\n  time: z.string().min(1, \"Time is required\"),\n  notes: z.string().optional(),\n});\n\ntype MealItemFormValues = z.infer<typeof mealItemSchema>;\ntype MealFormValues = z.infer<typeof mealSchema>;\n\nexport default function DietRoutine() {\n  const { toast } = useToast();\n  const [currentDate, setCurrentDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [activeMealId, setActiveMealId] = useState<number | null>(null);\n  const [isAddingMeal, setIsAddingMeal] = useState(false);\n  const [isAddingMealItem, setIsAddingMealItem] = useState(false);\n  const [waterIntake, setWaterIntake] = useState(0);\n\n  const { data: dietDay, isLoading } = useQuery<DietDay | null>({\n    queryKey: ['/api/diet', currentDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/diet/${currentDate}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        if (response.status === 404 || response.status === 401) return null;\n        throw new Error('Failed to fetch diet');\n      }\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (dietDay) {\n      setWaterIntake(dietDay.waterIntake || 0);\n    } else {\n      setWaterIntake(0);\n    }\n  }, [dietDay]);\n\n  const createDietDayMutation = useMutation({\n    mutationFn: async (data: { date: string; waterIntake: number }) => {\n      return apiRequest('POST', '/api/diet', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diet', currentDate] });\n    },\n  });\n\n  const updateDietDayMutation = useMutation({\n    mutationFn: async (data: { id: number; waterIntake?: number; totalCalories?: number; totalProtein?: number; totalCarbs?: number; totalFat?: number }) => {\n      const { id, ...updateData } = data;\n      return apiRequest('PUT', `/api/diet/${id}`, updateData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diet', currentDate] });\n    },\n  });\n\n  const createMealMutation = useMutation({\n    mutationFn: async (data: { dietDayId: number; type: string; time: string; notes?: string }) => {\n      return apiRequest('POST', '/api/diet/meals', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diet', currentDate] });\n      toast({ title: \"Meal added successfully\" });\n    },\n  });\n\n  const createMealItemMutation = useMutation({\n    mutationFn: async (data: { dietMealId: number; name: string; quantity: string; calories: number; protein: number; carbs: number; fat: number }) => {\n      return apiRequest('POST', '/api/diet/meals/items', data);\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: ['/api/diet', currentDate] });\n      \n      if (dietDay) {\n        const updatedDiet = await queryClient.fetchQuery({ \n          queryKey: ['/api/diet', currentDate],\n          queryFn: async () => {\n            const response = await fetch(`/api/diet/${currentDate}`, {\n              credentials: 'include',\n            });\n            return response.json();\n          },\n        });\n        \n        if (updatedDiet) {\n          await updateDietDayMutation.mutateAsync({\n            id: dietDay.id,\n            totalCalories: updatedDiet.totalCalories,\n            totalProtein: updatedDiet.totalProtein,\n            totalCarbs: updatedDiet.totalCarbs,\n            totalFat: updatedDiet.totalFat,\n          });\n        }\n      }\n      \n      toast({ title: \"Food item added successfully\" });\n    },\n  });\n\n  const deleteMealItemMutation = useMutation({\n    mutationFn: async (itemId: number) => {\n      return apiRequest('DELETE', `/api/diet/meals/items/${itemId}`);\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: ['/api/diet', currentDate] });\n      \n      if (dietDay) {\n        const updatedDiet = await queryClient.fetchQuery({ \n          queryKey: ['/api/diet', currentDate],\n          queryFn: async () => {\n            const response = await fetch(`/api/diet/${currentDate}`, {\n              credentials: 'include',\n            });\n            return response.json();\n          },\n        });\n        \n        if (updatedDiet) {\n          await updateDietDayMutation.mutateAsync({\n            id: dietDay.id,\n            totalCalories: updatedDiet.totalCalories,\n            totalProtein: updatedDiet.totalProtein,\n            totalCarbs: updatedDiet.totalCarbs,\n            totalFat: updatedDiet.totalFat,\n          });\n        }\n      }\n      \n      toast({ title: \"Food item removed successfully\" });\n    },\n  });\n\n  const mealForm = useForm<MealFormValues>({\n    resolver: zodResolver(mealSchema),\n    defaultValues: {\n      type: \"breakfast\",\n      time: \"\",\n      notes: \"\",\n    },\n  });\n\n  const mealItemForm = useForm<MealItemFormValues>({\n    resolver: zodResolver(mealItemSchema),\n    defaultValues: {\n      name: \"\",\n      quantity: \"\",\n      calories: 0,\n      protein: 0,\n      carbs: 0,\n      fat: 0,\n    },\n  });\n\n  const ensureDietDay = async () => {\n    if (!dietDay) {\n      await createDietDayMutation.mutateAsync({\n        date: currentDate,\n        waterIntake: 0,\n      });\n      const newDietDay = await queryClient.fetchQuery({ \n        queryKey: ['/api/diet', currentDate],\n        queryFn: async () => {\n          const response = await fetch(`/api/diet/${currentDate}`, {\n            credentials: 'include',\n          });\n          return response.json();\n        },\n      });\n      return newDietDay;\n    }\n    return dietDay;\n  };\n\n  const handleAddMeal = async (data: MealFormValues) => {\n    const day = await ensureDietDay();\n    if (!day) return;\n    \n    await createMealMutation.mutateAsync({\n      dietDayId: day.id,\n      type: data.type,\n      time: data.time,\n      notes: data.notes,\n    });\n    \n    setIsAddingMeal(false);\n    mealForm.reset();\n  };\n\n  const handleAddMealItem = async (data: MealItemFormValues) => {\n    if (!activeMealId) return;\n    \n    await createMealItemMutation.mutateAsync({\n      dietMealId: activeMealId,\n      ...data,\n    });\n    \n    setIsAddingMealItem(false);\n    mealItemForm.reset();\n  };\n\n  const handleWaterIntakeChange = async (value: number[]) => {\n    const intake = value[0];\n    setWaterIntake(intake);\n    \n    const day = await ensureDietDay();\n    if (day) {\n      await updateDietDayMutation.mutateAsync({\n        id: day.id,\n        waterIntake: intake,\n      });\n    }\n  };\n\n  const handleRemoveMealItem = async (itemId: number) => {\n    await deleteMealItemMutation.mutateAsync(itemId);\n  };\n\n  const calculateTotals = (meals: Meal[]) => {\n    let totalCalories = 0;\n    let totalProtein = 0;\n    let totalCarbs = 0;\n    let totalFat = 0;\n\n    meals.forEach(meal => {\n      meal.items.forEach(item => {\n        totalCalories += item.calories;\n        totalProtein += item.protein;\n        totalCarbs += item.carbs;\n        totalFat += item.fat;\n      });\n    });\n\n    return { totalCalories, totalProtein, totalCarbs, totalFat };\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-IN', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    }).format(date);\n  };\n\n  const totals = dietDay ? calculateTotals(dietDay.meals) : { totalCalories: 0, totalProtein: 0, totalCarbs: 0, totalFat: 0 };\n\n  return (\n    <Layout title=\"Daily Diet Routine\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold\">Daily Diet Routine</h1>\n        <p className=\"text-muted-foreground\">Track your meals and nutrition intake</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <CardTitle>{formatDate(currentDate)}</CardTitle>\n                  <CardDescription>Track your daily meals and nutrition</CardDescription>\n                </div>\n                <div>\n                  <Input\n                    type=\"date\"\n                    value={currentDate}\n                    onChange={(e) => setCurrentDate(e.target.value)}\n                    className=\"max-w-[200px]\"\n                    data-testid=\"input-date\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-32 w-full\" />\n                  <Skeleton className=\"h-32 w-full\" />\n                </div>\n              ) : !dietDay || dietDay.meals.length === 0 ? (\n                <div className=\"text-center py-12\" data-testid=\"empty-diet\">\n                  <i className=\"ri-restaurant-line text-5xl text-gray-400 mb-3\"></i>\n                  <p className=\"text-gray-500 text-lg mb-1\">No diet booked</p>\n                  <p className=\"text-gray-400 text-sm mb-4\">Start tracking your meals by adding your first meal</p>\n                  <Button onClick={() => setIsAddingMeal(true)} data-testid=\"button-add-first-meal\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Your First Meal\n                  </Button>\n                </div>\n              ) : (\n                <Tabs defaultValue=\"meals\" className=\"space-y-4\">\n                  <TabsList>\n                    <TabsTrigger value=\"meals\">Meals</TabsTrigger>\n                    <TabsTrigger value=\"nutrition\">Nutrition</TabsTrigger>\n                    <TabsTrigger value=\"water\">Water Intake</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"meals\" className=\"space-y-4\">\n                    {dietDay.meals.map((meal) => (\n                      <Card key={meal.id} className={`border ${activeMealId === meal.id ? 'border-primary' : ''}`}>\n                        <CardHeader className=\"pb-2\">\n                          <div className=\"flex justify-between items-center\">\n                            <div>\n                              <CardTitle className=\"text-lg capitalize\">{meal.type}</CardTitle>\n                              <CardDescription>Time: {meal.time}</CardDescription>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => {\n                                setActiveMealId(activeMealId === meal.id ? null : meal.id);\n                                setIsAddingMealItem(false);\n                              }}\n                              data-testid={`button-expand-meal-${meal.id}`}\n                            >\n                              {activeMealId === meal.id ? 'Close' : 'Expand'}\n                            </Button>\n                          </div>\n                        </CardHeader>\n                        {activeMealId === meal.id && (\n                          <>\n                            <CardContent className=\"pb-2\">\n                              <div className=\"space-y-2\">\n                                {meal.items.length > 0 ? (\n                                  <>\n                                    <div className=\"grid grid-cols-12 gap-2 text-xs font-medium text-muted-foreground pb-1\">\n                                      <div className=\"col-span-4\">Food Item</div>\n                                      <div className=\"col-span-2\">Quantity</div>\n                                      <div className=\"col-span-1\">Cal</div>\n                                      <div className=\"col-span-1\">Pro</div>\n                                      <div className=\"col-span-1\">Carb</div>\n                                      <div className=\"col-span-1\">Fat</div>\n                                      <div className=\"col-span-2\"></div>\n                                    </div>\n                                    {meal.items.map((item) => (\n                                      <div key={item.id} className=\"grid grid-cols-12 gap-2 items-center text-sm py-2 border-b last:border-0\" data-testid={`meal-item-${item.id}`}>\n                                        <div className=\"col-span-4 font-medium\">{item.name}</div>\n                                        <div className=\"col-span-2 text-muted-foreground\">{item.quantity}</div>\n                                        <div className=\"col-span-1\">{item.calories}</div>\n                                        <div className=\"col-span-1\">{item.protein}g</div>\n                                        <div className=\"col-span-1\">{item.carbs}g</div>\n                                        <div className=\"col-span-1\">{item.fat}g</div>\n                                        <div className=\"col-span-2 text-right\">\n                                          <Button\n                                            variant=\"ghost\"\n                                            size=\"icon\"\n                                            onClick={() => handleRemoveMealItem(item.id)}\n                                            data-testid={`button-remove-item-${item.id}`}\n                                          >\n                                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </>\n                                ) : (\n                                  <div className=\"text-center py-6 text-muted-foreground\">\n                                    No food items added to this meal yet.\n                                  </div>\n                                )}\n\n                                {!isAddingMealItem ? (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"mt-2\"\n                                    onClick={() => setIsAddingMealItem(true)}\n                                    data-testid=\"button-add-food-item\"\n                                  >\n                                    <Plus className=\"h-4 w-4 mr-2\" />\n                                    Add Food Item\n                                  </Button>\n                                ) : (\n                                  <Card className=\"mt-4\">\n                                    <CardHeader className=\"pb-2\">\n                                      <CardTitle className=\"text-md\">Add Food Item</CardTitle>\n                                    </CardHeader>\n                                    <CardContent>\n                                      <Form {...mealItemForm}>\n                                        <form onSubmit={mealItemForm.handleSubmit(handleAddMealItem)} className=\"space-y-4\">\n                                          <div className=\"grid grid-cols-2 gap-4\">\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"name\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Food Item</FormLabel>\n                                                  <FormControl>\n                                                    <Input placeholder=\"E.g. Brown Rice\" {...field} data-testid=\"input-food-name\" />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"quantity\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Quantity</FormLabel>\n                                                  <FormControl>\n                                                    <Input placeholder=\"E.g. 1 cup\" {...field} data-testid=\"input-quantity\" />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n                                          </div>\n\n                                          <div className=\"grid grid-cols-4 gap-4\">\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"calories\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Calories</FormLabel>\n                                                  <FormControl>\n                                                    <Input \n                                                      type=\"number\" \n                                                      placeholder=\"0\" \n                                                      {...field}\n                                                      onChange={(e) => field.onChange(Number(e.target.value))}\n                                                      data-testid=\"input-calories\"\n                                                    />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"protein\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Protein (g)</FormLabel>\n                                                  <FormControl>\n                                                    <Input \n                                                      type=\"number\" \n                                                      placeholder=\"0\" \n                                                      {...field}\n                                                      onChange={(e) => field.onChange(Number(e.target.value))}\n                                                      data-testid=\"input-protein\"\n                                                    />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"carbs\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Carbs (g)</FormLabel>\n                                                  <FormControl>\n                                                    <Input \n                                                      type=\"number\" \n                                                      placeholder=\"0\" \n                                                      {...field}\n                                                      onChange={(e) => field.onChange(Number(e.target.value))}\n                                                      data-testid=\"input-carbs\"\n                                                    />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n\n                                            <FormField\n                                              control={mealItemForm.control}\n                                              name=\"fat\"\n                                              render={({ field }) => (\n                                                <FormItem>\n                                                  <FormLabel>Fat (g)</FormLabel>\n                                                  <FormControl>\n                                                    <Input \n                                                      type=\"number\" \n                                                      placeholder=\"0\" \n                                                      {...field}\n                                                      onChange={(e) => field.onChange(Number(e.target.value))}\n                                                      data-testid=\"input-fat\"\n                                                    />\n                                                  </FormControl>\n                                                  <FormMessage />\n                                                </FormItem>\n                                              )}\n                                            />\n                                          </div>\n\n                                          <div className=\"flex justify-end space-x-2\">\n                                            <Button\n                                              type=\"button\"\n                                              variant=\"outline\"\n                                              onClick={() => setIsAddingMealItem(false)}\n                                              data-testid=\"button-cancel-food-item\"\n                                            >\n                                              Cancel\n                                            </Button>\n                                            <Button type=\"submit\" data-testid=\"button-submit-food-item\">Add Food Item</Button>\n                                          </div>\n                                        </form>\n                                      </Form>\n                                    </CardContent>\n                                  </Card>\n                                )}\n                              </div>\n                            </CardContent>\n                            {meal.notes && (\n                              <CardFooter>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Notes:</span> {meal.notes}\n                                </p>\n                              </CardFooter>\n                            )}\n                          </>\n                        )}\n                      </Card>\n                    ))}\n\n                    {!isAddingMeal ? (\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsAddingMeal(true)}\n                        data-testid=\"button-add-new-meal\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add New Meal\n                      </Button>\n                    ) : (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Add New Meal</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <Form {...mealForm}>\n                            <form onSubmit={mealForm.handleSubmit(handleAddMeal)} className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <FormField\n                                  control={mealForm.control}\n                                  name=\"type\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Meal Type</FormLabel>\n                                      <Select\n                                        onValueChange={field.onChange}\n                                        defaultValue={field.value}\n                                      >\n                                        <FormControl>\n                                          <SelectTrigger data-testid=\"select-meal-type\">\n                                            <SelectValue placeholder=\"Select meal type\" />\n                                          </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                          <SelectItem value=\"breakfast\">Breakfast</SelectItem>\n                                          <SelectItem value=\"lunch\">Lunch</SelectItem>\n                                          <SelectItem value=\"dinner\">Dinner</SelectItem>\n                                          <SelectItem value=\"snack\">Snack</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={mealForm.control}\n                                  name=\"time\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Time</FormLabel>\n                                      <FormControl>\n                                        <Input type=\"time\" {...field} data-testid=\"input-meal-time\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <FormField\n                                control={mealForm.control}\n                                name=\"notes\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Notes (Optional)</FormLabel>\n                                    <FormControl>\n                                      <Textarea\n                                        placeholder=\"Any notes about this meal?\"\n                                        className=\"resize-none\"\n                                        {...field}\n                                        data-testid=\"input-meal-notes\"\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              <div className=\"flex justify-end space-x-2\">\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  onClick={() => setIsAddingMeal(false)}\n                                  data-testid=\"button-cancel-meal\"\n                                >\n                                  Cancel\n                                </Button>\n                                <Button type=\"submit\" data-testid=\"button-submit-meal\">Add Meal</Button>\n                              </div>\n                            </form>\n                          </Form>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"nutrition\">\n                    <div className=\"space-y-6\">\n                      <div className=\"grid grid-cols-4 gap-4\">\n                        <Card className=\"p-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold\" data-testid=\"total-calories\">{totals.totalCalories}</div>\n                            <div className=\"text-sm text-muted-foreground\">Calories</div>\n                          </div>\n                        </Card>\n                        <Card className=\"p-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold\" data-testid=\"total-protein\">{totals.totalProtein}g</div>\n                            <div className=\"text-sm text-muted-foreground\">Protein</div>\n                          </div>\n                        </Card>\n                        <Card className=\"p-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold\" data-testid=\"total-carbs\">{totals.totalCarbs}g</div>\n                            <div className=\"text-sm text-muted-foreground\">Carbs</div>\n                          </div>\n                        </Card>\n                        <Card className=\"p-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold\" data-testid=\"total-fat\">{totals.totalFat.toFixed(1)}g</div>\n                            <div className=\"text-sm text-muted-foreground\">Fat</div>\n                          </div>\n                        </Card>\n                      </div>\n\n                      {totals.totalCalories > 0 && (\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Macro Distribution</CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <div className=\"flex justify-between mb-1\">\n                                  <span className=\"text-sm font-medium\">Protein</span>\n                                  <span className=\"text-sm text-muted-foreground\">\n                                    {Math.round((totals.totalProtein * 4 / totals.totalCalories) * 100)}%\n                                  </span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                                  <div\n                                    className=\"bg-blue-500 h-2.5 rounded-full\"\n                                    style={{ width: `${(totals.totalProtein * 4 / totals.totalCalories) * 100}%` }}\n                                  ></div>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"flex justify-between mb-1\">\n                                  <span className=\"text-sm font-medium\">Carbohydrates</span>\n                                  <span className=\"text-sm text-muted-foreground\">\n                                    {Math.round((totals.totalCarbs * 4 / totals.totalCalories) * 100)}%\n                                  </span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                                  <div\n                                    className=\"bg-green-500 h-2.5 rounded-full\"\n                                    style={{ width: `${(totals.totalCarbs * 4 / totals.totalCalories) * 100}%` }}\n                                  ></div>\n                                </div>\n                              </div>\n                              <div>\n                                <div className=\"flex justify-between mb-1\">\n                                  <span className=\"text-sm font-medium\">Fat</span>\n                                  <span className=\"text-sm text-muted-foreground\">\n                                    {Math.round((totals.totalFat * 9 / totals.totalCalories) * 100)}%\n                                  </span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                                  <div\n                                    className=\"bg-yellow-500 h-2.5 rounded-full\"\n                                    style={{ width: `${(totals.totalFat * 9 / totals.totalCalories) * 100}%` }}\n                                  ></div>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"water\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Water Intake</CardTitle>\n                        <CardDescription>Track your daily water consumption</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            <div className=\"text-4xl font-bold text-blue-500\" data-testid=\"water-intake\">{waterIntake} ml</div>\n                            <div className=\"text-sm text-muted-foreground mt-2\">Today's water intake</div>\n                          </div>\n                        </div>\n\n                        <div className=\"px-4\">\n                          <div className=\"flex justify-between mb-2\">\n                            <span>0 ml</span>\n                            <span>3000 ml</span>\n                          </div>\n                          <Slider\n                            defaultValue={[waterIntake]}\n                            value={[waterIntake]}\n                            max={3000}\n                            step={100}\n                            onValueChange={handleWaterIntakeChange}\n                            data-testid=\"slider-water-intake\"\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-4 gap-2\">\n                          {[250, 500, 750, 1000].map((amount) => (\n                            <Button\n                              key={amount}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleWaterIntakeChange([Math.min(waterIntake + amount, 3000)])}\n                              data-testid={`button-add-water-${amount}`}\n                            >\n                              +{amount} ml\n                            </Button>\n                          ))}\n                        </div>\n\n                        <div className=\"bg-blue-50 p-4 rounded-lg\">\n                          <div className=\"flex space-x-3\">\n                            <AlertCircle className=\"h-5 w-5 text-blue-500 flex-shrink-0 mt-0.5\" />\n                            <div>\n                              <h4 className=\"font-medium text-blue-800\">Hydration Tip</h4>\n                              <p className=\"text-sm text-blue-700 mt-1\">\n                                It's recommended to drink at least 2000ml of water daily for optimal health. Staying hydrated helps maintain energy levels, supports digestion, and improves skin health.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                </Tabs>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <Card className=\"sticky top-4\">\n            <CardHeader>\n              <CardTitle>Daily Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Total Calories</span>\n                  <span className=\"text-sm font-medium\" data-testid=\"summary-calories\">{totals.totalCalories} kcal</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Protein</span>\n                  <span className=\"text-sm font-medium\" data-testid=\"summary-protein\">{totals.totalProtein}g</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Carbs</span>\n                  <span className=\"text-sm font-medium\" data-testid=\"summary-carbs\">{totals.totalCarbs}g</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Fat</span>\n                  <span className=\"text-sm font-medium\" data-testid=\"summary-fat\">{totals.totalFat.toFixed(1)}g</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Water Intake</span>\n                  <span className=\"text-sm font-medium\" data-testid=\"summary-water\">{waterIntake} ml</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":40391},"client/src/pages/doctors.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { Doctor } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Doctors() {\n  const { data, isLoading } = useQuery({ \n    queryKey: [\"/api/doctors\"]\n  });\n  \n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSpecialty, setSelectedSpecialty] = useState<string | null>(null);\n  \n  useEffect(() => {\n    if (data) {\n      setDoctors(data);\n    }\n  }, [data]);\n\n  // Get unique specialties for filter\n  const specialties = doctors.length \n    ? [...new Set(doctors.map(doctor => doctor.specialty))]\n    : [];\n\n  const filteredDoctors = doctors.filter(doctor => {\n    const matchesSearch = (\n      doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      doctor.specialty.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (doctor.hospital && doctor.hospital.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n    \n    const matchesSpecialty = !selectedSpecialty || doctor.specialty === selectedSpecialty;\n    \n    return matchesSearch && matchesSpecialty;\n  });\n\n  const renderStars = (rating?: number) => {\n    if (!rating) return null;\n    \n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<i key={`full-${i}`} className=\"ri-star-fill text-yellow-400\"></i>);\n    }\n    \n    if (hasHalfStar) {\n      stars.push(<i key=\"half\" className=\"ri-star-half-fill text-yellow-400\"></i>);\n    }\n    \n    const emptyStars = 5 - stars.length;\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<i key={`empty-${i}`} className=\"ri-star-line text-yellow-400\"></i>);\n    }\n    \n    return stars;\n  };\n\n  return (\n    <Layout title=\"Doctors\">\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Find Doctors</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative mb-4\">\n            <Input\n              className=\"pl-10\"\n              placeholder=\"Search doctors by name, specialty, or hospital...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n              <i className=\"ri-search-line text-gray-400\"></i>\n            </div>\n          </div>\n          \n          {specialties.length > 0 && (\n            <div className=\"flex flex-wrap gap-2 mt-4\">\n              <Badge \n                variant={!selectedSpecialty ? \"default\" : \"outline\"}\n                className=\"cursor-pointer\"\n                onClick={() => setSelectedSpecialty(null)}\n              >\n                All Specialties\n              </Badge>\n              {specialties.map(specialty => (\n                <Badge \n                  key={specialty}\n                  variant={selectedSpecialty === specialty ? \"default\" : \"outline\"}\n                  className=\"cursor-pointer\"\n                  onClick={() => setSelectedSpecialty(specialty)}\n                >\n                  {specialty}\n                </Badge>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          Array(6).fill(0).map((_, i) => (\n            <Skeleton key={i} className=\"h-64 w-full\" />\n          ))\n        ) : filteredDoctors.length > 0 ? (\n          filteredDoctors.map((doctor) => (\n            <Card key={doctor.id} className=\"overflow-hidden\">\n              <div className=\"p-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0\">\n                    {doctor.profileImage ? (\n                      <img \n                        src={doctor.profileImage} \n                        alt={doctor.name}\n                        className=\"h-16 w-16 rounded-full object-cover\" \n                      />\n                    ) : (\n                      <div className=\"h-16 w-16 rounded-full bg-primary-100 flex items-center justify-center text-primary-700\">\n                        <i className=\"ri-user-heart-line text-2xl\"></i>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"ml-4 flex-1\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">{doctor.name}</h3>\n                    <p className=\"text-sm font-medium text-primary-600\">{doctor.specialty}</p>\n                    {doctor.hospital && (\n                      <p className=\"mt-1 text-sm text-gray-500\">\n                        <i className=\"ri-hospital-line mr-1\"></i>\n                        {doctor.hospital}\n                      </p>\n                    )}\n                    {doctor.rating && (\n                      <div className=\"mt-1 flex items-center\">\n                        <div className=\"flex items-center\">\n                          {renderStars(doctor.rating)}\n                        </div>\n                        <span className=\"ml-1 text-sm text-gray-500\">\n                          {doctor.rating.toFixed(1)}\n                        </span>\n                      </div>\n                    )}\n                    {doctor.availableDays && doctor.availableDays.length > 0 && (\n                      <div className=\"mt-2\">\n                        <p className=\"text-xs text-gray-500\">Available on:</p>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {doctor.availableDays.map(day => (\n                            <span key={day} className=\"px-2 py-0.5 bg-gray-100 text-gray-700 text-xs rounded-full\">\n                              {day}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"mt-4 grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" className=\"flex justify-center items-center\">\n                    <i className=\"ri-phone-line mr-1\"></i>\n                    Contact\n                  </Button>\n                  <Button className=\"flex justify-center items-center\">\n                    <i className=\"ri-calendar-line mr-1\"></i>\n                    Book Appointment\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <i className=\"ri-user-search-line text-5xl text-gray-300\"></i>\n            <p className=\"mt-4 text-gray-500\">No doctors found matching your search criteria</p>\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":7183},"client/src/pages/first-aid.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FirstAid() {\n  const { toast } = useToast();\n\n  const handleNotifyClick = () => {\n    toast({\n      title: \"Thank you for your interest!\",\n      description: \"We'll notify you when our AI-powered First Aid Assistant becomes available.\",\n    });\n  };\n\n  return (\n    <Layout title=\"First Aid Guide\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Coming Soon Card */}\n        <Card className=\"col-span-1 lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>CareGuardian First Aid Assistant - Coming Soon!</CardTitle>\n            <CardDescription>OpenAI-powered health guidance for better emergency care</CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex flex-col items-center text-center\">\n            <div className=\"max-w-3xl\">\n              <div className=\"flex justify-center mb-8\">\n                <div className=\"w-32 h-32 rounded-full bg-gradient-to-r from-orange-100 to-green-100 flex items-center justify-center border border-green-200\">\n                  <i className=\"ri-heart-pulse-line text-6xl text-primary\"></i>\n                </div>\n              </div>\n              \n              <h2 className=\"text-2xl font-semibold mb-4\">Coming soon to CareGuardian</h2>\n              \n              <p className=\"text-gray-600 mb-6\">\n                Our OpenAI-powered First Aid Assistant will be available soon to provide you with reliable\n                first aid guidance for all medical situations. Get instant access to step-by-step \n                instructions for managing emergencies while waiting for medical help to arrive.\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                <div className=\"border border-gray-200 rounded-lg p-4 text-left\">\n                  <div className=\"flex items-center mb-2\">\n                    <i className=\"ri-robot-line text-xl text-primary mr-2\"></i>\n                    <h3 className=\"font-medium\">Powered by OpenAI</h3>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Using the latest GPT models to provide accurate first aid instructions based on international medical guidelines and best practices.\n                  </p>\n                </div>\n                \n                <div className=\"border border-gray-200 rounded-lg p-4 text-left\">\n                  <div className=\"flex items-center mb-2\">\n                    <i className=\"ri-translate-2 text-xl text-primary mr-2\"></i>\n                    <h3 className=\"font-medium\">Multi-language Support</h3>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Get guidance in multiple languages to ensure everyone can access help when they need it most.\n                  </p>\n                </div>\n                \n                <div className=\"border border-gray-200 rounded-lg p-4 text-left\">\n                  <div className=\"flex items-center mb-2\">\n                    <i className=\"ri-map-pin-line text-xl text-primary mr-2\"></i>\n                    <h3 className=\"font-medium\">Emergency Numbers</h3>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Quick access to emergency contacts including ambulance services and nearby hospitals in your area.\n                  </p>\n                </div>\n                \n                <div className=\"border border-gray-200 rounded-lg p-4 text-left\">\n                  <div className=\"flex items-center mb-2\">\n                    <i className=\"ri-phone-line text-xl text-primary mr-2\"></i>\n                    <h3 className=\"font-medium\">Offline Functionality</h3>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Basic first aid guides will be available even without internet connectivity, essential for emergencies.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-8\">\n                <h3 className=\"font-medium flex items-center text-orange-800\">\n                  <i className=\"ri-information-line mr-2\"></i>\n                  For immediate medical emergencies\n                </h3>\n                <p className=\"text-sm text-orange-700 mt-1\">\n                  Always call your local emergency services immediately in case of medical emergencies.\n                  In many regions, this is 911, 999, or 112. For general medical advice, contact your healthcare provider.\n                </p>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n                <Button onClick={handleNotifyClick} size=\"lg\" className=\"bg-gradient-to-r from-green-600 to-green-500 hover:from-green-700 hover:to-green-600\">\n                  Get Early Access\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" onClick={() => window.open('/', '_self')}>\n                  Return to Dashboard\n                </Button>\n              </div>\n              \n              <div className=\"mt-8 text-sm text-gray-500\">\n                <p>\n                  <i className=\"ri-information-line mr-1\"></i>\n                  This service is designed to provide general guidance only and is not a replacement for professional medical advice or emergency services. \n                  Always seek proper medical attention for serious conditions.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":5928},"client/src/pages/hospitals.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { MapPin, Phone, Mail, Plus, Navigation, Building2, Star } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface Hospital {\n  id: number;\n  name: string;\n  address: string;\n  city?: string;\n  state?: string;\n  phoneNumber: string;\n  email?: string;\n  rating?: number;\n  logo?: string;\n  latitude?: string;\n  longitude?: string;\n  distance?: number;\n  departments?: string[];\n  services?: string[];\n  emergencyServices?: boolean;\n  beds?: number;\n  established?: string;\n  website?: string;\n}\n\nconst hospitalFormSchema = z.object({\n  name: z.string().min(3, \"Hospital name must be at least 3 characters\"),\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State is required\"),\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  email: z.string().email(\"Valid email is required\").optional().or(z.literal(\"\")),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n  departments: z.string().optional(),\n  services: z.string().optional(),\n  emergencyServices: z.boolean().default(true),\n  beds: z.string().optional(),\n  established: z.string().optional(),\n  website: z.string().url(\"Valid URL is required\").optional().or(z.literal(\"\")),\n});\n\ntype HospitalFormData = z.infer<typeof hospitalFormSchema>;\n\nexport default function Hospitals() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [_, navigate] = useLocation();\n  const [hospitals, setHospitals] = useState<Hospital[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [userCity, setUserCity] = useState<string>(\"\");\n  const [filterMode, setFilterMode] = useState<\"all\" | \"city\" | \"nearby\">(\"all\");\n\n  const form = useForm<HospitalFormData>({\n    resolver: zodResolver(hospitalFormSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      phoneNumber: \"\",\n      email: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      departments: \"\",\n      services: \"\",\n      emergencyServices: true,\n      beds: \"\",\n      established: \"\",\n      website: \"\",\n    },\n  });\n\n  // Fetch all hospitals\n  const { data: allHospitals, isLoading } = useQuery({ \n    queryKey: [\"/api/hospitals\"]\n  });\n\n  // Search hospitals mutation\n  const searchMutation = useMutation({\n    mutationFn: async (params: { city?: string; latitude?: number; longitude?: number; maxDistance?: number }) => {\n      return await apiRequest(\"POST\", \"/api/hospitals/search\", params);\n    },\n    onSuccess: (data: any) => {\n      if (data.hospitals) {\n        setHospitals(data.hospitals);\n      }\n    },\n  });\n\n  // Create hospital mutation\n  const createHospitalMutation = useMutation({\n    mutationFn: async (data: HospitalFormData) => {\n      const hospitalData = {\n        ...data,\n        departments: data.departments ? data.departments.split(\",\").map(d => d.trim()) : [],\n        services: data.services ? data.services.split(\",\").map(s => s.trim()) : [],\n        beds: data.beds ? parseInt(data.beds) : undefined,\n        email: data.email || undefined,\n        website: data.website || undefined,\n      };\n      return await apiRequest(\"POST\", \"/api/hospitals\", hospitalData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Hospital Added\",\n        description: \"Hospital has been added successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hospitals\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Hospital\",\n        description: error.message || \"Could not add hospital.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get user location and search\n  const handleLocationSearch = () => {\n    setIsGettingLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          \n          // Search by location\n          searchMutation.mutate({ latitude, longitude, maxDistance: 50 });\n          setFilterMode(\"nearby\");\n          \n          // Update user location in background\n          try {\n            await apiRequest(\"PATCH\", \"/api/user/location\", {\n              latitude: latitude.toString(),\n              longitude: longitude.toString(),\n              city: userCity || \"Unknown\",\n              state: \"Unknown\"\n            });\n          } catch (error) {\n            console.error(\"Failed to update user location:\", error);\n          }\n          \n          setIsGettingLocation(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to retrieve your location. Please enable location services.\",\n            variant: \"destructive\",\n          });\n          setIsGettingLocation(false);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setIsGettingLocation(false);\n    }\n  };\n\n  // Get location for form\n  const handleGetFormLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          form.setValue(\"latitude\", latitude.toString());\n          form.setValue(\"longitude\", longitude.toString());\n          toast({\n            title: \"Location Captured\",\n            description: \"Hospital location has been set to your current position.\",\n          });\n        },\n        (error) => {\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to get location. Please enter manually.\",\n            variant: \"destructive\",\n          });\n        },\n        { enableHighAccuracy: true }\n      );\n    }\n  };\n\n  // Initialize hospitals and check user city\n  useEffect(() => {\n    if (allHospitals) {\n      setHospitals(allHospitals);\n    }\n  }, [allHospitals]);\n\n  // Check if user has city set\n  useEffect(() => {\n    if (user?.city) {\n      setUserCity(user.city);\n    }\n  }, [user]);\n\n  // Filter by user city\n  const handleCityFilter = () => {\n    if (userCity) {\n      searchMutation.mutate({ city: userCity });\n      setFilterMode(\"city\");\n    } else {\n      toast({\n        title: \"No City Set\",\n        description: \"Please use location search to set your city first.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleShowAll = () => {\n    if (allHospitals) {\n      setHospitals(allHospitals);\n      setFilterMode(\"all\");\n    }\n  };\n\n  const onSubmit = (data: HospitalFormData) => {\n    createHospitalMutation.mutate(data);\n  };\n\n  const renderStars = (rating?: number) => {\n    if (!rating) return null;\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={`full-${i}`} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />);\n    }\n    \n    const emptyStars = 5 - stars.length;\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-gray-300\" />);\n    }\n    \n    return <div className=\"flex items-center gap-1\">{stars}</div>;\n  };\n\n  const filteredHospitals = hospitals.filter(hospital => \n    hospital.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    hospital.address.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    hospital.city?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <Layout title=\"Hospitals\">\n      <div className=\"space-y-6\">\n        {/* Header with filters and add button */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Find Hospitals</CardTitle>\n                <CardDescription>\n                  {userCity && `Showing hospitals ${filterMode === \"city\" ? `in ${userCity}` : filterMode === \"nearby\" ? \"near you\" : \"all\"}`}\n                </CardDescription>\n              </div>\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-hospital\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Hospital\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Register New Hospital</DialogTitle>\n                    <DialogDescription>\n                      Add a new hospital to the directory with complete details.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Hospital Name *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter hospital name\" {...field} data-testid=\"input-hospital-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Address *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Street address\" {...field} data-testid=\"input-address\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"City\" {...field} data-testid=\"input-city\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"state\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>State *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"State\" {...field} data-testid=\"input-state\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"phoneNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone Number *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Phone number\" {...field} data-testid=\"input-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Email\" {...field} data-testid=\"input-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <FormLabel>Location Coordinates</FormLabel>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"latitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input placeholder=\"Latitude\" {...field} data-testid=\"input-latitude\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"longitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input placeholder=\"Longitude\" {...field} data-testid=\"input-longitude\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={handleGetFormLocation}\n                          data-testid=\"button-get-location\"\n                        >\n                          <Navigation className=\"h-4 w-4 mr-2\" />\n                          Use Current Location\n                        </Button>\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"departments\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Departments (comma-separated)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Cardiology, Neurology, Pediatrics\" {...field} data-testid=\"input-departments\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"services\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Services (comma-separated)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Emergency, Surgery, Imaging\" {...field} data-testid=\"input-services\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"beds\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Beds</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" placeholder=\"Number of beds\" {...field} data-testid=\"input-beds\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"established\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Established</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Year\" {...field} data-testid=\"input-established\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"website\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Website</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"https://\" {...field} data-testid=\"input-website\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end gap-2 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsAddDialogOpen(false)}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createHospitalMutation.isPending}\n                          data-testid=\"button-submit-hospital\"\n                        >\n                          {createHospitalMutation.isPending ? \"Adding...\" : \"Add Hospital\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Input\n              className=\"max-w-md\"\n              placeholder=\"Search hospitals by name, address, or city...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search-hospitals\"\n            />\n            \n            <div className=\"flex gap-2\">\n              <Button \n                variant={filterMode === \"all\" ? \"default\" : \"outline\"}\n                onClick={handleShowAll}\n                data-testid=\"button-show-all\"\n              >\n                Show All\n              </Button>\n              <Button \n                variant={filterMode === \"city\" ? \"default\" : \"outline\"}\n                onClick={handleCityFilter}\n                disabled={!userCity}\n                data-testid=\"button-filter-city\"\n              >\n                <Building2 className=\"h-4 w-4 mr-2\" />\n                My City {userCity && `(${userCity})`}\n              </Button>\n              <Button \n                variant={filterMode === \"nearby\" ? \"default\" : \"outline\"}\n                onClick={handleLocationSearch}\n                disabled={isGettingLocation || searchMutation.isPending}\n                data-testid=\"button-filter-nearby\"\n              >\n                <MapPin className=\"h-4 w-4 mr-2\" />\n                {isGettingLocation ? \"Getting Location...\" : \"Nearby\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Hospital Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {isLoading || searchMutation.isPending ? (\n            Array(6).fill(0).map((_, i) => (\n              <Skeleton key={i} className=\"h-80 w-full\" />\n            ))\n          ) : filteredHospitals.length > 0 ? (\n            filteredHospitals.map((hospital) => (\n              <Card key={hospital.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\" data-testid={`card-hospital-${hospital.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                      <Building2 className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-lg line-clamp-1\">{hospital.name}</CardTitle>\n                      {hospital.rating && (\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          {renderStars(hospital.rating)}\n                          <span className=\"text-sm text-gray-500\">{hospital.rating.toFixed(1)}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-start gap-2\">\n                      <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-600 line-clamp-2\">\n                        {hospital.address}\n                        {hospital.city && hospital.state && `, ${hospital.city}, ${hospital.state}`}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                      <span className=\"text-gray-600\">{hospital.phoneNumber}</span>\n                    </div>\n                    {hospital.email && (\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                        <span className=\"text-gray-600 truncate\">{hospital.email}</span>\n                      </div>\n                    )}\n                    {hospital.distance !== undefined && (\n                      <Badge variant=\"secondary\" className=\"mt-2\">\n                        {hospital.distance.toFixed(1)} km away\n                      </Badge>\n                    )}\n                  </div>\n\n                  {hospital.emergencyServices && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      Emergency Services Available\n                    </Badge>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-2 pt-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        const address = encodeURIComponent(`${hospital.address}, ${hospital.city || \"\"}`);\n                        window.open(`https://www.google.com/maps/search/?api=1&query=${address}`, '_blank');\n                      }}\n                      data-testid={`button-directions-${hospital.id}`}\n                    >\n                      <Navigation className=\"h-3 w-3 mr-1\" />\n                      Directions\n                    </Button>\n                    <Button \n                      size=\"sm\"\n                      onClick={() => navigate(`/appointments?hospitalId=${hospital.id}`)}\n                      data-testid={`button-book-${hospital.id}`}\n                    >\n                      Book Visit\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-12\">\n              <Building2 className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" />\n              <p className=\"text-gray-500 text-lg\">No hospitals found</p>\n              <p className=\"text-gray-400 text-sm mt-2\">\n                {searchTerm ? `No results for \"${searchTerm}\"` : \"Try searching by location or add a new hospital\"}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":26281},"client/src/pages/medical-records.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useState, useEffect } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MedicalRecord } from \"@shared/schema\";\n\n// Form schema for uploading a medical record\nconst recordSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  doctorName: z.string().optional(),\n  hospital: z.string().optional(),\n  date: z.string().min(1, \"Date is required\"),\n  fileUrl: z.string().optional()\n});\n\ntype RecordFormValues = z.infer<typeof recordSchema>;\n\nexport default function MedicalRecords() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [records, setRecords] = useState<MedicalRecord[]>([]);\n  const [recordTypes, setRecordTypes] = useState<string[]>([]);\n  const [selectedType, setSelectedType] = useState<string | null>(null);\n\n  // Get medical records\n  const { data, isLoading } = useQuery({ \n    queryKey: [\"/api/medical-records\"]\n  });\n\n  // Upload medical record mutation\n  const uploadRecordMutation = useMutation({\n    mutationFn: async (record: RecordFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/medical-records\", record);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medical-records\"] });\n      toast({\n        title: \"Record uploaded\",\n        description: \"Your medical record has been uploaded successfully.\",\n      });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to upload record\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Set up the form\n  const form = useForm<RecordFormValues>({\n    resolver: zodResolver(recordSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      doctorName: \"\",\n      hospital: \"\",\n      date: new Date().toISOString().split('T')[0],\n      fileUrl: \"\"\n    }\n  });\n\n  const onSubmit = (data: RecordFormValues) => {\n    uploadRecordMutation.mutate(data);\n  };\n\n  useEffect(() => {\n    if (data) {\n      setRecords(data);\n      \n      // Extract unique types from record titles (e.g., \"Blood Test\", \"X-Ray\", etc.)\n      const types = data.map((record: MedicalRecord) => {\n        const matches = record.title.match(/^(.*?)(?:\\s+Results|\\s+Report|\\s+Scan|\\:.*)?$/i);\n        return matches ? matches[1] : record.title;\n      });\n      \n      setRecordTypes([...new Set(types)]);\n    }\n  }, [data]);\n\n  const filteredRecords = selectedType \n    ? records.filter(record => record.title.startsWith(selectedType))\n    : records;\n\n  // Group records by year\n  const groupedRecords: Record<string, MedicalRecord[]> = {};\n  \n  filteredRecords.forEach(record => {\n    const year = new Date(record.date).getFullYear().toString();\n    if (!groupedRecords[year]) {\n      groupedRecords[year] = [];\n    }\n    groupedRecords[year].push(record);\n  });\n\n  // Sort years in descending order\n  const sortedYears = Object.keys(groupedRecords).sort((a, b) => parseInt(b) - parseInt(a));\n\n  return (\n    <Layout title=\"Medical Records\">\n      <div className=\"flex justify-end mb-6\">\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>Upload Medical Record</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Upload Medical Record</DialogTitle>\n              <DialogDescription>\n                Upload your medical documents for safekeeping and easy access.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Blood Test Results\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"doctorName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Doctor (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Dr. Smith\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"hospital\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Hospital/Clinic (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., City Medical Center\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"date\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Add notes or details about this record\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"fileUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>File Upload</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"file\" \n                          className=\"cursor-pointer\" \n                          accept=\".pdf,.jpg,.jpeg,.png\" \n                          onChange={(e) => {\n                            // In a real app, this would upload the file to a server\n                            // and set the returned URL to the field value\n                            if (e.target.files?.length) {\n                              field.onChange(`file_${Date.now()}`);\n                            }\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={uploadRecordMutation.isPending}\n                >\n                  {uploadRecordMutation.isPending ? \"Uploading...\" : \"Upload Record\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Medical Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recordTypes.length > 0 && (\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              <Button \n                variant={selectedType === null ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedType(null)}\n              >\n                All Records\n              </Button>\n              {recordTypes.map(type => (\n                <Button \n                  key={type}\n                  variant={selectedType === type ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedType(type)}\n                >\n                  {type}\n                </Button>\n              ))}\n            </div>\n          )}\n\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-32 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-32 w-full\" />\n            </div>\n          ) : filteredRecords.length > 0 ? (\n            <div className=\"space-y-8\">\n              {sortedYears.map(year => (\n                <div key={year}>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{year}</h3>\n                  <div className=\"space-y-3\">\n                    {groupedRecords[year].map(record => (\n                      <div key={record.id} className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex items-start\">\n                          <div className=\"flex-shrink-0\">\n                            <i className=\"ri-file-list-3-line text-xl text-gray-400\"></i>\n                          </div>\n                          <div className=\"ml-3 flex-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <h3 className=\"text-sm font-medium text-gray-900\">{record.title}</h3>\n                              <div className=\"flex items-center space-x-2\">\n                                <button className=\"text-gray-500 hover:text-gray-700\">\n                                  <i className=\"ri-eye-line\"></i>\n                                </button>\n                                <button className=\"text-gray-500 hover:text-gray-700\">\n                                  <i className=\"ri-download-line\"></i>\n                                </button>\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {new Date(record.date).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'long',\n                                day: 'numeric'\n                              })}\n                            </p>\n                            {(record.doctorName || record.hospital) && (\n                              <div className=\"mt-2 flex flex-wrap gap-x-4 text-xs text-gray-500\">\n                                {record.doctorName && (\n                                  <span className=\"flex items-center\">\n                                    <i className=\"ri-user-heart-line mr-1\"></i>\n                                    {record.doctorName}\n                                  </span>\n                                )}\n                                {record.hospital && (\n                                  <span className=\"flex items-center\">\n                                    <i className=\"ri-hospital-line mr-1\"></i>\n                                    {record.hospital}\n                                  </span>\n                                )}\n                              </div>\n                            )}\n                            {record.description && (\n                              <p className=\"mt-2 text-sm text-gray-600\">{record.description}</p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"ri-file-list-3-line text-5xl text-gray-300\"></i>\n              <p className=\"mt-4 text-gray-500\">\n                {selectedType \n                  ? `No ${selectedType} records found` \n                  : \"You don't have any medical records yet\"}\n              </p>\n              <Button onClick={() => setDialogOpen(true)} className=\"mt-4\">Upload Your First Record</Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </Layout>\n  );\n}\n","size_bytes":13509},"client/src/pages/medication-tracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { format, parseISO, isToday, isBefore } from \"date-fns\";\nimport { Calendar, Clock, Pill, Plus, Edit, Trash2, Check, X, AlertTriangle, RefreshCw } from \"lucide-react\";\nimport Layout from \"@/components/layout/Layout\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { cn } from \"@/lib/utils\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Dialog, \n  DialogClose, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Define type for a medication\ninterface Medication {\n  id: number;\n  userId: number;\n  name: string;\n  dosage: string;\n  frequency: string;\n  startDate: string;\n  endDate: string | null;\n  instructions: string | null;\n  timeOfDay: string;\n  withFood: boolean;\n  active: boolean;\n  refillDate: string | null;\n  createdAt: string;\n}\n\n// Define type for a medication log\ninterface MedicationLog {\n  id: number;\n  medicationId: number;\n  userId: number;\n  takenAt: string;\n  skipped: boolean;\n  notes: string | null;\n}\n\n// Form Schema for adding a new medication\nconst medicationFormSchema = z.object({\n  name: z.string().min(1, \"Medication name is required\"),\n  dosage: z.string().min(1, \"Dosage is required\"),\n  frequency: z.string().min(1, \"Frequency is required\"),\n  startDate: z.date(),\n  endDate: z.date().nullable().optional(),\n  instructions: z.string().nullable().optional(),\n  timeOfDay: z.string().min(1, \"Time of day is required\"),\n  withFood: z.boolean().default(false),\n  refillDate: z.date().nullable().optional(),\n});\n\n// Form Schema for logging medication\nconst medicationLogSchema = z.object({\n  takenAt: z.date(),\n  skipped: z.boolean().default(false),\n  notes: z.string().nullable().optional(),\n});\n\ntype MedicationFormValues = z.infer<typeof medicationFormSchema>;\ntype MedicationLogFormValues = z.infer<typeof medicationLogSchema>;\n\nexport default function MedicationTracker() {\n  const { toast } = useToast();\n  const [selectedMedication, setSelectedMedication] = useState<Medication | null>(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showLogForm, setShowLogForm] = useState(false);\n  \n  // Query all medications\n  const { data: medications, isLoading: isLoadingMedications } = useQuery<Medication[]>({\n    queryKey: [\"/api/medications\"],\n  });\n  \n  // Query active medications\n  const { data: activeMedications, isLoading: isLoadingActive } = useQuery<Medication[]>({\n    queryKey: [\"/api/medications/active\"],\n  });\n  \n  // Query medication logs for selected medication\n  const { data: medicationLogs, isLoading: isLoadingLogs } = useQuery<MedicationLog[]>({\n    queryKey: [\"/api/medications\", selectedMedication?.id, \"logs\"],\n    enabled: !!selectedMedication,\n  });\n  \n  // Form for adding/editing medication\n  const form = useForm<MedicationFormValues>({\n    resolver: zodResolver(medicationFormSchema),\n    defaultValues: {\n      name: \"\",\n      dosage: \"\",\n      frequency: \"daily\",\n      timeOfDay: \"morning\",\n      withFood: false,\n      instructions: \"\",\n    },\n  });\n  \n  // Form for logging medication\n  const logForm = useForm<MedicationLogFormValues>({\n    resolver: zodResolver(medicationLogSchema),\n    defaultValues: {\n      takenAt: new Date(),\n      skipped: false,\n      notes: \"\",\n    },\n  });\n  \n  // Create medication mutation\n  const createMedicationMutation = useMutation({\n    mutationFn: async (medication: MedicationFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/medications\", medication);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications/active\"] });\n      setShowAddForm(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Medication added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add medication\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Update medication mutation\n  const updateMedicationMutation = useMutation({\n    mutationFn: async (medication: MedicationFormValues & { id: number }) => {\n      const { id, ...data } = medication;\n      const res = await apiRequest(\"PATCH\", `/api/medications/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications/active\"] });\n      setIsEditMode(false);\n      setSelectedMedication(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Medication updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update medication\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Toggle medication active status mutation\n  const toggleMedicationMutation = useMutation({\n    mutationFn: async ({ id, active }: { id: number; active: boolean }) => {\n      const res = await apiRequest(\"PATCH\", `/api/medications/${id}/toggle`, { active });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications/active\"] });\n      toast({\n        title: \"Success\",\n        description: \"Medication status updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update medication status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Log medication mutation\n  const logMedicationMutation = useMutation({\n    mutationFn: async ({ id, log }: { id: number; log: MedicationLogFormValues }) => {\n      const res = await apiRequest(\"POST\", `/api/medications/${id}/logs`, log);\n      return await res.json();\n    },\n    onSuccess: () => {\n      if (selectedMedication) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/medications\", selectedMedication.id, \"logs\"] });\n      }\n      setShowLogForm(false);\n      logForm.reset({\n        takenAt: new Date(),\n        skipped: false,\n        notes: \"\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Medication log added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to log medication\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Handle form submission for add/edit medication\n  const onSubmit = (values: MedicationFormValues) => {\n    if (isEditMode && selectedMedication) {\n      updateMedicationMutation.mutate({ ...values, id: selectedMedication.id });\n    } else {\n      createMedicationMutation.mutate(values);\n    }\n  };\n  \n  // Handle form submission for logging medication\n  const onLogSubmit = (values: MedicationLogFormValues) => {\n    if (selectedMedication) {\n      logMedicationMutation.mutate({ id: selectedMedication.id, log: values });\n    }\n  };\n  \n  // Function to toggle medication status\n  const toggleMedicationStatus = (medication: Medication) => {\n    toggleMedicationMutation.mutate({\n      id: medication.id,\n      active: !medication.active,\n    });\n  };\n  \n  // Function to edit a medication\n  const editMedication = (medication: Medication) => {\n    setSelectedMedication(medication);\n    setIsEditMode(true);\n    \n    // Convert date strings to Date objects\n    const formValues = {\n      ...medication,\n      startDate: parseISO(medication.startDate),\n      endDate: medication.endDate ? parseISO(medication.endDate) : undefined,\n      refillDate: medication.refillDate ? parseISO(medication.refillDate) : undefined,\n    };\n    \n    form.reset(formValues);\n    setShowAddForm(true);\n  };\n  \n  // Function to show the log form for a medication\n  const showLogFormForMedication = (medication: Medication) => {\n    setSelectedMedication(medication);\n    setShowLogForm(true);\n    logForm.reset({\n      takenAt: new Date(),\n      skipped: false,\n      notes: \"\",\n    });\n  };\n  \n  // Function to get medications that need to be taken today\n  const getTodaysMedications = () => {\n    if (!activeMedications) return [];\n    \n    return activeMedications.filter(med => {\n      const startDate = parseISO(med.startDate);\n      const endDate = med.endDate ? parseISO(med.endDate) : null;\n      \n      return (\n        // Started on or before today\n        isBefore(startDate, new Date()) || isToday(startDate)\n      ) && (\n        // Has not ended, or ends on or after today\n        !endDate || isToday(endDate) || isBefore(new Date(), endDate)\n      );\n    });\n  };\n  \n  // Function to check if a medication has been taken today\n  const isMedicationTakenToday = (medicationId: number) => {\n    if (!medicationLogs) return false;\n    \n    return medicationLogs.some(log => {\n      const logDate = parseISO(log.takenAt);\n      return isToday(logDate) && !log.skipped;\n    });\n  };\n  \n  // Helper to determine if a refill reminder is needed\n  const needsRefill = (medication: Medication) => {\n    if (!medication.refillDate) return false;\n    \n    const refillDate = parseISO(medication.refillDate);\n    const today = new Date();\n    const oneWeek = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n    \n    return refillDate.getTime() - today.getTime() <= oneWeek;\n  };\n  \n  // Reset form when closing add form\n  const closeAddForm = () => {\n    setShowAddForm(false);\n    setIsEditMode(false);\n    setSelectedMedication(null);\n    form.reset();\n  };\n  \n  // When selectedMedication changes, update form values if in edit mode\n  useEffect(() => {\n    if (selectedMedication && isEditMode) {\n      // Convert date strings to Date objects\n      const formValues = {\n        ...selectedMedication,\n        startDate: parseISO(selectedMedication.startDate),\n        endDate: selectedMedication.endDate ? parseISO(selectedMedication.endDate) : undefined,\n        refillDate: selectedMedication.refillDate ? parseISO(selectedMedication.refillDate) : undefined,\n      };\n      \n      form.reset(formValues);\n    }\n  }, [selectedMedication, isEditMode, form]);\n  \n  return (\n    <Layout title=\"Medication Tracker\">\n      <div className=\"container mx-auto p-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-3xl font-bold\">Medication Tracker</h1>\n          <Button \n            onClick={() => {\n              setShowAddForm(true);\n              setIsEditMode(false);\n              form.reset();\n            }}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Medication\n          </Button>\n        </div>\n        \n        <Tabs defaultValue=\"today\" className=\"w-full\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"today\">Today's Medications</TabsTrigger>\n            <TabsTrigger value=\"all\">All Medications</TabsTrigger>\n          </TabsList>\n          \n          {/* Today's Medications Tab */}\n          <TabsContent value=\"today\" className=\"space-y-4\">\n            {isLoadingActive ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n              </div>\n            ) : getTodaysMedications().length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {getTodaysMedications().map((medication) => (\n                  <Card key={medication.id} className={cn(\n                    \"relative overflow-hidden\",\n                    needsRefill(medication) && \"border-yellow-400\"\n                  )}>\n                    {needsRefill(medication) && (\n                      <div className=\"absolute top-0 right-0 p-1 bg-yellow-400 text-white text-xs rounded-bl-md flex items-center\">\n                        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                        Refill Soon\n                      </div>\n                    )}\n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"flex items-center\">\n                          <Pill className=\"h-5 w-5 mr-2 text-primary\" />\n                          {medication.name}\n                        </CardTitle>\n                        <Badge variant={isMedicationTakenToday(medication.id) ? \"default\" : \"outline\"} className={isMedicationTakenToday(medication.id) ? \"bg-green-500\" : \"\"}>\n                          {isMedicationTakenToday(medication.id) ? \"Taken\" : \"Pending\"}\n                        </Badge>\n                      </div>\n                      <CardDescription>\n                        {medication.dosage} - {medication.timeOfDay}\n                        {medication.withFood && \" (with food)\"}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pb-2\">\n                      <div className=\"text-sm space-y-1\">\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                          <span>Frequency: {medication.frequency}</span>\n                        </div>\n                        {medication.instructions && (\n                          <div className=\"text-muted-foreground\">\n                            {medication.instructions}\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                    <CardFooter className=\"flex justify-between pt-0\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => showLogFormForMedication(medication)}\n                      >\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        Log Intake\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => editMedication(medication)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 bg-muted/40 rounded-lg\">\n                <Pill className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-xl font-medium mb-2\">No Medications For Today</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  You don't have any active medications to take today.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowAddForm(true);\n                    setIsEditMode(false);\n                    form.reset();\n                  }}\n                >\n                  Add Your First Medication\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n          \n          {/* All Medications Tab */}\n          <TabsContent value=\"all\">\n            {isLoadingMedications ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n              </div>\n            ) : medications && medications.length > 0 ? (\n              <div className=\"space-y-4\">\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  {medications.map((medication) => (\n                    <AccordionItem key={medication.id} value={medication.id.toString()}>\n                      <AccordionTrigger className=\"hover:no-underline\">\n                        <div className=\"flex items-center justify-between w-full pr-4\">\n                          <div className=\"flex items-center\">\n                            <div className={cn(\n                              \"h-3 w-3 rounded-full mr-3\",\n                              medication.active ? \"bg-green-500\" : \"bg-gray-300\"\n                            )} />\n                            <span>{medication.name}</span>\n                          </div>\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <span className=\"mr-2\">{medication.dosage}</span>\n                            <Badge variant=\"outline\" className=\"mr-2\">\n                              {medication.frequency}\n                            </Badge>\n                          </div>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"bg-muted/30 p-4 rounded-md\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                            <div>\n                              <h4 className=\"text-sm font-medium mb-2\">Medication Details</h4>\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex items-center\">\n                                  <Clock className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                                  <span>Time: {medication.timeOfDay}</span>\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                                  <span>\n                                    Start: {format(parseISO(medication.startDate), \"PPP\")}\n                                  </span>\n                                </div>\n                                {medication.endDate && (\n                                  <div className=\"flex items-center\">\n                                    <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                                    <span>\n                                      End: {format(parseISO(medication.endDate), \"PPP\")}\n                                    </span>\n                                  </div>\n                                )}\n                                {medication.refillDate && (\n                                  <div className=\"flex items-center\">\n                                    <RefreshCw className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                                    <span>\n                                      Refill: {format(parseISO(medication.refillDate), \"PPP\")}\n                                    </span>\n                                  </div>\n                                )}\n                                {medication.withFood && (\n                                  <div className=\"flex items-center\">\n                                    <span className=\"text-muted-foreground\">Take with food</span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                            \n                            {medication.instructions && (\n                              <div>\n                                <h4 className=\"text-sm font-medium mb-2\">Instructions</h4>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {medication.instructions}\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex space-x-2 mt-4\">\n                            <div className=\"flex-1\">\n                              <Switch\n                                checked={medication.active}\n                                onCheckedChange={() => toggleMedicationStatus(medication)}\n                                id={`active-${medication.id}`}\n                              />\n                              <Label\n                                htmlFor={`active-${medication.id}`}\n                                className=\"ml-2\"\n                              >\n                                {medication.active ? \"Active\" : \"Inactive\"}\n                              </Label>\n                            </div>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => showLogFormForMedication(medication)}\n                            >\n                              Log\n                            </Button>\n                            \n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => editMedication(medication)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 bg-muted/40 rounded-lg\">\n                <Pill className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-xl font-medium mb-2\">No Medications Added</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  You haven't added any medications to track yet.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowAddForm(true);\n                    setIsEditMode(false);\n                    form.reset();\n                  }}\n                >\n                  Add Your First Medication\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n        \n        {/* Add/Edit Medication Dialog */}\n        <Dialog open={showAddForm} onOpenChange={closeAddForm}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>{isEditMode ? \"Edit Medication\" : \"Add New Medication\"}</DialogTitle>\n              <DialogDescription>\n                {isEditMode \n                  ? \"Update the details of your medication.\"\n                  : \"Add details about your medication to track.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Medication Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter medication name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"dosage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Dosage</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"E.g., 500mg, 1 tablet\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"frequency\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Frequency</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                            className=\"flex flex-col space-y-1\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"daily\" id=\"daily\" />\n                              <Label htmlFor=\"daily\">Daily</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"twice daily\" id=\"twice-daily\" />\n                              <Label htmlFor=\"twice-daily\">Twice Daily</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"weekly\" id=\"weekly\" />\n                              <Label htmlFor=\"weekly\">Weekly</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"as needed\" id=\"as-needed\" />\n                              <Label htmlFor=\"as-needed\">As Needed</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"timeOfDay\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Time of Day</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                            className=\"flex flex-col space-y-1\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"morning\" id=\"morning\" />\n                              <Label htmlFor=\"morning\">Morning</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"afternoon\" id=\"afternoon\" />\n                              <Label htmlFor=\"afternoon\">Afternoon</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"evening\" id=\"evening\" />\n                              <Label htmlFor=\"evening\">Evening</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"night\" id=\"night\" />\n                              <Label htmlFor=\"night\">Night</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startDate\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>Start Date</FormLabel>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant={\"outline\"}\n                                className={cn(\n                                  \"pl-3 text-left font-normal\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                              >\n                                {field.value ? (\n                                  format(field.value, \"PPP\")\n                                ) : (\n                                  <span>Pick a date</span>\n                                )}\n                                <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={field.value}\n                              onSelect={field.onChange}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"endDate\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-col\">\n                        <FormLabel>End Date (Optional)</FormLabel>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant={\"outline\"}\n                                className={cn(\n                                  \"pl-3 text-left font-normal\",\n                                  !field.value && \"text-muted-foreground\"\n                                )}\n                              >\n                                {field.value ? (\n                                  format(field.value, \"PPP\")\n                                ) : (\n                                  <span>No end date</span>\n                                )}\n                                <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={field.value ?? undefined}\n                              onSelect={field.onChange}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"refillDate\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-col\">\n                      <FormLabel>Refill Date (Optional)</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant={\"outline\"}\n                              className={cn(\n                                \"pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                            >\n                              {field.value ? (\n                                format(field.value, \"PPP\")\n                              ) : (\n                                <span>No refill date</span>\n                              )}\n                              <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <CalendarComponent\n                            mode=\"single\"\n                            selected={field.value ?? undefined}\n                            onSelect={field.onChange}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"withFood\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>Take with food</FormLabel>\n                        <FormDescription>\n                          Check this if the medication should be taken with food\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"instructions\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Special Instructions (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"E.g., Take on an empty stomach, Avoid alcohol\"\n                          className=\"resize-none\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button type=\"submit\" disabled={createMedicationMutation.isPending || updateMedicationMutation.isPending}>\n                    {createMedicationMutation.isPending || updateMedicationMutation.isPending ? (\n                      <span className=\"flex items-center\">\n                        <div className=\"animate-spin h-4 w-4 mr-2 border-2 border-current border-t-transparent rounded-full\"></div>\n                        Processing...\n                      </span>\n                    ) : (\n                      <span>{isEditMode ? \"Update\" : \"Add\"} Medication</span>\n                    )}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        \n        {/* Log Medication Dialog */}\n        <Dialog open={showLogForm} onOpenChange={setShowLogForm}>\n          <DialogContent className=\"sm:max-w-[400px]\">\n            <DialogHeader>\n              <DialogTitle>Log Medication</DialogTitle>\n              <DialogDescription>\n                {selectedMedication && (\n                  <span>Record when you took {selectedMedication.name}</span>\n                )}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...logForm}>\n              <form onSubmit={logForm.handleSubmit(onLogSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={logForm.control}\n                  name=\"takenAt\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-col\">\n                      <FormLabel>Date & Time Taken</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant={\"outline\"}\n                              className={cn(\n                                \"pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                            >\n                              {field.value ? (\n                                format(field.value, \"PPP p\")\n                              ) : (\n                                <span>Pick a date and time</span>\n                              )}\n                              <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <CalendarComponent\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            initialFocus\n                            defaultMonth={field.value}\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={logForm.control}\n                  name=\"skipped\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>I skipped this dose</FormLabel>\n                        <FormDescription>\n                          Check this if you didn't take the medication\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={logForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Any relevant notes or reactions\"\n                          className=\"resize-none\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button type=\"submit\" disabled={logMedicationMutation.isPending}>\n                    {logMedicationMutation.isPending ? (\n                      <span className=\"flex items-center\">\n                        <div className=\"animate-spin h-4 w-4 mr-2 border-2 border-current border-t-transparent rounded-full\"></div>\n                        Logging...\n                      </span>\n                    ) : (\n                      <span>Save Log</span>\n                    )}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        \n        {/* View Medication Logs */}\n        {selectedMedication && medicationLogs && medicationLogs.length > 0 && !showAddForm && !showLogForm && (\n          <Dialog open={!!selectedMedication && !showAddForm && !showLogForm} onOpenChange={() => setSelectedMedication(null)}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Medication History</DialogTitle>\n                <DialogDescription>\n                  History of when you took {selectedMedication.name}\n                </DialogDescription>\n              </DialogHeader>\n              \n              <ScrollArea className=\"h-[300px] rounded-md border p-4\">\n                <div className=\"space-y-4\">\n                  {medicationLogs.map((log) => (\n                    <div key={log.id} className=\"border-b pb-3 last:border-0\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <div className=\"font-medium flex items-center\">\n                            {log.skipped ? (\n                              <X className=\"h-4 w-4 text-destructive mr-1\" />\n                            ) : (\n                              <Check className=\"h-4 w-4 text-green-500 mr-1\" />\n                            )}\n                            {format(parseISO(log.takenAt), \"PPP p\")}\n                          </div>\n                          {log.skipped ? (\n                            <div className=\"text-sm text-destructive\">Skipped dose</div>\n                          ) : (\n                            <div className=\"text-sm text-green-600\">Taken</div>\n                          )}\n                        </div>\n                        <Badge variant=\"outline\">\n                          {format(parseISO(log.takenAt), \"EEE\")}\n                        </Badge>\n                      </div>\n                      {log.notes && (\n                        <div className=\"mt-1 text-sm text-muted-foreground\">\n                          {log.notes}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              \n              <DialogFooter>\n                <Button \n                  variant=\"secondary\"\n                  onClick={() => setSelectedMedication(null)}\n                >\n                  Close\n                </Button>\n                <Button \n                  onClick={() => showLogFormForMedication(selectedMedication)}\n                >\n                  Add New Log\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":44193},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\nconst profileFormSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phoneNumber: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.string().optional(),\n  address: z.string().optional(),\n});\n\nconst securityFormSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst notificationFormSchema = z.object({\n  emailNotifications: z.boolean(),\n  smsNotifications: z.boolean(),\n  appointmentReminders: z.boolean(),\n  medicationReminders: z.boolean(),\n  healthTips: z.boolean(),\n});\n\ntype ProfileFormValues = z.infer<typeof profileFormSchema>;\ntype SecurityFormValues = z.infer<typeof securityFormSchema>;\ntype NotificationFormValues = z.infer<typeof notificationFormSchema>;\n\nexport default function Settings() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [isDeleteAccountDialogOpen, setIsDeleteAccountDialogOpen] = useState(false);\n\n  // Profile form\n  const profileForm = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      fullName: user?.fullName || \"\",\n      email: user?.email || \"\",\n      phoneNumber: user?.phoneNumber || \"\",\n      dateOfBirth: user?.dateOfBirth || \"\",\n      gender: user?.gender || \"\",\n      address: user?.address || \"\",\n    },\n  });\n\n  const onProfileSubmit = (data: ProfileFormValues) => {\n    // In a full implementation, this would call an API to update the profile\n    toast({\n      title: \"Profile updated\",\n      description: \"Your profile information has been updated successfully.\",\n    });\n  };\n\n  // Security form\n  const securityForm = useForm<SecurityFormValues>({\n    resolver: zodResolver(securityFormSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSecuritySubmit = (data: SecurityFormValues) => {\n    // In a full implementation, this would call an API to update the password\n    toast({\n      title: \"Password updated\",\n      description: \"Your password has been changed successfully.\",\n    });\n    securityForm.reset();\n  };\n\n  // Notification form\n  const notificationForm = useForm<NotificationFormValues>({\n    resolver: zodResolver(notificationFormSchema),\n    defaultValues: {\n      emailNotifications: true,\n      smsNotifications: false,\n      appointmentReminders: true,\n      medicationReminders: true,\n      healthTips: true,\n    },\n  });\n\n  const onNotificationSubmit = (data: NotificationFormValues) => {\n    // In a full implementation, this would call an API to update notification settings\n    toast({\n      title: \"Notification settings updated\",\n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <Layout title=\"Settings\">\n      <Tabs defaultValue=\"profile\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n        </TabsList>\n        \n        {/* Profile Settings */}\n        <TabsContent value=\"profile\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n              <CardDescription>\n                Update your personal information and profile picture\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 rounded-full bg-primary-100 flex items-center justify-center text-primary-700 text-2xl font-semibold\">\n                      {user?.fullName?.charAt(0) || user?.username.charAt(0)}\n                    </div>\n                    <Button variant=\"outline\" type=\"button\">\n                      Change Avatar\n                    </Button>\n                  </div>\n                  \n                  <FormField\n                    control={profileForm.control}\n                    name=\"fullName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Your full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Your email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={profileForm.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your phone number\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"dateOfBirth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date of Birth</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={profileForm.control}\n                      name=\"gender\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Gender</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select gender\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"male\">Male</SelectItem>\n                              <SelectItem value=\"female\">Female</SelectItem>\n                              <SelectItem value=\"non-binary\">Non-binary</SelectItem>\n                              <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={profileForm.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Your address\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\">Save Changes</Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Security Settings */}\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n              <CardDescription>\n                Manage your account security and password\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Form {...securityForm}>\n                <form onSubmit={securityForm.handleSubmit(onSecuritySubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={securityForm.control}\n                    name=\"currentPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Current Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"Enter your current password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={securityForm.control}\n                    name=\"newPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>New Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"Enter your new password\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Password must be at least 8 characters long\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={securityForm.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Confirm New Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"Confirm your new password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\">Update Password</Button>\n                  </div>\n                </form>\n              </Form>\n              \n              <div className=\"pt-6 border-t\">\n                <h3 className=\"text-lg font-medium\">Two-Factor Authentication</h3>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Add an extra layer of security to your account\n                </p>\n                \n                <div className=\"flex items-center justify-between mt-4\">\n                  <div>\n                    <Label htmlFor=\"two-factor\">Enable Two-Factor Authentication</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Require a verification code when logging in\n                    </p>\n                  </div>\n                  <Switch id=\"two-factor\" />\n                </div>\n              </div>\n              \n              <div className=\"pt-6 border-t\">\n                <h3 className=\"text-lg font-medium\">Account Actions</h3>\n                \n                <div className=\"space-y-4 mt-4\">\n                  <Button variant=\"outline\" className=\"w-full\" onClick={handleLogout}>\n                    <i className=\"ri-logout-box-line mr-2\"></i>\n                    Log Out\n                  </Button>\n                  \n                  <Button variant=\"destructive\" className=\"w-full\" onClick={() => setIsDeleteAccountDialogOpen(true)}>\n                    <i className=\"ri-delete-bin-line mr-2\"></i>\n                    Delete Account\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Notification Settings */}\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Settings</CardTitle>\n              <CardDescription>\n                Manage how you receive notifications and alerts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...notificationForm}>\n                <form onSubmit={notificationForm.handleSubmit(onNotificationSubmit)} className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"pb-4 border-b\">\n                      <h3 className=\"text-lg font-medium\">Notification Channels</h3>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        Choose how you'd like to receive notifications\n                      </p>\n                      \n                      <div className=\"space-y-4 mt-4\">\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"emailNotifications\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center justify-between\">\n                              <div>\n                                <FormLabel>Email Notifications</FormLabel>\n                                <FormDescription>Receive notifications via email</FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch \n                                  checked={field.value} \n                                  onCheckedChange={field.onChange} \n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={notificationForm.control}\n                          name=\"smsNotifications\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center justify-between\">\n                              <div>\n                                <FormLabel>SMS Notifications</FormLabel>\n                                <FormDescription>Receive notifications via text message</FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch \n                                  checked={field.value} \n                                  onCheckedChange={field.onChange} \n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"pb-4 border-b\">\n                      <h3 className=\"text-lg font-medium\">Notification Types</h3>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        Select which types of notifications you want to receive\n                      </p>\n                      \n                      <div className=\"space-y-4 mt-4\">\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"appointmentReminders\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center justify-between\">\n                              <div>\n                                <FormLabel>Appointment Reminders</FormLabel>\n                                <FormDescription>Reminders about upcoming appointments</FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch \n                                  checked={field.value} \n                                  onCheckedChange={field.onChange} \n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={notificationForm.control}\n                          name=\"medicationReminders\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center justify-between\">\n                              <div>\n                                <FormLabel>Medication Reminders</FormLabel>\n                                <FormDescription>Reminders to take your medications</FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch \n                                  checked={field.value} \n                                  onCheckedChange={field.onChange} \n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={notificationForm.control}\n                          name=\"healthTips\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center justify-between\">\n                              <div>\n                                <FormLabel>Health Tips & News</FormLabel>\n                                <FormDescription>Receive health tips and news updates</FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch \n                                  checked={field.value} \n                                  onCheckedChange={field.onChange} \n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\">Save Preferences</Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n          \n          <Alert className=\"mt-6\">\n            <AlertTitle>Email Verification Required</AlertTitle>\n            <AlertDescription>\n              To receive email notifications, please verify your email address.\n              <Button variant=\"link\" className=\"p-0 h-auto font-semibold ml-1\">\n                Resend verification email\n              </Button>\n            </AlertDescription>\n          </Alert>\n        </TabsContent>\n      </Tabs>\n    </Layout>\n  );\n}\n","size_bytes":20966},"client/src/pages/subscription.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport Layout from \"@/components/layout/Layout\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Check, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Redirect } from \"wouter\";\n\n// Define subscription plan types\ntype SubscriptionPlan = {\n  id: string;\n  name: string;\n  price: string;\n  description: string;\n  features: string[];\n  popular?: boolean;\n  buttonText: string;\n};\n\nexport default function Subscription() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Subscription plans data\n  const subscriptionPlans: SubscriptionPlan[] = [\n    {\n      id: \"basic\",\n      name: \"Basic\",\n      price: \"₹499/month\",\n      description: \"Essential healthcare services for individuals\",\n      features: [\n        \"24/7 Chat Support\",\n        \"Basic Health Monitoring\",\n        \"Access to Medical Records\",\n        \"Emergency Contact Services\"\n      ],\n      buttonText: \"Coming Soon\"\n    },\n    {\n      id: \"premium\",\n      name: \"Premium\",\n      price: \"₹999/month\",\n      description: \"Enhanced healthcare for individuals and families\",\n      features: [\n        \"All Basic features\",\n        \"Priority Doctor Appointments\",\n        \"Dedicated Health Manager\",\n        \"Monthly Health Check-ups\",\n        \"Family Coverage (up to 4 members)\"\n      ],\n      popular: true,\n      buttonText: \"Coming Soon\"\n    },\n    {\n      id: \"enterprise\",\n      name: \"Enterprise\",\n      price: \"₹2499/month\",\n      description: \"Complete healthcare solution for businesses\",\n      features: [\n        \"All Premium features\",\n        \"Corporate Wellness Programs\",\n        \"Employee Health Tracking\",\n        \"Quarterly Health Webinars\",\n        \"Customized Healthcare Solutions\",\n        \"Dedicated Account Manager\"\n      ],\n      buttonText: \"Coming Soon\"\n    }\n  ];\n\n  const handleSubscribe = (planId: string) => {\n    toast({\n      title: \"Subscription Coming Soon\",\n      description: \"This feature will be available soon. Thank you for your interest!\",\n      variant: \"default\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Layout title=\"Subscription Plans\">\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/auth\" />;\n  }\n\n  return (\n    <Layout title=\"Subscription Plans\">\n      <div className=\"container mx-auto py-8 px-4\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold mb-4\">Choose Your Healthcare Plan</h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Select a subscription plan that suits your healthcare needs. Our plans are designed to provide comprehensive healthcare services at affordable prices.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {subscriptionPlans.map((plan) => (\n            <Card key={plan.id} className={`flex flex-col h-full ${plan.popular ? 'border-primary border-2 shadow-lg' : ''}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>{plan.name}</CardTitle>\n                  {plan.popular && (\n                    <Badge variant=\"default\" className=\"bg-primary hover:bg-primary\">\n                      Popular\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"mt-3\">\n                  <span className=\"text-3xl font-bold\">{plan.price}</span>\n                </div>\n                <CardDescription>{plan.description}</CardDescription>\n              </CardHeader>\n              <CardContent className=\"flex-grow\">\n                <ul className=\"space-y-2\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <Check size={18} className=\"mr-2 text-green-500 mt-0.5 flex-shrink-0\" />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={() => handleSubscribe(plan.id)} \n                  className=\"w-full\" \n                  variant={plan.popular ? \"default\" : \"outline\"}\n                >\n                  {plan.buttonText}\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-16 max-w-3xl mx-auto bg-muted p-6 rounded-lg\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"text-primary mr-4 flex-shrink-0 mt-1\" />\n            <div>\n              <h3 className=\"font-medium text-lg mb-2\">Coming Soon: Subscription Services</h3>\n              <p className=\"text-muted-foreground\">\n                Our subscription services are currently under development. We're working hard to bring you the best healthcare subscription options with premium benefits and features.\n                Thank you for your patience!\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":5468},"client/src/components/dashboard/AppointmentsCard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface AppointmentTypes {\n  id: number;\n  doctorName: string;\n  specialty: string;\n  date: string;\n  time: string;\n  location: string;\n  isVirtual: boolean;\n}\n\nexport default function AppointmentsCard() {\n  const [_, navigate] = useLocation();\n  const { data, isLoading, error } = useQuery({ \n    queryKey: [\"/api/appointments\"] \n  });\n  \n  const [appointments, setAppointments] = useState<AppointmentTypes[]>([]);\n\n  useEffect(() => {\n    if (data && Array.isArray(data) && data.length > 0) {\n      const now = new Date();\n      \n      // Filter for upcoming appointments (not cancelled, future dates only)\n      const upcomingAppointments = (data as any[])\n        .filter((appointment: any) => {\n          const appointmentDate = new Date(appointment.date);\n          return appointment.status !== 'cancelled' && appointmentDate > now;\n        })\n        .slice(0, 3); // Show only next 3 appointments\n      \n      const formattedAppointments = upcomingAppointments.map((appointment: any) => {\n        return {\n          id: appointment.id,\n          doctorName: appointment.doctorName || \"Unknown Doctor\",\n          specialty: appointment.doctorSpecialty || \"General\",\n          date: new Date(appointment.date).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          }),\n          time: appointment.time,\n          location: appointment.isVirtual ? \"Virtual Consultation\" : appointment.hospitalName || \"Hospital\",\n          isVirtual: appointment.isVirtual\n        };\n      });\n      \n      setAppointments(formattedAppointments);\n    } else if (!isLoading) {\n      setAppointments([]);\n    }\n  }, [data, isLoading]);\n\n  const handleBookNewAppointment = () => {\n    navigate(\"/appointments\");\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-medium text-gray-900\">Upcoming Appointments</h2>\n          <a href=\"/appointments\" className=\"text-sm font-medium text-primary-600 hover:text-primary-500\">View all</a>\n        </div>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <>\n              <Skeleton className=\"h-24 w-full\" />\n              <Skeleton className=\"h-24 w-full\" />\n            </>\n          ) : appointments.length === 0 ? (\n            <div className=\"text-center py-8\" data-testid=\"empty-appointments\">\n              <i className=\"ri-calendar-line text-4xl text-gray-400 mb-2\"></i>\n              <p className=\"text-gray-500 text-sm\">No appointments booked</p>\n              <p className=\"text-gray-400 text-xs mt-1\">Book your first appointment to see it here</p>\n            </div>\n          ) : (\n            appointments.map((appointment) => (\n              <div key={appointment.id} className=\"bg-gray-50 p-4 rounded-lg\" data-testid={`appointment-${appointment.id}`}>\n                <div className=\"flex justify-between\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\" data-testid=\"appointment-doctor-name\">{appointment.doctorName}</p>\n                    <p className=\"text-sm text-gray-500\" data-testid=\"appointment-specialty\">{appointment.specialty}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900\" data-testid=\"appointment-date\">{appointment.date}</p>\n                    <p className=\"text-sm text-gray-500\" data-testid=\"appointment-time\">{appointment.time}</p>\n                  </div>\n                </div>\n                <div className=\"mt-3 flex justify-between items-center\">\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <i className={`${appointment.isVirtual ? 'ri-computer-line' : 'ri-map-pin-line'} mr-1`}></i>\n                    <span data-testid=\"appointment-location\">{appointment.location}</span>\n                  </div>\n                  <div>\n                    <button \n                      className=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-primary-700 bg-primary-100 hover:bg-primary-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n                      data-testid={`button-${appointment.isVirtual ? 'join-call' : 'reschedule'}`}\n                    >\n                      {appointment.isVirtual ? 'Join Call' : 'Reschedule'}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        <div className=\"mt-6\">\n          <Button \n            className=\"w-full\"\n            onClick={handleBookNewAppointment}\n            data-testid=\"button-book-appointment\"\n          >\n            Book New Appointment\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5181},"client/src/components/dashboard/ChatbotCard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: number;\n  message: string;\n  isUserMessage: boolean;\n  timestamp: Date;\n}\n\nexport default function ChatbotCard() {\n  const [message, setMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState<Message[]>([]);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  \n  // Get the chat history\n  const { data: historyData, isLoading } = useQuery({\n    queryKey: [\"/api/chat/history\"],\n    // Don't show a spinner on initial load, we have predefined welcome message\n    staleTime: 0,\n  });\n  \n  // Mutation for sending messages\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat/message\", {\n        message,\n        isUserMessage: true\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/history\"] });\n      // Add the messages to the chat history\n      setChatHistory(prev => [\n        ...prev,\n        data.userMessage,\n        data.botResponse\n      ]);\n    },\n  });\n  \n  // Update chat history when data loads\n  useEffect(() => {\n    if (historyData) {\n      setChatHistory(historyData);\n    }\n  }, [historyData]);\n  \n  // Initialize with a welcome message if there's no history\n  useEffect(() => {\n    if (!isLoading && (!historyData || historyData.length === 0)) {\n      setChatHistory([\n        {\n          id: 0,\n          message: \"Hello! I'm your virtual first aid assistant. How can I help you today?\",\n          isUserMessage: false,\n          timestamp: new Date()\n        }\n      ]);\n    }\n  }, [isLoading, historyData]);\n  \n  // Scroll to bottom when messages change\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [chatHistory]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!message.trim()) return;\n    \n    sendMessageMutation.mutate(message);\n    setMessage(\"\");\n  };\n  \n  // Topic suggestions\n  const topics = [\"CPR Instructions\", \"Allergy Reaction\", \"Bleeding Control\"];\n\n  const handleTopicClick = (topic: string) => {\n    sendMessageMutation.mutate(`Tell me about ${topic}`);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-medium text-gray-900\">First Aid Assistant</h2>\n          <button className=\"text-gray-400 hover:text-gray-500\">\n            <i className=\"ri-information-line\"></i>\n          </button>\n        </div>\n        <ScrollArea \n          className=\"h-64 border border-gray-200 rounded-lg p-3 mb-4 bg-gray-50\"\n          ref={scrollAreaRef}\n        >\n          <div className=\"space-y-2\">\n            {chatHistory.map((msg) => (\n              <div \n                key={msg.id}\n                className={`chatbot-message p-3 max-w-[75%] mb-2 ${\n                  msg.isUserMessage \n                    ? 'user-message bg-primary-100 ml-auto rounded-[16px_16px_0_16px]' \n                    : 'bot-message bg-gray-100 mr-auto rounded-[16px_16px_16px_0]'\n                }`}\n              >\n                <p className=\"text-sm whitespace-pre-line\">{msg.message}</p>\n              </div>\n            ))}\n            \n            {sendMessageMutation.isPending && (\n              <div className=\"bot-message bg-gray-100 mr-auto rounded-[16px_16px_16px_0] p-3 max-w-[75%] mb-2\">\n                <div className=\"flex space-x-1\">\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.4s'}}></div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n        <form onSubmit={handleSendMessage} className=\"relative\">\n          <Input\n            type=\"text\"\n            placeholder=\"Ask about first aid...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            className=\"pr-10\"\n          />\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            <button \n              type=\"submit\"\n              className=\"text-primary-600 hover:text-primary-700 focus:outline-none\"\n              disabled={sendMessageMutation.isPending}\n            >\n              <i className=\"ri-send-plane-fill\"></i>\n            </button>\n          </div>\n        </form>\n        <div className=\"mt-4\">\n          <div className=\"flex space-x-2\">\n            {topics.map((topic) => (\n              <button\n                key={topic}\n                type=\"button\"\n                className=\"flex-1 px-3 py-1.5 border border-gray-300 rounded-full text-xs text-gray-700 bg-white hover:bg-gray-50 focus:outline-none\"\n                onClick={() => handleTopicClick(topic)}\n              >\n                {topic}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5564},"client/src/components/dashboard/DailyRoutineCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ClockIcon, UtensilsIcon } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ntype MealItem = {\n  id: number;\n  dietMealId: number;\n  name: string;\n  quantity: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n};\n\ntype Meal = {\n  id: number;\n  dietDayId: number;\n  type: string;\n  time: string;\n  notes?: string;\n  items: MealItem[];\n};\n\ntype DietDay = {\n  id: number;\n  userId: number;\n  date: string;\n  totalCalories: number;\n  totalProtein: number;\n  totalCarbs: number;\n  totalFat: number;\n  waterIntake: number;\n  notes?: string;\n  meals: Meal[];\n};\n\nexport default function DailyRoutineCard() {\n  const [, navigate] = useLocation();\n  const currentDate = new Date().toISOString().split('T')[0];\n\n  const { data: dietDay, isLoading } = useQuery<DietDay | null>({\n    queryKey: ['/api/diet', currentDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/diet/${currentDate}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        if (response.status === 404 || response.status === 401) return null;\n        throw new Error('Failed to fetch diet');\n      }\n      return response.json();\n    },\n  });\n\n  const formatTime = (time24: string) => {\n    const [hours, minutes] = time24.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  const getMealsByCategory = (category: \"breakfast\" | \"lunch\" | \"dinner\" | \"snack\") => {\n    if (!dietDay) return [];\n    return dietDay.meals.filter(meal => meal.type === category);\n  };\n\n  const getTotalCaloriesForMeals = (meals: Meal[]) => {\n    return meals.reduce((total, meal) => {\n      const mealCalories = meal.items.reduce((sum, item) => sum + item.calories, 0);\n      return total + mealCalories;\n    }, 0);\n  };\n\n  const breakfastMeals = getMealsByCategory(\"breakfast\");\n  const lunchMeals = getMealsByCategory(\"lunch\");\n  const dinnerMeals = getMealsByCategory(\"dinner\");\n  const snackMeals = getMealsByCategory(\"snack\");\n\n  return (\n    <Card className=\"col-span-full lg:col-span-1\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle className=\"text-xl font-bold\">Daily Diet Routine</CardTitle>\n          <CardDescription>Track your diet and nutrition</CardDescription>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"icon\"\n          onClick={() => navigate(\"/diet-routine\")}\n          data-testid=\"button-edit-diet\"\n        >\n          <UtensilsIcon className=\"h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-16 w-full\" />\n            <Skeleton className=\"h-16 w-full\" />\n            <Skeleton className=\"h-16 w-full\" />\n          </div>\n        ) : !dietDay || dietDay.meals.length === 0 ? (\n          <div className=\"text-center py-8\" data-testid=\"empty-diet-routine\">\n            <i className=\"ri-restaurant-line text-4xl text-gray-400 mb-2\"></i>\n            <p className=\"text-gray-500 text-sm\">No diet routine planned</p>\n            <p className=\"text-gray-400 text-xs mt-1\">Start planning your meals today</p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-3\"\n              onClick={() => navigate(\"/diet-routine\")}\n              data-testid=\"button-start-diet\"\n            >\n              <UtensilsIcon className=\"h-4 w-4 mr-2\" />\n              Plan Your Diet\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {breakfastMeals.length > 0 && (\n              <div className=\"border rounded-lg p-3\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <h3 className=\"font-semibold text-sm capitalize\">Breakfast</h3>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {getTotalCaloriesForMeals(breakfastMeals)} cal\n                  </span>\n                </div>\n                {breakfastMeals.map(meal => (\n                  <div key={meal.id} className=\"space-y-1\">\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <ClockIcon className=\"h-3 w-3 mr-1\" />\n                      <span className=\"text-xs\">{formatTime(meal.time)}</span>\n                    </div>\n                    {meal.items.length > 0 ? (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {meal.items.map(item => item.name).join(', ')}\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-muted-foreground italic\">No items added</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {lunchMeals.length > 0 && (\n              <div className=\"border rounded-lg p-3\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <h3 className=\"font-semibold text-sm capitalize\">Lunch</h3>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {getTotalCaloriesForMeals(lunchMeals)} cal\n                  </span>\n                </div>\n                {lunchMeals.map(meal => (\n                  <div key={meal.id} className=\"space-y-1\">\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <ClockIcon className=\"h-3 w-3 mr-1\" />\n                      <span className=\"text-xs\">{formatTime(meal.time)}</span>\n                    </div>\n                    {meal.items.length > 0 ? (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {meal.items.map(item => item.name).join(', ')}\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-muted-foreground italic\">No items added</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {dinnerMeals.length > 0 && (\n              <div className=\"border rounded-lg p-3\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <h3 className=\"font-semibold text-sm capitalize\">Dinner</h3>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {getTotalCaloriesForMeals(dinnerMeals)} cal\n                  </span>\n                </div>\n                {dinnerMeals.map(meal => (\n                  <div key={meal.id} className=\"space-y-1\">\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <ClockIcon className=\"h-3 w-3 mr-1\" />\n                      <span className=\"text-xs\">{formatTime(meal.time)}</span>\n                    </div>\n                    {meal.items.length > 0 ? (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {meal.items.map(item => item.name).join(', ')}\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-muted-foreground italic\">No items added</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {snackMeals.length > 0 && (\n              <div className=\"border rounded-lg p-3\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <h3 className=\"font-semibold text-sm capitalize\">Snacks</h3>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {getTotalCaloriesForMeals(snackMeals)} cal\n                  </span>\n                </div>\n                {snackMeals.map(meal => (\n                  <div key={meal.id} className=\"space-y-1\">\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <ClockIcon className=\"h-3 w-3 mr-1\" />\n                      <span className=\"text-xs\">{formatTime(meal.time)}</span>\n                    </div>\n                    {meal.items.length > 0 ? (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {meal.items.map(item => item.name).join(', ')}\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-muted-foreground italic\">No items added</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            <div className=\"pt-2 border-t\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"font-medium\">Total Calories</span>\n                <span className=\"font-bold\" data-testid=\"dashboard-total-calories\">\n                  {dietDay.totalCalories} kcal\n                </span>\n              </div>\n              <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                <span>Water Intake</span>\n                <span data-testid=\"dashboard-water-intake\">{dietDay.waterIntake} ml</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9556},"client/src/components/dashboard/HealthStats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ntype HealthStat = {\n  label: string;\n  value: string | number;\n  unit: string;\n  icon: string;\n  bgColor: string;\n  iconColor: string;\n};\n\nexport default function HealthStats() {\n  const { data: healthData, isLoading, error } = useQuery({\n    queryKey: [\"/api/health-data/latest\"],\n  });\n\n  const [stats, setStats] = useState<HealthStat[]>([\n    {\n      label: \"Heart Rate\",\n      value: \"—\",\n      unit: \"BPM\",\n      icon: \"ri-heart-pulse-line\",\n      bgColor: \"bg-red-100\",\n      iconColor: \"text-red-600\",\n    },\n    {\n      label: \"Blood Pressure\",\n      value: \"—\",\n      unit: \"mmHg\",\n      icon: \"ri-pulse-line\",\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      label: \"Blood Glucose\",\n      value: \"—\",\n      unit: \"mg/dL\",\n      icon: \"ri-test-tube-line\",\n      bgColor: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n    },\n    {\n      label: \"Body Temperature\",\n      value: \"—\",\n      unit: \"°F\",\n      icon: \"ri-thermometer-line\",\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n    },\n  ]);\n\n  useEffect(() => {\n    if (!healthData) return;\n\n    const updatedStats = [...stats];\n    \n    if (healthData.heartRate) {\n      updatedStats[0].value = healthData.heartRate;\n    }\n    \n    if (healthData.bloodPressureSystolic && healthData.bloodPressureDiastolic) {\n      updatedStats[1].value = `${healthData.bloodPressureSystolic}/${healthData.bloodPressureDiastolic}`;\n    }\n    \n    if (healthData.bloodGlucose) {\n      updatedStats[2].value = healthData.bloodGlucose;\n    }\n    \n    if (healthData.temperature) {\n      // Convert from stored int to decimal for display\n      updatedStats[3].value = (healthData.temperature / 10).toFixed(1);\n    }\n    \n    setStats(updatedStats);\n  }, [healthData]);\n\n  // Mock data for demo if no data is present\n  useEffect(() => {\n    if (!isLoading && !healthData) {\n      const mockStats = [...stats];\n      mockStats[0].value = 76;\n      mockStats[1].value = \"120/80\";\n      mockStats[2].value = 98;\n      mockStats[3].value = 98.6;\n      setStats(mockStats);\n    }\n  }, [isLoading, healthData]);\n\n  return (\n    <section>\n      <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Your Health Stats</h2>\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {stats.map((stat, index) => (\n          <div key={index} className=\"bg-white overflow-hidden shadow rounded-lg\">\n            <div className=\"px-4 py-5 sm:p-6\">\n              <div className=\"flex items-center\">\n                <div className={`flex-shrink-0 ${stat.bgColor} rounded-md p-3`}>\n                  <i className={`${stat.icon} ${stat.iconColor} text-xl`}></i>\n                </div>\n                <div className=\"ml-5 w-0 flex-1\">\n                  <dl>\n                    <dt className=\"text-sm font-medium text-gray-500 truncate\">{stat.label}</dt>\n                    <dd>\n                      <div className=\"flex items-baseline\">\n                        {isLoading ? (\n                          <Skeleton className=\"h-8 w-16\" />\n                        ) : (\n                          <>\n                            <div className=\"text-2xl font-semibold text-gray-900\">{stat.value}</div>\n                            <div className=\"ml-2 text-sm text-gray-500\">{stat.unit}</div>\n                          </>\n                        )}\n                      </div>\n                    </dd>\n                  </dl>\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-gray-50 px-4 py-4 sm:px-6\">\n              <div className=\"text-sm\">\n                <a href=\"#\" className=\"font-medium text-primary-600 hover:text-primary-500\">View history</a>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3970},"client/src/components/dashboard/HospitalsSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface HospitalType {\n  id: number;\n  name: string;\n  address: string;\n  phoneNumber: string;\n  rating: number;\n  logo?: string;\n}\n\nexport default function HospitalsSection() {\n  const [_, navigate] = useLocation();\n  const { data, isLoading, error } = useQuery({ \n    queryKey: [\"/api/hospitals\"]\n  });\n  \n  const [hospitals, setHospitals] = useState<HospitalType[]>([]);\n\n  useEffect(() => {\n    if (data) {\n      setHospitals(data);\n    }\n  }, [data]);\n\n  // Show demo data if no hospitals are available\n  useEffect(() => {\n    if (!isLoading && (!data || data.length === 0)) {\n      setHospitals([\n        {\n          id: 1,\n          name: \"City Medical Center\",\n          address: \"123 Medical Ave, Chicago, IL\",\n          phoneNumber: \"(312) 555-1234\",\n          rating: 4.5\n        },\n        {\n          id: 2,\n          name: \"Memorial Hospital\",\n          address: \"456 Health Blvd, Chicago, IL\",\n          phoneNumber: \"(312) 555-6789\",\n          rating: 4.0\n        },\n        {\n          id: 3,\n          name: \"University Medical Center\",\n          address: \"789 University Way, Chicago, IL\",\n          phoneNumber: \"(312) 555-9876\",\n          rating: 4.8\n        }\n      ]);\n    }\n  }, [isLoading, data]);\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<i key={`full-${i}`} className=\"ri-star-fill text-yellow-400\"></i>);\n    }\n    \n    if (hasHalfStar) {\n      stars.push(<i key=\"half\" className=\"ri-star-half-fill text-yellow-400\"></i>);\n    }\n    \n    const emptyStars = 5 - stars.length;\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<i key={`empty-${i}`} className=\"ri-star-line text-yellow-400\"></i>);\n    }\n    \n    return stars;\n  };\n\n  return (\n    <section className=\"mt-8\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-medium text-gray-900\">Hospitals Near You</h2>\n        <a href=\"/hospitals\" className=\"text-sm font-medium text-primary-600 hover:text-primary-500\">View all</a>\n      </div>\n      <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          <>\n            <Skeleton className=\"h-64 w-full\" />\n            <Skeleton className=\"h-64 w-full\" />\n            <Skeleton className=\"h-64 w-full\" />\n          </>\n        ) : (\n          hospitals.map((hospital) => (\n            <div key={hospital.id} className=\"bg-white overflow-hidden shadow rounded-lg\">\n              <div className=\"px-4 py-5 sm:p-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-12 w-12 rounded bg-gray-200 flex items-center justify-center text-gray-500\">\n                      <i className=\"ri-hospital-line text-2xl\"></i>\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">{hospital.name}</h3>\n                    <div className=\"mt-1 flex items-center\">\n                      <div className=\"flex items-center\">\n                        {renderStars(hospital.rating)}\n                      </div>\n                      <span className=\"ml-1 text-sm text-gray-500\">\n                        {hospital.rating.toFixed(1)} ({Math.floor(Math.random() * 200) + 50} reviews)\n                      </span>\n                    </div>\n                    <p className=\"mt-1 text-sm text-gray-500\">{hospital.address}</p>\n                    <div className=\"mt-3 flex items-center text-sm text-gray-500\">\n                      <i className=\"ri-phone-line mr-1\"></i>\n                      <span>{hospital.phoneNumber}</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"mt-4 grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" className=\"flex justify-center items-center\">\n                    <i className=\"ri-map-pin-line mr-1\"></i>\n                    Directions\n                  </Button>\n                  <Button className=\"flex justify-center items-center\">\n                    <i className=\"ri-calendar-line mr-1\"></i>\n                    Book Visit\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4710},"client/src/components/dashboard/MedicalRecordsCard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface MedicalRecordType {\n  id: number;\n  title: string;\n  date: string;\n}\n\nexport default function MedicalRecordsCard() {\n  const [_, navigate] = useLocation();\n  const { data, isLoading, error } = useQuery({ \n    queryKey: [\"/api/medical-records\"] \n  });\n  \n  const [records, setRecords] = useState<MedicalRecordType[]>([]);\n\n  useEffect(() => {\n    if (data && data.length > 0) {\n      const formattedRecords = data.map((record: any) => ({\n        id: record.id,\n        title: record.title,\n        date: new Date(record.date).toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      }));\n      \n      setRecords(formattedRecords);\n    } else if (!isLoading) {\n      setRecords([]);\n    }\n  }, [data, isLoading]);\n\n  const handleUploadDocument = () => {\n    navigate(\"/medical-records\");\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-medium text-gray-900\">Medical Records</h2>\n          <a href=\"/medical-records\" className=\"text-sm font-medium text-primary-600 hover:text-primary-500\">View all</a>\n        </div>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <>\n              <Skeleton className=\"h-14 w-full\" />\n              <Skeleton className=\"h-14 w-full\" />\n              <Skeleton className=\"h-14 w-full\" />\n            </>\n          ) : records.length === 0 ? (\n            <div className=\"text-center py-8\" data-testid=\"empty-medical-records\">\n              <i className=\"ri-file-list-3-line text-4xl text-gray-400 mb-2\"></i>\n              <p className=\"text-gray-500 text-sm\">No medical records uploaded</p>\n              <p className=\"text-gray-400 text-xs mt-1\">Upload your first medical document to see it here</p>\n            </div>\n          ) : (\n            records.map((record) => (\n              <div key={record.id} className=\"border border-gray-200 rounded-lg p-4\" data-testid={`medical-record-${record.id}`}>\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <i className=\"ri-file-list-3-line text-xl text-gray-400\"></i>\n                  </div>\n                  <div className=\"ml-3\">\n                    <h3 className=\"text-sm font-medium text-gray-900\" data-testid=\"record-title\">{record.title}</h3>\n                    <p className=\"text-xs text-gray-500\" data-testid=\"record-date\">{record.date}</p>\n                  </div>\n                  <div className=\"ml-auto\">\n                    <button \n                      className=\"inline-flex items-center p-1 border border-transparent rounded-full text-gray-500 hover:bg-gray-100 focus:outline-none\"\n                      data-testid=\"button-download-record\"\n                    >\n                      <i className=\"ri-download-line\"></i>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        <div className=\"mt-6\">\n          <Button \n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleUploadDocument}\n            data-testid=\"button-upload-document\"\n          >\n            Upload Medical Document\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3655},"client/src/components/layout/Layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport MobileHeader from \"./MobileHeader\";\nimport MobileNavigation from \"./MobileNavigation\";\nimport VoiceAssistant from \"@/components/VoiceAssistant\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  title: string;\n}\n\nexport default function Layout({ children, title }: LayoutProps) {\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n  const [emergencyDialogOpen, setEmergencyDialogOpen] = useState(false);\n  const [gettingLocation, setGettingLocation] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const toggleSidebar = () => {\n    setIsMobileSidebarOpen(!isMobileSidebarOpen);\n  };\n\n  const emergencyMutation = useMutation({\n    mutationFn: async (locationData: { latitude: number; longitude: number }) => {\n      // First, search for nearby ambulances\n      const searchRes = await apiRequest(\"POST\", \"/api/ambulances/search\", {\n        latitude: locationData.latitude,\n        longitude: locationData.longitude,\n        mode: \"emergency\"\n      });\n      \n      const searchData = await searchRes.json();\n      \n      // If fallback to call 112\n      if (searchData.fallback === \"call112\") {\n        return { fallback: \"call112\" };\n      }\n      \n      // If ambulances found, create emergency incident with nearest ambulance\n      if (searchData.ambulances && searchData.ambulances.length > 0) {\n        const nearestAmbulance = searchData.ambulances[0];\n        const res = await apiRequest(\"POST\", \"/api/emergency\", {\n          emergencyType: \"medical\",\n          description: \"Emergency SOS activated\",\n          latitude: locationData.latitude.toString(),\n          longitude: locationData.longitude.toString()\n        });\n        return await res.json();\n      }\n      \n      return { fallback: \"call112\" };\n    },\n    onSuccess: (data: any) => {\n      setEmergencyDialogOpen(false);\n      \n      if (data.fallback === \"call112\") {\n        toast({\n          title: \"No Ambulances Available\",\n          description: (\n            <div className=\"space-y-2\">\n              <p>No ambulances found nearby. Please call emergency services:</p>\n              <a \n                href=\"tel:112\" \n                className=\"inline-block bg-red-600 text-white px-4 py-2 rounded-md font-semibold hover:bg-red-700\"\n              >\n                📞 Call 112 Now\n              </a>\n            </div>\n          ),\n          duration: 15000,\n        });\n      } else if (data.ambulance) {\n        toast({\n          title: \"Emergency Response Activated\",\n          description: `Ambulance ${data.ambulance.vehicleNumber} has been dispatched to your location. Help is on the way!`,\n          duration: 10000,\n        });\n      } else {\n        toast({\n          title: \"Emergency Request Received\",\n          description: \"Your emergency has been logged. We're finding the nearest available ambulance.\",\n          duration: 10000,\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Emergency Request Failed\",\n        description: error.message || \"Failed to process emergency request. Please call emergency services directly at 112.\",\n        variant: \"destructive\",\n        duration: 10000,\n      });\n    }\n  });\n\n  const handleEmergencyClick = () => {\n    setEmergencyDialogOpen(true);\n  };\n\n  const confirmEmergency = () => {\n    setGettingLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          emergencyMutation.mutate({\n            latitude,\n            longitude\n          });\n          setGettingLocation(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to retrieve your location. Please call 112 for emergency services.\",\n            variant: \"destructive\",\n          });\n          setGettingLocation(false);\n          setEmergencyDialogOpen(false);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Your browser doesn't support geolocation. Please call 112 for emergency services.\",\n        variant: \"destructive\",\n      });\n      setGettingLocation(false);\n      setEmergencyDialogOpen(false);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:flex lg:flex-shrink-0\">\n        <Sidebar user={user} />\n      </div>\n\n      {/* Mobile sidebar */}\n      {isMobileSidebarOpen && (\n        <div className=\"fixed inset-0 z-40 lg:hidden\">\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" \n            aria-hidden=\"true\"\n            onClick={toggleSidebar}\n          />\n          \n          {/* Sidebar */}\n          <div className=\"relative flex flex-col w-64 h-full bg-white\">\n            <Sidebar user={user} isMobile={true} onClose={toggleSidebar} />\n          </div>\n        </div>\n      )}\n\n      {/* Mobile header & content area */}\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Mobile header */}\n        <div className=\"lg:hidden\">\n          <MobileHeader onMenuClick={toggleSidebar} user={user} />\n        </div>\n\n        {/* Main content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-4 lg:p-6 pb-16 lg:pb-6\">\n          {/* Page header */}\n          <div className=\"pb-5 border-b border-gray-200 sm:flex sm:items-center sm:justify-between\">\n            <h1 className=\"text-2xl font-semibold text-gray-900\">{title}</h1>\n            <div className=\"mt-3 sm:mt-0 sm:ml-4 flex items-center space-x-2\">\n              <VoiceAssistant />\n              <button \n                type=\"button\" \n                onClick={handleEmergencyClick}\n                className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 animate-pulse\"\n                data-testid=\"button-emergency-sos\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                </svg>\n                Emergency SOS\n              </button>\n            </div>\n          </div>\n\n          {/* Dashboard content */}\n          <div className=\"mt-6\">\n            {children}\n          </div>\n        </main>\n      </div>\n\n      {/* Mobile bottom navigation */}\n      <div className=\"lg:hidden\">\n        <MobileNavigation />\n      </div>\n\n      {/* Emergency Confirmation Dialog */}\n      <AlertDialog open={emergencyDialogOpen} onOpenChange={setEmergencyDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-red-600\">🚨 Emergency SOS</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will immediately:\n              <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                <li>Retrieve your current location</li>\n                <li>Dispatch the nearest available ambulance</li>\n                <li>Create an emergency incident record</li>\n              </ul>\n              <p className=\"mt-3 font-semibold\">Only use this for real medical emergencies.</p>\n              <p className=\"mt-1 text-sm\">For non-emergencies, please book a regular appointment or request a home visit.</p>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={gettingLocation || emergencyMutation.isPending} data-testid=\"button-emergency-cancel\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmEmergency}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={gettingLocation || emergencyMutation.isPending}\n              data-testid=\"button-emergency-confirm\"\n            >\n              {gettingLocation ? \"Getting Location...\" : emergencyMutation.isPending ? \"Dispatching...\" : \"Confirm Emergency\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":9107},"client/src/components/layout/MobileHeader.tsx":{"content":"import { User } from \"@shared/schema\";\n\ninterface MobileHeaderProps {\n  onMenuClick: () => void;\n  user?: User | null;\n}\n\nexport default function MobileHeader({ onMenuClick, user }: MobileHeaderProps) {\n  return (\n    <header className=\"flex items-center justify-between px-4 py-2 bg-white border-b border-gray-200\">\n      <div className=\"flex items-center\">\n        <button \n          type=\"button\" \n          className=\"text-gray-500 focus:outline-none\"\n          onClick={onMenuClick}\n        >\n          <i className=\"ri-menu-line text-2xl\"></i>\n        </button>\n        <span className=\"ml-2 text-xl font-bold text-primary-600\">CareGuardian</span>\n      </div>\n      <div>\n        {user ? (\n          <div className=\"w-8 h-8 rounded-full bg-primary-100 flex items-center justify-center text-primary-700 font-medium\">\n            {user.fullName?.charAt(0) || user.username.charAt(0)}\n          </div>\n        ) : (\n          <div className=\"w-8 h-8 rounded-full bg-gray-200\"></div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":1032},"client/src/components/layout/MobileNavigation.tsx":{"content":"import { useLocation } from \"wouter\";\n\nexport default function MobileNavigation() {\n  const [location, navigate] = useLocation();\n\n  const isActive = (path: string) => location === path;\n  \n  const handleEmergency = () => {\n    // In a real app, this would trigger emergency services\n    alert('Emergency services would be contacted');\n  };\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-10 bg-white border-t border-gray-200\">\n      <nav className=\"flex justify-between items-center px-2 py-3\">\n        <a\n          href=\"/\"\n          onClick={(e) => { e.preventDefault(); navigate(\"/\"); }}\n          className={`flex flex-col items-center ${isActive(\"/\") ? \"text-primary-600\" : \"text-gray-500\"}`}\n        >\n          <i className=\"ri-dashboard-line text-xl\"></i>\n          <span className=\"text-xs mt-1\">Home</span>\n        </a>\n        <a\n          href=\"/appointments\"\n          onClick={(e) => { e.preventDefault(); navigate(\"/appointments\"); }}\n          className={`flex flex-col items-center ${isActive(\"/appointments\") ? \"text-primary-600\" : \"text-gray-500\"}`}\n        >\n          <i className=\"ri-calendar-line text-xl\"></i>\n          <span className=\"text-xs mt-1\">Appointments</span>\n        </a>\n        <button\n          onClick={handleEmergency}\n          className=\"flex flex-col items-center\"\n        >\n          <div className=\"bg-orange-500 p-3 rounded-full -mt-5 shadow-lg\">\n            <i className=\"ri-alarm-warning-line text-xl text-white\"></i>\n          </div>\n          <span className=\"text-xs mt-1\">SOS</span>\n        </button>\n        <a\n          href=\"/medication-tracker\"\n          onClick={(e) => { e.preventDefault(); navigate(\"/medication-tracker\"); }}\n          className={`flex flex-col items-center ${isActive(\"/medication-tracker\") ? \"text-primary-600\" : \"text-gray-500\"}`}\n        >\n          <i className=\"ri-capsule-line text-xl\"></i>\n          <span className=\"text-xs mt-1\">Meds</span>\n        </a>\n        <a\n          href=\"/doctors\"\n          onClick={(e) => { e.preventDefault(); navigate(\"/doctors\"); }}\n          className={`flex flex-col items-center ${isActive(\"/doctors\") ? \"text-primary-600\" : \"text-gray-500\"}`}\n        >\n          <i className=\"ri-user-heart-line text-xl\"></i>\n          <span className=\"text-xs mt-1\">Doctors</span>\n        </a>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":2349},"client/src/components/layout/Sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { User } from \"@shared/schema\";\n\ninterface SidebarProps {\n  user?: User | null;\n  isMobile?: boolean;\n  onClose?: () => void;\n}\n\nexport default function Sidebar({ user, isMobile = false, onClose }: SidebarProps) {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  const ambulanceNavItems = [\n    { name: \"Ambulance Dashboard\", path: \"/ambulance-dashboard\", icon: \"ri-dashboard-line\" },\n    { name: \"My Bookings\", path: \"/ambulance-dashboard\", icon: \"ri-file-list-line\" },\n    { name: \"Settings\", path: \"/settings\", icon: \"ri-settings-line\" },\n  ];\n\n  const userNavItems = [\n    { name: \"Dashboard\", path: \"/\", icon: \"ri-dashboard-line\" },\n    { name: \"Appointments\", path: \"/appointments\", icon: \"ri-calendar-line\" },\n    { name: \"Hospitals\", path: \"/hospitals\", icon: \"ri-hospital-line\" },\n    { name: \"Find Doctors\", path: \"/doctors\", icon: \"ri-user-heart-line\" },\n    { name: \"Home Doctor Visit\", path: \"/home-visits\", icon: \"ri-stethoscope-line\" },\n    { name: \"Ambulance Locator\", path: \"/ambulance-locator\", icon: \"ri-truck-line\" },\n    { name: \"Medical Records\", path: \"/medical-records\", icon: \"ri-heart-pulse-line\" },\n    { name: \"Diet Routine\", path: \"/diet-routine\", icon: \"ri-restaurant-line\" },\n    { name: \"Medication Tracker\", path: \"/medication-tracker\", icon: \"ri-capsule-line\" },\n    { name: \"First Aid Guide\", path: \"/first-aid\", icon: \"ri-psychotherapy-line\" },\n    { name: \"Subscription Plans\", path: \"/subscription\", icon: \"ri-vip-crown-line\" },\n    { name: \"Settings\", path: \"/settings\", icon: \"ri-settings-line\" },\n  ];\n\n  const navItems = user?.role === \"ambulance\" ? ambulanceNavItems : userNavItems;\n\n  return (\n    <div className={`flex flex-col w-64 border-r border-gray-200 bg-white ${isMobile ? 'h-full' : ''}`}>\n      <div className=\"flex items-center justify-between h-16 px-4 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <span className=\"text-2xl font-bold text-primary-600\">CareGuardian</span>\n        </div>\n        {isMobile && (\n          <button \n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 focus:outline-none\"\n          >\n            <i className=\"ri-close-line text-2xl\"></i>\n          </button>\n        )}\n      </div>\n      <div className=\"flex flex-col flex-grow pt-5 pb-4 overflow-y-auto\">\n        <div className=\"px-4 mb-4\">\n          <div className=\"bg-gradient-to-r from-orange-100 to-green-100 p-3 rounded-lg border border-green-200\">\n            <div className=\"text-sm font-medium text-gray-800\">\n              {user?.role === \"ambulance\" ? \"Ambulance Driver Portal 🚑\" : \"Welcome to CareGuardian! 👋\"}\n            </div>\n            <div className=\"text-xs text-gray-600\">\n              {user?.role === \"ambulance\" ? \"Manage your ambulance and bookings\" : \"Your complete healthcare companion\"}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex-1 px-2 space-y-1\">\n          {navItems.map((item) => (\n            <a \n              key={item.path}\n              href={item.path} \n              className={`flex items-center px-2 py-2 text-sm font-medium rounded-md ${\n                isActive(item.path) \n                  ? 'bg-primary-50 text-primary-700'\n                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n              }`}\n            >\n              <i className={`${item.icon} mr-3 ${isActive(item.path) ? 'text-primary-500' : 'text-gray-500'} text-lg`}></i>\n              {item.name}\n            </a>\n          ))}\n        </div>\n      </div>\n      {user && (\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center text-primary-700 font-medium\">\n                {user.fullName?.charAt(0) || user.username.charAt(0)}\n              </div>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-gray-700\">{user.fullName || user.username}</p>\n              <p className=\"text-xs font-medium text-gray-500\">{user.email}</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4322},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/pages/ambulance-locator.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { MapPin, Navigation, Truck, Phone, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface AmbulanceWithDistance {\n  id: number;\n  vehicleNumber: string;\n  status: string;\n  currentLatitude: string | null;\n  currentLongitude: string | null;\n  distance?: number;\n  driverName?: string;\n  driverPhone?: string;\n}\n\nconst bookingFormSchema = z.object({\n  pickupAddress: z.string().min(5, \"Please enter a valid pickup address\"),\n  dropoffAddress: z.string().optional(),\n  patientName: z.string().min(2, \"Patient name is required\"),\n  patientPhone: z.string().min(10, \"Valid phone number is required\"),\n  medicalCondition: z.string().optional(),\n});\n\nexport default function AmbulanceLocator() {\n  const { toast } = useToast();\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null);\n  const [gettingLocation, setGettingLocation] = useState(false);\n  const [ambulancesWithDistance, setAmbulancesWithDistance] = useState<AmbulanceWithDistance[]>([]);\n  const [bookingDialogOpen, setBookingDialogOpen] = useState(false);\n  const [selectedAmbulance, setSelectedAmbulance] = useState<AmbulanceWithDistance | null>(null);\n  \n  const form = useForm<z.infer<typeof bookingFormSchema>>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      pickupAddress: \"\",\n      dropoffAddress: \"\",\n      patientName: \"\",\n      patientPhone: \"\",\n      medicalCondition: \"\",\n    },\n  });\n\n  // Search for ambulances based on user location\n  const searchMutation = useMutation({\n    mutationFn: async (location: { latitude: number; longitude: number }) => {\n      return await apiRequest(\"POST\", \"/api/ambulances/search\", {\n        latitude: location.latitude,\n        longitude: location.longitude,\n        mode: \"normal\"\n      });\n    },\n    onSuccess: (data: any) => {\n      if (data.ambulances && data.ambulances.length > 0) {\n        setAmbulancesWithDistance(data.ambulances);\n      } else {\n        setAmbulancesWithDistance([]);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Search Failed\",\n        description: \"Unable to search for ambulances. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Get user's current location and search for ambulances\n  const getUserLocation = () => {\n    setGettingLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      toast({\n        title: \"Getting your location...\",\n        description: \"Please allow location access when prompted.\",\n      });\n      \n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ lat: latitude, lng: longitude });\n          \n          // Search for ambulances near this location\n          searchMutation.mutate({ latitude, longitude });\n          \n          toast({\n            title: \"Location found!\",\n            description: \"Searching for ambulances near you...\",\n          });\n          \n          setGettingLocation(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to retrieve your location. Please enable location services.\",\n            variant: \"destructive\",\n          });\n          setGettingLocation(false);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\",\n      });\n      setGettingLocation(false);\n    }\n  };\n\n  // Get user location on mount\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return \"bg-green-100 text-green-800\";\n      case \"dispatched\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"on_duty\":\n        return \"bg-yellow-100 text-yellow-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Booking mutation\n  const bookingMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof bookingFormSchema> & { ambulanceId: number; pickupLatitude?: string; pickupLongitude?: string }) => {\n      return await apiRequest(\"POST\", \"/api/ambulance-bookings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your ambulance booking has been successfully created.\",\n      });\n      setBookingDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/ambulance-bookings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create ambulance booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookAmbulance = (ambulance: AmbulanceWithDistance) => {\n    setSelectedAmbulance(ambulance);\n    if (userLocation) {\n      form.setValue(\"pickupAddress\", `Lat: ${userLocation.lat.toFixed(4)}, Lng: ${userLocation.lng.toFixed(4)}`);\n    }\n    setBookingDialogOpen(true);\n  };\n\n  const onSubmitBooking = (data: z.infer<typeof bookingFormSchema>) => {\n    if (!selectedAmbulance) return;\n    \n    bookingMutation.mutate({\n      ...data,\n      ambulanceId: selectedAmbulance.id,\n      pickupLatitude: userLocation?.lat.toString(),\n      pickupLongitude: userLocation?.lng.toString(),\n    });\n  };\n\n  return (\n    <Layout title=\"Ambulance Locator\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Map View */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-[600px] relative overflow-hidden\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 to-green-50\">\n              {/* Map Grid Pattern */}\n              <div \n                className=\"absolute inset-0 opacity-10\"\n                style={{\n                  backgroundImage: `\n                    linear-gradient(to right, #94a3b8 1px, transparent 1px),\n                    linear-gradient(to bottom, #94a3b8 1px, transparent 1px)\n                  `,\n                  backgroundSize: '40px 40px'\n                }}\n              />\n              \n              {/* User Location Marker */}\n              {userLocation && (\n                <div \n                  className=\"absolute transform -translate-x-1/2 -translate-y-1/2 z-20\"\n                  style={{ \n                    left: '50%', \n                    top: '50%',\n                  }}\n                >\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 bg-blue-500 rounded-full animate-ping opacity-75\" style={{ width: '24px', height: '24px' }}></div>\n                    <div className=\"relative bg-blue-600 rounded-full p-2 shadow-lg\">\n                      <MapPin className=\"h-5 w-5 text-white\" />\n                    </div>\n                    <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 whitespace-nowrap bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium\">\n                      You are here\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Ambulance Markers */}\n              {userLocation && ambulancesWithDistance.slice(0, 5).map((ambulance, index) => {\n                if (!ambulance.currentLatitude || !ambulance.currentLongitude) return null;\n                \n                // Calculate position relative to user (simplified positioning)\n                const angle = (index * 72) * (Math.PI / 180); // Distribute evenly\n                const radius = 100 + (ambulance.distance || 0) * 20; // Distance affects radius\n                const x = 50 + radius * Math.cos(angle);\n                const y = 50 + radius * Math.sin(angle);\n                \n                return (\n                  <div\n                    key={ambulance.id}\n                    className=\"absolute transform -translate-x-1/2 -translate-y-1/2 z-10\"\n                    style={{\n                      left: `${x}%`,\n                      top: `${y}%`,\n                    }}\n                  >\n                    <div className=\"relative group\">\n                      <div className=\"bg-red-600 rounded-full p-2 shadow-lg cursor-pointer hover:scale-110 transition-transform\">\n                        <Truck className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div className=\"absolute -bottom-12 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-900 text-white px-3 py-2 rounded text-xs font-medium whitespace-nowrap z-30 shadow-lg\">\n                        {ambulance.vehicleNumber}\n                        <br />\n                        {ambulance.distance && `${ambulance.distance.toFixed(1)} km away`}\n                      </div>\n                      {ambulance.distance && (\n                        <div className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 bg-red-600 text-white px-2 py-0.5 rounded-full text-xs font-bold whitespace-nowrap\">\n                          {ambulance.distance.toFixed(1)} km\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n\n              {/* Legend */}\n              <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-lg p-4 z-20\">\n                <h3 className=\"text-sm font-semibold mb-2\">Legend</h3>\n                <div className=\"space-y-2 text-xs\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"bg-blue-600 rounded-full p-1\">\n                      <MapPin className=\"h-3 w-3 text-white\" />\n                    </div>\n                    <span>Your Location</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"bg-red-600 rounded-full p-1\">\n                      <Truck className=\"h-3 w-3 text-white\" />\n                    </div>\n                    <span>Available Ambulance</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Refresh Location Button */}\n              <div className=\"absolute top-4 right-4 z-20\">\n                <Button\n                  onClick={getUserLocation}\n                  disabled={gettingLocation}\n                  size=\"sm\"\n                  className=\"shadow-lg\"\n                  data-testid=\"button-refresh-location\"\n                >\n                  <Navigation className=\"h-4 w-4 mr-2\" />\n                  {gettingLocation ? \"Locating...\" : \"Refresh Location\"}\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Ambulance List */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"h-[600px] flex flex-col\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Truck className=\"h-5 w-5\" />\n                Nearby Ambulances\n              </CardTitle>\n              <CardDescription>\n                {userLocation \n                  ? `Showing ${ambulancesWithDistance.length} ambulances sorted by distance`\n                  : \"Enable location to see ambulances near you\"\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex-1 overflow-y-auto\">\n              {searchMutation.isPending || gettingLocation ? (\n                <div className=\"space-y-3\">\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                  <Skeleton className=\"h-24 w-full\" />\n                </div>\n              ) : ambulancesWithDistance.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {ambulancesWithDistance.map((ambulance, index) => (\n                    <Card \n                      key={ambulance.id} \n                      className={`${index === 0 && userLocation ? 'border-green-500 border-2' : ''}`}\n                      data-testid={`ambulance-card-${ambulance.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{ambulance.vehicleNumber}</h3>\n                            {ambulance.distance && (\n                              <div className=\"flex items-center gap-1 text-sm text-gray-600 mt-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                <span>{ambulance.distance.toFixed(2)} km away</span>\n                              </div>\n                            )}\n                          </div>\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(ambulance.status)}`}>\n                            {ambulance.status}\n                          </span>\n                        </div>\n                        \n                        {index === 0 && userLocation && (\n                          <div className=\"mt-3 pt-3 border-t\">\n                            <div className=\"flex items-center gap-2 text-xs text-green-600 font-medium mb-2\">\n                              <span className=\"inline-block h-2 w-2 bg-green-600 rounded-full\"></span>\n                              Nearest to you\n                            </div>\n                          </div>\n                        )}\n                        \n                        {ambulance.distance && (\n                          <div className=\"mt-3 flex items-center gap-1 text-xs text-gray-500\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>Estimated arrival: {Math.ceil(ambulance.distance * 2)} minutes</span>\n                          </div>\n                        )}\n                        \n                        <div className=\"mt-4 pt-3 border-t\">\n                          <Button \n                            className=\"w-full\" \n                            size=\"sm\"\n                            onClick={() => handleBookAmbulance(ambulance)}\n                            data-testid={`button-book-ambulance-${ambulance.id}`}\n                          >\n                            Book This Ambulance\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : userLocation ? (\n                <div className=\"text-center py-8\">\n                  <Truck className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                  <p className=\"text-gray-500 font-semibold\">No ambulances available nearby</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">No ambulances found within 10 km of your location</p>\n                  <Button \n                    onClick={getUserLocation}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"mt-4\"\n                    data-testid=\"button-retry-search\"\n                  >\n                    <Navigation className=\"h-4 w-4 mr-2\" />\n                    Search Again\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <MapPin className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                  <p className=\"text-gray-500\">Enable location to find ambulances</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">We need your location to show nearby ambulances</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Booking Dialog */}\n      <Dialog open={bookingDialogOpen} onOpenChange={setBookingDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Book Ambulance: {selectedAmbulance?.vehicleNumber}</DialogTitle>\n            <DialogDescription>\n              Fill in the details below to book this ambulance. We'll dispatch it to your location right away.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitBooking)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"pickupAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pickup Address *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter pickup address\" {...field} data-testid=\"input-pickup-address\" />\n                    </FormControl>\n                    <FormDescription>\n                      Your current location has been auto-filled\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"dropoffAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Drop-off Address (Optional)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter hospital or destination\" {...field} data-testid=\"input-dropoff-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"patientName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Patient Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter patient name\" {...field} data-testid=\"input-patient-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"patientPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Patient Phone *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter contact number\" {...field} data-testid=\"input-patient-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"medicalCondition\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Medical Condition (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the medical condition or emergency\" \n                        {...field} \n                        data-testid=\"textarea-medical-condition\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex gap-3 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setBookingDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-booking\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  disabled={bookingMutation.isPending}\n                  data-testid=\"button-confirm-booking\"\n                >\n                  {bookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </Layout>\n  );\n}\n","size_bytes":21181},"client/src/pages/home-visits.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPin, Clock, Home, Stethoscope } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst homeVisitSchema = z.object({\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  pincode: z.string().min(5, \"Pincode is required\"),\n  preferredDate: z.string().min(1, \"Preferred date is required\"),\n  preferredTime: z.string().min(1, \"Preferred time is required\"),\n  medicalConcern: z.string().min(10, \"Please describe your medical concern (minimum 10 characters)\"),\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n});\n\ntype HomeVisitFormValues = z.infer<typeof homeVisitSchema>;\n\nexport default function HomeVisits() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [useCurrentLocation, setUseCurrentLocation] = useState(false);\n\n  // Get user's home visit requests\n  const { data: homeVisits, isLoading: isLoadingVisits } = useQuery({\n    queryKey: [\"/api/home-visits\"],\n  });\n\n  // Request mutation\n  const requestVisitMutation = useMutation({\n    mutationFn: async (visitData: HomeVisitFormValues) => {\n      const res = await apiRequest(\"POST\", \"/api/home-visits\", visitData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/home-visits\"] });\n      toast({\n        title: \"Home visit requested\",\n        description: \"Your request has been submitted. We'll assign a doctor from the nearest hospital and confirm shortly.\",\n        duration: 8000,\n      });\n      form.reset();\n      setIsSubmitting(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to request home visit\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n    }\n  });\n\n  const form = useForm<HomeVisitFormValues>({\n    resolver: zodResolver(homeVisitSchema),\n    defaultValues: {\n      address: \"\",\n      city: \"\",\n      pincode: \"\",\n      preferredDate: \"\",\n      preferredTime: \"\",\n      medicalConcern: \"\",\n      phoneNumber: \"\",\n    }\n  });\n\n  const getCurrentLocation = () => {\n    setUseCurrentLocation(true);\n    \n    if (\"geolocation\" in navigator) {\n      toast({\n        title: \"Getting your location...\",\n        description: \"Please allow location access when prompted.\",\n      });\n      \n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          \n          try {\n            const response = await fetch(\n              `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`\n            );\n            const data = await response.json();\n            \n            if (data.address) {\n              form.setValue(\"address\", data.display_name || \"\");\n              form.setValue(\"city\", data.address.city || data.address.town || data.address.village || \"\");\n              form.setValue(\"pincode\", data.address.postcode || \"\");\n            }\n            \n            toast({\n              title: \"Location retrieved\",\n              description: \"Address fields have been auto-filled. Please verify and complete the form.\",\n            });\n          } catch (error) {\n            toast({\n              title: \"Failed to get address\",\n              description: \"Location found but couldn't retrieve address details. Please enter manually.\",\n              variant: \"destructive\",\n            });\n          }\n          \n          setUseCurrentLocation(false);\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to retrieve your location. Please enter your address manually.\",\n            variant: \"destructive\",\n          });\n          setUseCurrentLocation(false);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Your browser doesn't support geolocation. Please enter your address manually.\",\n        variant: \"destructive\",\n      });\n      setUseCurrentLocation(false);\n    }\n  };\n\n  const onSubmit = (data: HomeVisitFormValues) => {\n    setIsSubmitting(true);\n    requestVisitMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"assigned\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"in_progress\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <Layout title=\"Home Doctor Visits\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Request Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Home className=\"h-5 w-5\" />\n              Request a Home Visit\n            </CardTitle>\n            <CardDescription>\n              A qualified doctor will visit your home at your convenience. We'll assign a doctor from the nearest hospital based on your location.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-sm font-medium\">Visit Location</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={getCurrentLocation}\n                    disabled={useCurrentLocation}\n                    data-testid=\"button-use-location\"\n                  >\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    {useCurrentLocation ? \"Getting Location...\" : \"Use Current Location\"}\n                  </Button>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Address</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"House no., Street, Landmark\" data-testid=\"input-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-city\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"pincode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Pincode</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-pincode\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Number</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"tel\" placeholder=\"+91 98765 43210\" data-testid=\"input-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"preferredDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preferred Date</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"preferredTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preferred Time</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"time\" data-testid=\"input-time\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"medicalConcern\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Medical Concern</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Please describe your symptoms and why you need a home visit\"\n                          rows={4}\n                          data-testid=\"textarea-concern\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Help us assign the right specialist by describing your condition\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-submit-visit\"\n                >\n                  <Stethoscope className=\"h-4 w-4 mr-2\" />\n                  {isSubmitting ? \"Submitting Request...\" : \"Request Home Visit\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Request History */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Your Requests\n            </CardTitle>\n            <CardDescription>\n              Track the status of your home visit requests\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoadingVisits ? (\n              <div className=\"space-y-4\">\n                <Skeleton className=\"h-24 w-full\" />\n                <Skeleton className=\"h-24 w-full\" />\n              </div>\n            ) : (homeVisits as any[])?.length > 0 ? (\n              <div className=\"space-y-4\">\n                {(homeVisits as any[]).map((visit: any) => (\n                  <div key={visit.id} className=\"border rounded-lg p-4\" data-testid={`visit-card-${visit.id}`}>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div>\n                        <p className=\"font-medium\">{visit.city}</p>\n                        <p className=\"text-sm text-gray-500 mt-1\">{visit.preferredDate} at {visit.preferredTime}</p>\n                      </div>\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(visit.status)}`}>\n                        {visit.status}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-2\">{visit.medicalConcern}</p>\n                    {visit.assignedDoctorId && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <p className=\"text-sm font-medium\">Assigned Doctor: Dr. {visit.assignedDoctorId}</p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Home className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                <p className=\"text-gray-500\">No home visit requests yet.</p>\n                <p className=\"text-sm text-gray-400 mt-1\">Fill out the form to request your first home visit.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":13893},"client/src/pages/ambulance-dashboard.tsx":{"content":"import Layout from \"@/components/layout/Layout\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Truck, MapPin, Phone, User, Clock, Navigation, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function AmbulanceDashboard() {\n  const { toast } = useToast();\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"available\");\n  const [locationTracking, setLocationTracking] = useState<boolean>(false);\n  const [lastLocationUpdate, setLastLocationUpdate] = useState<Date | null>(null);\n  const locationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Get ambulance driver's ambulance\n  const { data: ambulance, isLoading: isLoadingAmbulance } = useQuery({\n    queryKey: [\"/api/ambulance/my-ambulance\"],\n  });\n\n  // Get bookings for this ambulance\n  const { data: bookings, isLoading: isLoadingBookings } = useQuery({\n    queryKey: [\"/api/ambulance/bookings\"],\n  });\n\n  // Update ambulance status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (status: string) => {\n      return await apiRequest(\"PATCH\", \"/api/ambulance/status\", { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status Updated\",\n        description: \"Your ambulance status has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ambulance/my-ambulance\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update location mutation (silent for automatic updates)\n  const updateLocationMutation = useMutation({\n    mutationFn: async (silent: boolean = false) => {\n      return new Promise((resolve, reject) => {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.getCurrentPosition(\n            async (position) => {\n              const { latitude, longitude } = position.coords;\n              try {\n                const result = await apiRequest(\"PATCH\", \"/api/ambulance/location\", {\n                  latitude: latitude.toString(),\n                  longitude: longitude.toString(),\n                });\n                setLastLocationUpdate(new Date());\n                resolve(result);\n              } catch (error) {\n                reject(error);\n              }\n            },\n            (error) => {\n              if (!silent) {\n                reject(new Error(\"Unable to get your location. Please enable location services.\"));\n              }\n            },\n            { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n          );\n        } else {\n          if (!silent) {\n            reject(new Error(\"Geolocation is not supported by your browser.\"));\n          }\n        }\n      });\n    },\n    onSuccess: (data, variables) => {\n      // Only show toast for manual updates\n      if (!variables) {\n        toast({\n          title: \"Location Updated\",\n          description: \"Your current location has been updated successfully.\",\n        });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/ambulance/my-ambulance\"] });\n    },\n    onError: (error: any, variables) => {\n      // Only show toast for manual updates\n      if (!variables) {\n        toast({\n          title: \"Update Failed\",\n          description: error.message || \"Failed to update location.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Automatic location tracking\n  useEffect(() => {\n    if (ambulance && !locationTracking) {\n      // Start location tracking\n      setLocationTracking(true);\n      \n      // Initial location update\n      updateLocationMutation.mutate(true);\n      \n      // Set up interval for periodic updates (every 30 seconds)\n      locationIntervalRef.current = setInterval(() => {\n        updateLocationMutation.mutate(true);\n      }, 30000);\n      \n      toast({\n        title: \"Location Tracking Active\",\n        description: \"Your location is being tracked automatically every 30 seconds.\",\n        duration: 5000,\n      });\n    }\n    \n    // Cleanup on unmount\n    return () => {\n      if (locationIntervalRef.current) {\n        clearInterval(locationIntervalRef.current);\n      }\n    };\n  }, [ambulance]);\n\n  // Accept booking mutation\n  const acceptBookingMutation = useMutation({\n    mutationFn: async (bookingId: number) => {\n      return await apiRequest(\"PATCH\", `/api/ambulance/bookings/${bookingId}/accept`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Accepted\",\n        description: \"You have accepted the booking. Please proceed to the pickup location.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ambulance/bookings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Action Failed\",\n        description: error.message || \"Failed to accept booking.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete booking mutation\n  const completeBookingMutation = useMutation({\n    mutationFn: async (bookingId: number) => {\n      return await apiRequest(\"PATCH\", `/api/ambulance/bookings/${bookingId}/complete`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Completed\",\n        description: \"The booking has been marked as completed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ambulance/bookings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Action Failed\",\n        description: error.message || \"Failed to complete booking.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"available\":\n        return \"bg-green-100 text-green-800\";\n      case \"dispatched\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"on_duty\":\n        return \"bg-yellow-100 text-yellow-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getBookingStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"accepted\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const pendingBookings = bookings?.filter((b: any) => b.status === \"pending\") || [];\n  const activeBookings = bookings?.filter((b: any) => b.status === \"accepted\") || [];\n  const completedBookings = bookings?.filter((b: any) => b.status === \"completed\") || [];\n\n  return (\n    <Layout title=\"Ambulance Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Ambulance Status Card */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Truck className=\"h-5 w-5\" />\n                My Ambulance\n              </CardTitle>\n              <CardDescription>Manage your ambulance status and location</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {isLoadingAmbulance ? (\n                <Skeleton className=\"h-32 w-full\" />\n              ) : ambulance ? (\n                <>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Vehicle Number</p>\n                      <p className=\"text-lg font-semibold\">{ambulance.vehicleNumber}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Current Status</p>\n                      <Badge className={`${getStatusColor(ambulance.status)} mt-1`}>\n                        {ambulance.status}\n                      </Badge>\n                    </div>\n                    {ambulance.currentLatitude && ambulance.currentLongitude && (\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Current Location</p>\n                        <p className=\"text-sm font-medium flex items-center gap-1\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {parseFloat(ambulance.currentLatitude).toFixed(4)}, {parseFloat(ambulance.currentLongitude).toFixed(4)}\n                        </p>\n                        {locationTracking && (\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <div className=\"flex items-center gap-1\">\n                              <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\" />\n                              <span className=\"text-xs text-green-600 font-medium\">Live Tracking</span>\n                            </div>\n                            {lastLocationUpdate && (\n                              <span className=\"text-xs text-gray-400\">\n                                Updated {Math.floor((new Date().getTime() - lastLocationUpdate.getTime()) / 1000)}s ago\n                              </span>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2 pt-4 border-t\">\n                    <label className=\"text-sm font-medium\">Update Status</label>\n                    <Select\n                      value={ambulance.status}\n                      onValueChange={(value) => updateStatusMutation.mutate(value)}\n                    >\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"available\">Available</SelectItem>\n                        <SelectItem value=\"on_duty\">On Duty</SelectItem>\n                        <SelectItem value=\"dispatched\">Dispatched</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <Button\n                      className=\"w-full mt-2\"\n                      variant=\"outline\"\n                      onClick={() => updateLocationMutation.mutate(false)}\n                      disabled={updateLocationMutation.isPending}\n                      data-testid=\"button-update-location\"\n                    >\n                      <Navigation className=\"h-4 w-4 mr-2\" />\n                      {updateLocationMutation.isPending ? \"Updating...\" : \"Update Now\"}\n                    </Button>\n                    <p className=\"text-xs text-gray-500 text-center mt-2\">\n                      Location updates automatically every 30 seconds\n                    </p>\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <AlertCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                  <p className=\"text-gray-500\">No ambulance assigned</p>\n                  <p className=\"text-sm text-gray-400 mt-1\">Contact admin to get an ambulance assigned</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Today's Overview</CardTitle>\n              <CardDescription>Your booking statistics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-yellow-600\">{pendingBookings.length}</p>\n                  <p className=\"text-xs text-gray-500\">Pending</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-blue-600\">{activeBookings.length}</p>\n                  <p className=\"text-xs text-gray-500\">Active</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\">{completedBookings.length}</p>\n                  <p className=\"text-xs text-gray-500\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bookings Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Bookings</CardTitle>\n            <CardDescription>Manage your ambulance booking requests</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"pending\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"pending\">Pending ({pendingBookings.length})</TabsTrigger>\n                <TabsTrigger value=\"active\">Active ({activeBookings.length})</TabsTrigger>\n                <TabsTrigger value=\"completed\">Completed ({completedBookings.length})</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"pending\" className=\"space-y-4 mt-4\">\n                {isLoadingBookings ? (\n                  <div className=\"space-y-3\">\n                    <Skeleton className=\"h-32 w-full\" />\n                    <Skeleton className=\"h-32 w-full\" />\n                  </div>\n                ) : pendingBookings.length > 0 ? (\n                  pendingBookings.map((booking: any) => (\n                    <Card key={booking.id} className=\"border-yellow-200\" data-testid={`booking-card-${booking.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">Booking #{booking.id}</h3>\n                            <Badge className={`${getBookingStatusColor(booking.status)} mt-1`}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-500\">\n                            {new Date(booking.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <User className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">{booking.patientName}</p>\n                              <p className=\"text-gray-500\">{booking.patientPhone}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">Pickup: {booking.pickupAddress}</p>\n                              {booking.dropoffAddress && (\n                                <p className=\"text-gray-500\">Drop-off: {booking.dropoffAddress}</p>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {booking.medicalCondition && (\n                            <div className=\"flex items-start gap-2\">\n                              <AlertCircle className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                              <p className=\"text-gray-700\">{booking.medicalCondition}</p>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"mt-4 pt-3 border-t\">\n                          <Button\n                            className=\"w-full\"\n                            onClick={() => acceptBookingMutation.mutate(booking.id)}\n                            disabled={acceptBookingMutation.isPending}\n                            data-testid={`button-accept-${booking.id}`}\n                          >\n                            {acceptBookingMutation.isPending ? \"Accepting...\" : \"Accept Booking\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Clock className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                    <p className=\"text-gray-500\">No pending bookings</p>\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"active\" className=\"space-y-4 mt-4\">\n                {activeBookings.length > 0 ? (\n                  activeBookings.map((booking: any) => (\n                    <Card key={booking.id} className=\"border-blue-200\" data-testid={`booking-card-${booking.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">Booking #{booking.id}</h3>\n                            <Badge className={`${getBookingStatusColor(booking.status)} mt-1`}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-500\">\n                            {new Date(booking.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <User className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">{booking.patientName}</p>\n                              <p className=\"text-gray-500\">{booking.patientPhone}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">Pickup: {booking.pickupAddress}</p>\n                              {booking.dropoffAddress && (\n                                <p className=\"text-gray-500\">Drop-off: {booking.dropoffAddress}</p>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {booking.medicalCondition && (\n                            <div className=\"flex items-start gap-2\">\n                              <AlertCircle className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                              <p className=\"text-gray-700\">{booking.medicalCondition}</p>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"mt-4 pt-3 border-t\">\n                          <Button\n                            className=\"w-full\"\n                            onClick={() => completeBookingMutation.mutate(booking.id)}\n                            disabled={completeBookingMutation.isPending}\n                            data-testid={`button-complete-${booking.id}`}\n                          >\n                            {completeBookingMutation.isPending ? \"Completing...\" : \"Mark as Completed\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CheckCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                    <p className=\"text-gray-500\">No active bookings</p>\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"completed\" className=\"space-y-4 mt-4\">\n                {completedBookings.length > 0 ? (\n                  completedBookings.map((booking: any) => (\n                    <Card key={booking.id} data-testid={`booking-card-${booking.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">Booking #{booking.id}</h3>\n                            <Badge className={`${getBookingStatusColor(booking.status)} mt-1`}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-500\">\n                            {new Date(booking.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <User className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">{booking.patientName}</p>\n                              <p className=\"text-gray-500\">{booking.patientPhone}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"h-4 w-4 mt-0.5 text-gray-500\" />\n                            <div>\n                              <p className=\"font-medium\">Pickup: {booking.pickupAddress}</p>\n                              {booking.dropoffAddress && (\n                                <p className=\"text-gray-500\">Drop-off: {booking.dropoffAddress}</p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CheckCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-3\" />\n                    <p className=\"text-gray-500\">No completed bookings yet</p>\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":23225},"server/utils/distance.ts":{"content":"export function calculateDistance(\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number {\n  const R = 6371;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) *\n      Math.cos(toRad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\nfunction toRad(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\nexport interface AmbulanceWithDistance {\n  id: number;\n  vehicleNumber: string;\n  status: string;\n  currentLatitude: string | null;\n  currentLongitude: string | null;\n  userId: number | null;\n  driverName: string | null;\n  driverPhone: string | null;\n  distance: number;\n}\n","size_bytes":829}},"version":1}